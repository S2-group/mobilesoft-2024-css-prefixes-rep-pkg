'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

var Context = React__default["default"].createContext({
    usesContext: false,
    dimensions: {},
    useRegisterElement: function () { return ({}); },
});
var useDimensionsContext = function () {
    return React.useContext(Context);
};
var getUseRegisterElement = function (setDimensions) {
    return function (name, ref) {
        React.useEffect(function () {
            if (!(ref === null || ref === void 0 ? void 0 : ref.current) || !name)
                return undefined;
            var addElemToDimensions = function (elementName, domRect) {
                if (!elementName || !domRect)
                    return;
                setDimensions(function (prevDimensions) {
                    var _a;
                    return (_tslib.__assign(_tslib.__assign({}, prevDimensions), (_a = {}, _a["".concat(elementName)] = domRect, _a)));
                });
            };
            addElemToDimensions(name, ref.current.getBoundingClientRect());
            var resizeObserver = new ResizeObserver(function (entries) {
                entries.forEach(function (entry) {
                    addElemToDimensions(name, entry.target.getBoundingClientRect());
                });
            });
            resizeObserver.observe(ref.current);
            return function () {
                resizeObserver.disconnect();
                setDimensions(function (prevDimensions) {
                    var _a;
                    return _tslib.__assign(_tslib.__assign({}, prevDimensions), (_a = {}, _a["".concat(name)] = null, _a));
                });
            };
        }, [name, ref]);
    };
};
function DimensionsProvider(_a) {
    var children = _a.children;
    var _b = React.useState({}), dimensions = _b[0], setDimensions = _b[1];
    var useRegisterElement = getUseRegisterElement(setDimensions);
    var value = React.useMemo(function () { return ({
        usesContext: true,
        dimensions: dimensions,
        useRegisterElement: useRegisterElement,
    }); }, [dimensions, useRegisterElement]);
    return React__default["default"].createElement(Context.Provider, { value: value }, children);
}

exports["default"] = DimensionsProvider;
exports.useDimensionsContext = useDimensionsContext;
//# sourceMappingURL=DimensionsProvider.js.map
