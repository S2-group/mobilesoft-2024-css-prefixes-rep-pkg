'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
var index = require('../../node_modules/classnames/index.js');
var arrowRight = require('../../node_modules/@forbes/fbs-icons/dist/svg/arrow-right.svg.js');
var arrowLeft = require('../../node_modules/@forbes/fbs-icons/dist/svg/arrow-left.svg.js');
var IconButton = require('../Button/IconButton/IconButton.js');
var tracking = require('../../shared/utilities/tracking.js');
var PaginationTile = require('./PaginationTile/PaginationTile.js');
var advancedPagination = require('../../shared/utilities/advancedPagination.js');
var pagination = require('../../data/pagination.js');
var Pagination$1 = require('./Pagination.scss.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

/* eslint-disable react/no-array-index-key */
exports.PaginationSizes = void 0;
(function (PaginationSizes) {
    PaginationSizes["small"] = "small";
    PaginationSizes["medium"] = "medium";
    PaginationSizes["large"] = "large";
})(exports.PaginationSizes || (exports.PaginationSizes = {}));
function Pagination(_a) {
    var handlePagination = _a.handlePagination, dataName = _a.dataName, dataPerPage = _a.dataPerPage, dataLength = _a.dataLength, isAdvanced = _a.isAdvanced, _b = _a.size, size = _b === void 0 ? exports.PaginationSizes.small : _b, paginationTheme = _a.paginationTheme, _c = _a.arrowTheme, arrowTheme = _c === void 0 ? pagination.defaultPaginationArrowsTheme : _c, trackingProps = _a.trackingProps, currentPage = _a.currentPage;
    var handlePageChange = function (pageNum, arrow) {
        var _a;
        var arrowLabel = (_a = trackingProps === null || trackingProps === void 0 ? void 0 : trackingProps.label) === null || _a === void 0 ? void 0 : _a.concat("page{".concat(pageNum, "}"));
        if (arrow === 'Next') {
            arrowLabel = trackingProps === null || trackingProps === void 0 ? void 0 : trackingProps.nextArrowLabel;
        }
        else if (arrow === 'Previous') {
            arrowLabel = trackingProps === null || trackingProps === void 0 ? void 0 : trackingProps.prevArrowLabel;
        }
        handlePagination(pageNum);
        tracking.trackingHandler(trackingProps, arrowLabel);
    };
    var getPages = function () {
        return advancedPagination.getPagesToShow(dataLength, dataPerPage, currentPage).map(function (page, key) {
            return typeof page !== 'string' ? (React__default["default"].createElement(PaginationTile["default"], { className: Pagination$1["default"][size], key: "".concat(key, "-tile"), isActive: page === currentPage, theme: paginationTheme, content: page, onClick: function () {
                    handlePageChange(page);
                } })) : (React__default["default"].createElement("div", { className: Pagination$1["default"].ellipsis, key: "".concat(key, "-tile") }, page));
        });
    };
    var getArrow = function (iconType, disabled) { return (React__default["default"].createElement(IconButton["default"], { className: Pagination$1["default"].paginationArrow, disabled: disabled, variant: arrowTheme.arrowColor, theme: arrowTheme.arrowTheme, size: IconButton.Sizes[size], "aria-label": iconType, icon: iconType === 'Previous' ? React__default["default"].createElement(arrowLeft["default"], null) : React__default["default"].createElement(arrowRight["default"], null), onClick: function () {
            return handlePageChange(iconType === 'Previous' ? currentPage - 1 : currentPage + 1, iconType);
        } })); };
    var getViewing = function () {
        var isLastPage = currentPage === Math.ceil(dataLength / dataPerPage);
        return (React__default["default"].createElement("div", { className: index["default"](Pagination$1["default"].viewing) },
            "Viewing ",
            (currentPage - 1) * dataPerPage + 1,
            "-",
            isLastPage
                ? dataLength
                : (currentPage - 1) * dataPerPage + dataPerPage,
            ' ',
            "of ",
            dataLength,
            " ",
            dataName));
    };
    return (React__default["default"].createElement("nav", { className: Pagination$1["default"].paginationContainer },
        React__default["default"].createElement("div", { className: Pagination$1["default"].pagination },
            getArrow('Previous', currentPage === 1),
            isAdvanced ? getPages() : getViewing(),
            getArrow('Next', currentPage === Math.ceil(dataLength / dataPerPage)))));
}

exports["default"] = Pagination;
//# sourceMappingURL=Pagination.js.map
