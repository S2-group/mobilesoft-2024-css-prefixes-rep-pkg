"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.getConsentState = exports.getIsConsentCookieSet = exports.checkJurisdictionCode = exports.getUserConsent = exports.getFullConsent = exports.getSwbCookie = exports.getSwbCookieValue = void 0;
/**
 * get the _swb_consent_ cookie and url decode it to get it ready for parsing
 * @returns the ketch cookie value
 */
var getSwbCookieValue = function () {
    var cookieValue = '';
    var hasConsentCookie = !!document.cookie.match(/_swb_consent_=/);
    if (!hasConsentCookie) {
        return cookieValue;
    }
    var ketchCookieName = '_swb_consent_=';
    document.cookie.split(';').forEach(function (cookie) {
        if (cookie.trim().startsWith(ketchCookieName)) {
            cookieValue = decodeURIComponent(cookie.split('=')[1]);
        }
    });
    return cookieValue;
};
exports.getSwbCookieValue = getSwbCookieValue;
/**
 * get the cookie and parse it into json from base64 string
 * @returns the consent details
 */
var getSwbCookie = function () {
    var ketchCookie = (0, exports.getSwbCookieValue)();
    try {
        var cookieInfo = window.atob(ketchCookie);
        return JSON.parse(cookieInfo);
    }
    catch (error) {
        return undefined;
    }
};
exports.getSwbCookie = getSwbCookie;
/**
 * checks if the user gave full consent or not
 * @param userConsent - object that has the consent details
 * @returns if the user gave full consent or not
 */
var getFullConsent = function (userConsent) {
    var userConsentPreferences = true;
    var purposesKeys = [];
    try {
        purposesKeys = Object.keys((userConsent || {}).purposes || {});
    }
    catch (_a) {
        console.log('no keys found');
    }
    // safety check for when the cookie is first initialized
    if (purposesKeys.length <= 1) {
        return false;
    }
    purposesKeys.forEach(function (element) {
        if (userConsent.purposes[element].allowed === 'false') {
            userConsentPreferences = false;
        }
    });
    return userConsentPreferences;
};
exports.getFullConsent = getFullConsent;
/**
 * checks if the user gave consent or not
 * @returns if the user gave the consent
 */
var getUserConsent = function (consentPurpose) {
    if (consentPurpose === void 0) { consentPurpose = 'all'; }
    var userConsent = (0, exports.getSwbCookie)();
    if (!userConsent) {
        return false;
    }
    if (consentPurpose === 'all') {
        return (0, exports.getFullConsent)(userConsent);
    }
    if (userConsent.purposes[consentPurpose]) {
        return userConsent.purposes[consentPurpose].allowed !== 'false';
    }
    return false;
};
exports.getUserConsent = getUserConsent;
/**
 * check for the user's jurisdiction code from their consent cookie if they EU or China or California
 * @returns true if the jurisdiction code is from Europe or China or California
 */
var checkJurisdictionCode = function (userLocationData) {
    var isEurope = userLocationData.isEurope, isChina = userLocationData.isChina, isUsDpa = userLocationData.isUsDpa;
    // for simple-site
    if (isEurope || isChina || isUsDpa) {
        return true;
    }
    // for other Projects
    var swbCookie = (0, exports.getSwbCookie)();
    if (!swbCookie || !swbCookie.jurisdictionCode) {
        return false;
    }
    return swbCookie.jurisdictionCode === 'ccpa' || swbCookie.jurisdictionCode === 'PIPL' || swbCookie.jurisdictionCode === 'gdpr';
};
exports.checkJurisdictionCode = checkJurisdictionCode;
/**
 * Check the consent cookie is set at all
 * @returns true if the cookie exists in the document.cookie
 */
var getIsConsentCookieSet = function () { return !!document.cookie.match(/_swb_consent_=/); };
exports.getIsConsentCookieSet = getIsConsentCookieSet;
/**
 * Check status of user consent.
 * @returns 'waiting' if we are waiting to get consent, 'disapproved' if refused, 'ready' otherwise
 */
var getConsentState = function (userLocationData) {
    var hasConsentCookie = (0, exports.getIsConsentCookieSet)();
    var isEurope = userLocationData.isEurope, isChina = userLocationData.isChina;
    var state = 'ready';
    // Safety check for europe and china only in case ketch took too much to load first time
    if ((isEurope || isChina) && !hasConsentCookie) {
        state = 'waiting';
    }
    else if ((isEurope || isChina) && !(0, exports.getUserConsent)()) {
        state = 'disapproved';
    }
    if (hasConsentCookie && (0, exports.checkJurisdictionCode)(userLocationData) && !(0, exports.getUserConsent)()) {
        state = 'disapproved';
    }
    return state;
};
exports.getConsentState = getConsentState;
//# sourceMappingURL=ketch.js.map