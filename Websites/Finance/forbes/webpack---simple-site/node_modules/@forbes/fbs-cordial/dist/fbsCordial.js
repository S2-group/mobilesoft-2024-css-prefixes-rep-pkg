var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import FbsCordialService from './fbsCordialService';
import { FollowingState, Type } from './types';
const FollowingClass = {
    [FollowingState.Follow]: 'follow-button',
    [FollowingState.Unfollow]: 'unfollow-button',
};
const FollowingTooltip = {
    [FollowingState.Follow]: 'Follow Author',
    [FollowingState.Unfollow]: 'Unfollow Author',
};
const FollowingText = {
    [FollowingState.Follow]: 'Follow',
    [FollowingState.Unfollow]: 'Unfollow',
};
export default class FbsCordial extends HTMLElement {
    constructor() {
        super();
        this.window = window;
        this.window['fbsCordial'] = this.window['fbsCordial'] || new FbsCordialService();
        this.cordialService = this.window['fbsCordial'];
    }
    static get observedAttributes() {
        return ['type', 'state'];
    }
    /**
     * Lifecycle method to update the element state in response to changes to its observed properties.
     * @param attributeName
     * @param oldValue
     * @param newValue
     */
    attributeChangedCallback(attributeName, oldValue, newValue) {
        return __awaiter(this, void 0, void 0, function* () {
            if (!this.button || !this.isConnected) {
                return;
            }
            if (attributeName === 'type' && oldValue !== newValue) {
                this.disconnectedCallback();
                yield this.connectedCallback();
            }
            if (this.type === Type.Follow && attributeName === 'state' && oldValue !== newValue) {
                this.button.classList.add(FollowingClass[newValue]);
                this.button.classList.remove(FollowingClass[oldValue]);
                this.button.setAttribute('aria-label', FollowingTooltip[newValue]);
                this.button.innerText = FollowingText[newValue];
            }
        });
    }
    /**
     * Click event handler for the follow button.
     */
    followButtonClickEventListener() {
        var _a, _b, _c, _d;
        return __awaiter(this, void 0, void 0, function* () {
            let el = this.state.toString();
            if (this.pagePosition) {
                el += `-${this.pagePosition}`;
            }
            this.window.dataLayer.push({
                event: 'analyticsEvent',
                'event category': 'newsletters',
                'event action': 'click',
                'event label': el,
                onboardingStep: '',
            });
            if ((_a = window === null || window === void 0 ? void 0 : window.Zephr) === null || _a === void 0 ? void 0 : _a.user) {
                this.cordialService.toggleFollowedAuthors([this.naturalId], [this.authorSlug], this.state === FollowingState.Follow);
                this.state = this.state === FollowingState.Follow ? FollowingState.Unfollow : FollowingState.Follow;
            }
            else {
                this.cordialService.beforeLoginReloadQueue.push(() => {
                    this.cordialService.toggleFollowedAuthors([this.naturalId], [this.authorSlug], this.state === FollowingState.Follow);
                });
                (_d = (_c = (_b = this.window) === null || _b === void 0 ? void 0 : _b.Zephr) === null || _c === void 0 ? void 0 : _c.utils) === null || _d === void 0 ? void 0 : _d.showLogin();
            }
        });
    }
    /**
     * Creates the follow button DOM.
     */
    createFollowButton() {
        this.button = document.createElement('button');
        this.button.setAttribute('aria-label', FollowingTooltip[this.state]);
        this.button.classList.add(FollowingClass[this.state]);
        this.button.innerText = FollowingText[this.state];
        this.appendChild(this.button);
        this.button.addEventListener('click', () => this.followButtonClickEventListener());
        this.cordialService.subscribe(this);
    }
    /**
     * Handle data updates
     */
    update() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.type === Type.Follow) {
                yield this.cordialService.getUserCordialData().then((res) => {
                    this.state = (res.followedAuthors || []).includes(this.naturalId) ? FollowingState.Unfollow : FollowingState.Follow;
                });
            }
        });
    }
    /**
     * Lifecycle for method for bootstrapping an fbs-cordial element.
     */
    connectedCallback() {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.type === Type.Follow) {
                return this.cordialService.getUserCordialData().then((res) => {
                    this.state = (res.followedAuthors || []).includes(this.naturalId) ? FollowingState.Unfollow : FollowingState.Follow;
                    this.createFollowButton();
                });
            }
        });
    }
    /**
     * Lifecycle method for removing an fbs-cordial element.
     */
    disconnectedCallback() {
        if (this.button) {
            this.removeChild(this.button);
            delete this.button;
        }
    }
    /**
     * Sets the type of fbs-cordial element.
     * @param {Type} type
     */
    set type(type) {
        this.setAttribute('type', type);
    }
    /**
     * Get the type of fbs-cordial element.
     * @return {Type}
     */
    get type() {
        const type = this.getAttribute('type');
        return Type[type];
    }
    /**
     * Sets the position of fbs-cordial element.
     * @param {string} position
     */
    set pagePosition(position) {
        this.setAttribute('page-position', position);
    }
    /**
     * Get the position of fbs-cordial element.
     * @return {string}
     */
    get pagePosition() {
        return this.getAttribute('page-position');
    }
    /**
     * Sets the following state of the fbs-cordial element.
     * @param {FollowingState} state
     */
    set state(state) {
        this.setAttribute('state', state);
    }
    /**
     * Gets the following state of the fbs-cordial element.
     * @return {FollowingState}
     */
    get state() {
        const state = this.getAttribute('state');
        return FollowingState[state];
    }
    /**
     * Sets the natural id (of the author) associated with this fbs-cordial element
     * @param {String} naturalId
     */
    set naturalId(naturalId) {
        this.setAttribute('natural-id', naturalId);
    }
    /**
     * Gets the natural id (of the author) associated with this fbs-cordial element
     * @return {String}
     */
    get naturalId() {
        return this.getAttribute('natural-id');
    }
    /**
     * Sets the slug (of the author) associated with this fbs-cordial element.
     * @param {String} authorSlug
     */
    set authorSlug(authorSlug) {
        this.setAttribute('author-slug', authorSlug);
    }
    /**
     * Gets the slug (of the author) associated with this fbs-cordial element.
     * @return {String}
     */
    get authorSlug() {
        return this.getAttribute('author-slug');
    }
}
