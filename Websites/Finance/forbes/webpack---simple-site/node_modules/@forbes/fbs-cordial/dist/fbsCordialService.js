var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import { waitForInit, isInitReady, isInitValid, isProd } from './util';
export default class FbsCordialService {
    constructor(userCordialData) {
        this.window = window;
        this.beforeLoginReloadQueue = [];
        this.cordialEls = [];
        if (userCordialData) {
            this.userCordialData = Promise.resolve(userCordialData);
        }
    }
    /**
     * Sets Piano custom variables based on cordial features. Also adds them to local storage.
     * Only does this if the user is logged in.
     * @param lists
     * @param followedAuthors
     * @param eventinterests
     */
    setCordialCustomVariables(cID, lists, followedAuthors, eventinterests) {
        return __awaiter(this, void 0, void 0, function* () {
            yield waitForInit((isLoggedIn) => __awaiter(this, void 0, void 0, function* () {
                if (isLoggedIn) {
                    const cordialCustomVars = {};
                    for (const list of lists) {
                        cordialCustomVars[`Newsletter:${list}`] = true;
                    }
                    for (const naturalId of followedAuthors) {
                        // UEM-1280 Remove Followed Author CV from Piano as we don't use the atm.
                        cordialCustomVars[`FollowedAuthor:${naturalId}`] = true;
                    }
                    for (const event of eventinterests) {
                        cordialCustomVars[`EventInterest:${event}`] = true;
                    }
                    // this was told to be left here even though we are removing piano (tp)
                    this.window.localStorage.setItem('fbs-tp-customVariables', JSON.stringify(Object.assign(Object.assign({}, cordialCustomVars), { expiration: new Date().getTime() + 30 * 24 * 60 * 60 * 1000 })));
                    if (cID) {
                        this.window.localStorage.setItem('cID', cID);
                    }
                    this.window.localStorage.setItem('newslettersList', lists.join(','));
                }
            }), 3000);
        });
    }
    // TODO: Cache this somehow in the browser while handling updates from multiple sources
    /**
     * Gets the user cordial data via pref center proxy and updates in the data layer.
     * Returns an empty object if the user is not valid
     * @return {Promise<any>}
     */
    getUserCordialDataFromServer() {
        return __awaiter(this, void 0, void 0, function* () {
            let cordialData = {};
            yield waitForInit((isLoggedIn) => __awaiter(this, void 0, void 0, function* () {
                if (isLoggedIn) {
                    const subscriptionsData = yield fetch(`https://${isProd() ? '' : 'staging-'}account.forbes.com/api-data/get-cordial-data`, {
                        method: 'GET',
                        credentials: 'include',
                        headers: {
                            'Content-Type': 'application/json',
                            'Cache-Control': 'private, no-cache, no-store, must-revalidate',
                            Pragma: 'no-cache',
                        },
                    })
                        .then((res) => res.json())
                        .catch((error) => {
                        console.error('cordial post error: ', error);
                        return {};
                    });
                    const { attributes: { cID = '', lists = [], followed_natural_id: followedAuthors = [], eventinterests = [], title = '', 'company-industry': industry = '', } = {}, } = subscriptionsData;
                    cordialData = {
                        cID,
                        lists,
                        followedAuthors,
                        eventinterests,
                        title,
                        industry,
                    };
                    this.window.dataLayer.push({
                        cordialData,
                    });
                    this.setCordialCustomVariables(cID, lists, followedAuthors, eventinterests);
                }
            }), 3000);
            return cordialData;
        });
    }
    /**
     * Returns the user cordial data promise if it already exists in memory on the service for this page or initiates a new request
     * to the server and caches it as a private member on the service for the future.
     *
     * @return {Promise<any>}
     */
    getUserCordialData() {
        return __awaiter(this, void 0, void 0, function* () {
            if (!isInitValid()) {
                yield new Promise((resolve) => {
                    document.addEventListener('fbs-zephr-init', () => {
                        resolve();
                    });
                });
            }
            if (this.userCordialData) {
                const { cID, lists = [], followedAuthors = [], eventinterests = [] } = yield this.userCordialData;
                this.setCordialCustomVariables(cID, lists, followedAuthors, eventinterests);
                return this.userCordialData;
            }
            this.userCordialData = this.getUserCordialDataFromServer();
            return yield this.userCordialData;
        });
    }
    /**
     * Subscribes the cordial el to notifications of state changes from cordial service
     * @param cordialEl
     */
    subscribe(cordialEl) {
        this.cordialEls.push(cordialEl);
    }
    /**
     * Notifies subscribed cordial elements that they should check for updates.
     */
    publish() {
        for (const el of this.cordialEls) {
            el.update();
        }
    }
    /**
     * Sets Cordial cookies based on the currently Piano-signed-in user.
     */
    identify() {
        return __awaiter(this, void 0, void 0, function* () {
            yield waitForInit((isLoggedIn) => {
                var _a, _b, _c;
                if (isLoggedIn) {
                    this.window.crdl('contact', { email: (_c = (_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.Zephr) === null || _b === void 0 ? void 0 : _b.user) === null || _c === void 0 ? void 0 : _c.email }, {});
                }
            }, 5000);
            if (isInitReady()) {
                return isInitValid();
            }
            return false;
        });
    }
    /**
     * Removes the user's Cordial cookies.
     */
    forget() {
        this.window.crdl('forget');
    }
    // TODO: Update followed authors array on the instance object (model)
    /**
     * Adds or removes the Piano-signed-in user from the authors following list in Cordial.
     * @param {Array<String>} naturalIDs
     * @param {Array<String>} slugs
     * @param {boolean} [add=true]
     */
    toggleFollowedAuthors(naturalIDs, slugs, add = true) {
        return __awaiter(this, void 0, void 0, function* () {
            yield waitForInit((isLoggedIn) => __awaiter(this, void 0, void 0, function* () {
                var _a, _b, _c, _d, _e, _f, _g, _h;
                if (isLoggedIn) {
                    const cordialData = yield this.getUserCordialData();
                    // TODO: Cordial has a bug where removals from arrays don't work for more than one attribute in a request,
                    // so we have to make 3 requests.
                    // Once that is fixed, go back to this implementation
                    if (add) {
                        this.window.crdl('contact', { email: (_b = (_a = this.window) === null || _a === void 0 ? void 0 : _a.Zephr) === null || _b === void 0 ? void 0 : _b.user.email }, {
                            Follow: true,
                            followed_natural_id: { add: naturalIDs },
                            followed_author_slug: { add: slugs },
                            follow_source: { add: [this.pageType] },
                        });
                        naturalIDs.forEach((naturalID) => this.window.dataLayer.push({
                            event: 'analyticsEvent',
                            'event category': 'newsletters',
                            'event action': 'followSuccess',
                            'event label': naturalID,
                            onboardingStep: '',
                        }));
                        this.window.crdl('event', 'followed_author_newsletter');
                        naturalIDs.forEach((naturalID) => {
                            const { followedAuthors = [] } = cordialData;
                            followedAuthors.push(naturalID);
                        });
                    }
                    else {
                        const { followedAuthors = [] } = cordialData;
                        if (followedAuthors.filter((id) => !naturalIDs.includes(id)).length === 0) {
                            this.window.crdl('contact', { email: (_d = (_c = this.window) === null || _c === void 0 ? void 0 : _c.Zephr) === null || _d === void 0 ? void 0 : _d.user.email }, {
                                Follow: false,
                            });
                        }
                        this.window.crdl('contact', { email: (_f = (_e = this.window) === null || _e === void 0 ? void 0 : _e.Zephr) === null || _f === void 0 ? void 0 : _f.user.email }, {
                            followed_natural_id: { remove: naturalIDs },
                        });
                        this.window.crdl('contact', { email: (_h = (_g = this.window) === null || _g === void 0 ? void 0 : _g.Zephr) === null || _h === void 0 ? void 0 : _h.user.email }, {
                            followed_author_slug: { remove: slugs },
                        });
                        cordialData.followedAuthors = followedAuthors.filter((id) => !naturalIDs.includes(id));
                    }
                    this.publish();
                }
            }), 3000);
        });
    }
}
