var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
export const isInitReady = () => {
    var _a;
    return ((_a = window === null || window === void 0 ? void 0 : window.Zephr) === null || _a === void 0 ? void 0 : _a.user) || (window === null || window === void 0 ? void 0 : window.Zephr.error);
};
export const isInitValid = () => {
    var _a;
    return !!((_a = window === null || window === void 0 ? void 0 : window.Zephr) === null || _a === void 0 ? void 0 : _a.user);
};
export const isProd = () => {
    const isProdByWindow = Object.keys(window.forbes || {}).some((key) => { var _a, _b; return (_b = (_a = window === null || window === void 0 ? void 0 : window.forbes) === null || _a === void 0 ? void 0 : _a[key]) === null || _b === void 0 ? void 0 : _b.isProd; });
    return isProdByWindow || !!window.location.host.match(/^(www|account).forbes.com/);
};
export const waitForInit = (callback, maxTime, elapsedTime = 0) => __awaiter(void 0, void 0, void 0, function* () {
    const promise = new Promise((resolve) => {
        if (!isInitReady() && elapsedTime <= maxTime) {
            setTimeout(() => {
                waitForInit(resolve, maxTime, (elapsedTime += 100));
            }, 100);
        }
        else if (isInitReady()) {
            resolve(isInitValid());
        }
        else {
            resolve(false);
        }
    });
    const promiseResult = yield promise;
    yield callback(promiseResult);
    return !!promiseResult;
});
