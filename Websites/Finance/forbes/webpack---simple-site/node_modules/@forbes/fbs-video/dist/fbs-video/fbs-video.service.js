var __assign = (this && this.__assign) || Object.assign || function(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
        s = arguments[i];
        for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
            t[p] = s[p];
    }
    return t;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { loadScript, loadStyle } from '@forbes/fbs-assets-loader';
import { PlayerData } from '../utils/player-data';
var rightRailPLayer = 'S1EBSbDn';
export var thumbnailDimensions = [
    384,
    768,
    1024,
    1280,
    1600,
    1920,
];
/**
 * This is a service which controls video players on Forbes pages.
 */
var FbsVideoService = /** @class */ (function () {
    function FbsVideoService() {
        this.ima3Config = {
            serverUrl: '',
            requestMode: 'onplay',
            vpaidMode: 'ENABLED',
            timeout: 10000,
            showVpaidControls: true
        };
        this.bc = window['bc'];
        this.videojs = window['videojs'];
        this.srVideoInit = window['srVideoInit'];
        // playerData keeps track of state of any on page (in DOM) player instance
        this.playerData = new Map();
        this.idCount = 0;
        this.playerCount = 0; // Number of players on the page.
        this.PID = '50e4a8434240cf5c4b000009'; // SimpleReach PID
        this.amazonBids = {};
        this.hiddenPauseEnabled = true;
    }
    /**
     * @param link Original link
     * @returns if image is cropped
     */
    FbsVideoService.isCroppedImage = function (link) {
        return link.includes('cropX1') && link.includes('cropX2') && link.includes('cropY1') && link.includes('cropY2');
    };
    /**
     * @param link Original link
     * @returns crop parameters for Fastly API
     */
    FbsVideoService.getFastlyCrop = function (link) {
        var cropTopX = this.getParameterByName('cropX1', link);
        var cropBottomX = this.getParameterByName('cropX2', link);
        var cropTopY = this.getParameterByName('cropY1', link);
        var cropBottomY = this.getParameterByName('cropY2', link);
        var cropSizeX = parseInt(cropBottomX) - parseInt(cropTopX);
        var cropSizeY = parseInt(cropBottomY) - parseInt(cropTopY);
        return "crop=" + cropSizeX + "," + cropSizeY + ",x" + cropTopX + ",y" + cropTopY + ",safe";
    };
    /**
     * @param link Original link
     * @returns image link with 0x0 height/width
     */
    FbsVideoService.getOriginalImage = function (link) {
        var splitLink = link.split('/');
        splitLink[splitLink.length - 1] = splitLink[splitLink.length - 1].replace(/[0-9]+x[0-9]+/, '0x0');
        return splitLink.join('/');
    };
    /**
     * @param link Original link
     * @returns if link type is png
     */
    FbsVideoService.isImagePNG = function (link) {
        if (link === void 0) { link = ''; }
        return /(\.png)($|\?)/.test(link);
    };
    /**
     * @param link Original link
     * @returns if link type if gif
     */
    FbsVideoService.isImageGIF = function (link) {
        if (link === void 0) { link = ''; }
        return /(\.gif)($|\?)/.test(link);
    };
    /**
     * Make urls https
     * @param url
     *
     * @returns string
     **/
    FbsVideoService.httpsUrl = function (url) {
        return (url || '').replace(/^http:/, 'https:');
    };
    /**
     * Prepend relative images with blogs-images
     * @param url
     * @param isStaging
     *
     * @returns string
     **/
    FbsVideoService.normalizeImageDomain = function (url, isStaging) {
        var fullUrl;
        url = url || '';
        if (url.startsWith('//')) {
            fullUrl = "https:" + url;
        }
        else if (url.startsWith('/')) {
            fullUrl = "https://" + (isStaging ? 'damapi-stagevip.forbes.com' : 'blogs-images.forbes.com') + url;
        }
        else {
            fullUrl = this.httpsUrl(url);
        }
        return fullUrl;
    };
    /**
     * Gets Fastly virtual path based on provided url
     * @param url
     *
     * @returns string[] | undefined
     **/
    FbsVideoService.getFastlyVirtualPath = function (url) {
        var cleanUrl = url.replace(/^https?:\/\//, '');
        for (var key in this.fastlyVirtualPathMapping) {
            if (cleanUrl.startsWith(key)) {
                return [key, this.fastlyVirtualPathMapping[key]];
            }
        }
        return undefined;
    };
    FbsVideoService.getParameterByName = function (name, url) {
        if (url === void 0) { url = window.location.href; }
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)');
        var results = regex.exec(url);
        if (!results) {
            return null;
        }
        if (!results[2]) {
            return '';
        }
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    };
    /**
     * Prepend image urls with imageio (Fastly) path
     * @param url
     * @param isStaging
     *
     * @returns string
     **/
    FbsVideoService.prependFastly = function (url, isStaging) {
        if (url === void 0) { url = ''; }
        if ((url || '').indexOf('imageio') > -1) {
            return url;
        }
        if ((url || '').indexOf('gravatar') > -1) {
            return url;
        }
        var isCropped = this.isCroppedImage(url);
        var fit = isCropped ? 'crop' : 'bounds';
        var normalizedUrl = this.normalizeImageDomain(url, isStaging);
        var normalizedFastlyUrl = this.getFastlyVirtualPath(normalizedUrl);
        if (!normalizedFastlyUrl) {
            return url;
        }
        var host = normalizedFastlyUrl[0], virtualPath = normalizedFastlyUrl[1];
        var uriPart = normalizedUrl.replace("https://" + host + "/", '');
        if (uriPart.includes('?')) {
            // we need to remove query parameters because fastly receives its own parameters in url
            uriPart = uriPart.split('?')[0];
        }
        var fastlyUrl = isStaging ? 'imageio-staging.forbes.com' : 'imageio.forbes.com';
        var format = this.isImagePNG(normalizedUrl) ? 'png' : this.isImageGIF(normalizedUrl) ? 'gif' : 'jpg';
        var fullUrl = "https://" + fastlyUrl + "/" + virtualPath + "/" + uriPart + "?fit=" + fit + "&format=" + format;
        if (isCropped) {
            var fastlyCropParams = this.getFastlyCrop(url);
            fullUrl += "&" + fastlyCropParams;
            fullUrl = this.getOriginalImage(fullUrl);
        }
        return fullUrl;
    };
    FbsVideoService.prototype.generateId = function () {
        return 'brightcove_perform_' + this.idCount++;
    };
    FbsVideoService.prototype.initKerv = function (kervContent, videoElementId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.kervService) {
                    this.kervService.loadOverlay(Number(kervContent), "#" + videoElementId);
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Initialize Brightcove Perform video player
     */
    FbsVideoService.prototype.init = function (options) {
        return __awaiter(this, void 0, void 0, function () {
            var playerData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.fbsAdsService = window['fbsads'];
                        playerData = this.playerData.get(options.videoElementId);
                        playerData = playerData ? Object.assign(playerData, options) : new PlayerData(options);
                        this.playerData.set(options.videoElementId, playerData);
                        playerData.amazonId = 'videoSlot' + ++this.playerCount;
                        return [4 /*yield*/, this.waitforGdpr()];
                    case 1:
                        _a.sent();
                        if (!!playerData.adsDisabled) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.loadMnet()];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: 
                    // Load player specific videojs
                    return [4 /*yield*/, this.loadVideojs(playerData)];
                    case 4:
                        // Load player specific videojs
                        _a.sent();
                        if (!!playerData.adsDisabled) return [3 /*break*/, 6];
                        return [4 /*yield*/, this.loadKerv()];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [4 /*yield*/, this.initPlugins(playerData)];
                    case 7:
                        _a.sent();
                        return [4 /*yield*/, this.loadIma3(playerData.playerId)];
                    case 8:
                        _a.sent();
                        return [4 /*yield*/, this.loadIntegral()];
                    case 9:
                        _a.sent();
                        return [4 /*yield*/, this.initPlayer(playerData)];
                    case 10:
                        _a.sent();
                        this.callSimpleReach(playerData);
                        this.setSimpleReachEvents(playerData);
                        this.setPlayerBreakpoints(playerData);
                        return [2 /*return*/, playerData];
                }
            });
        });
    };
    FbsVideoService.prototype.waitforGdpr = function () {
        return __awaiter(this, void 0, void 0, function () {
            var trackingService, promise;
            return __generator(this, function (_a) {
                trackingService = window['trackingService'] || {};
                promise = new Promise(function (resolve) {
                    // this code is copied from simplesite to wait for the consent cookie incase it's not loaded
                    if ((trackingService.isEurope || trackingService.isChina) && !document.cookie.match(/_swb_consent_=/)) {
                        var intervalCheck_1 = 0;
                        var gdprInterval_1 = setInterval(function () {
                            // We check for the cookie or wait 7 seconds
                            if (document.cookie.match(/_swb_consent_=/) || intervalCheck_1 > 35) {
                                clearInterval(gdprInterval_1);
                                resolve();
                            }
                            else {
                                intervalCheck_1++;
                            }
                        }, 200);
                    }
                    else {
                        resolve();
                    }
                });
                return [2 /*return*/, promise];
            });
        });
    };
    FbsVideoService.prototype.requestMnetBids = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.fbsAdsService) {
                    return [2 /*return*/, ''];
                }
                return [2 /*return*/, Promise.race([
                        this.fbsAdsService.fetchMediaNetVideoBids(),
                        new Promise(function (resolve) {
                            setTimeout(resolve, 2000);
                        }).then(function () { return ''; })
                    ])];
            });
        });
    };
    FbsVideoService.prototype.loadMnet = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (this.fbsAdsService.initMediaNetVideoBidding()) {
                    return [2 /*return*/, this.fbsAdsService.initMediaNetVideoBidding()];
                }
                return [2 /*return*/];
            });
        });
    };
    /**
     * Notify the service of a video beginning to play
     */
    FbsVideoService.prototype.notifyPlaying = function (videoElementId) {
        var videoPlayEvent = new CustomEvent('fbs-video-playing', {
            detail: { videoElementId: videoElementId },
        });
        document.dispatchEvent(videoPlayEvent);
    };
    /**
     * Set up init function for Simple Reach for the page.
     */
    FbsVideoService.prototype.simpleReachCall = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                window['srVideoInit'] = function (_v, _p) {
                    if (window['SimplereachVideo']) {
                        window[_v] = window['SimplereachVideo'].video(_p);
                    }
                    return window[_v];
                };
                return [2 /*return*/];
            });
        });
    };
    /**
     * Load player specific videojs
     * @return {Observable} that emits when videojs is ready
     */
    FbsVideoService.prototype.loadVideojs = function (playerData) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadScript("//players.brightcove.net/2097119709001/" + playerData.playerId + "_default/index.min.js")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.loadScript('//images.forbes.com/brightcove/video.js')];
                    case 2:
                        _a.sent();
                        return [4 /*yield*/, this.simpleReachCall()];
                    case 3:
                        _a.sent();
                        // Set variables on first load
                        this.videojs = window['videojs'];
                        this.srVideoInit = window['srVideoInit'];
                        this.bc = window['bc'];
                        return [2 /*return*/];
                }
            });
        });
    };
    FbsVideoService.prototype.loadKerv = function () {
        return __awaiter(this, void 0, void 0, function () {
            var kervApiKey;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.loadScript('//rcdn.kervinteractive.com/overlay/v3/prod/embed-3.0.min.js')];
                    case 1:
                        _a.sent();
                        this.kervService = window['kervEmbed'];
                        if (this.kervService) {
                            kervApiKey = '01E597SF7KMYCKA88ASW66YF6W';
                            this.kervService.init(kervApiKey);
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Handles initializing any brightcove plugins that are attached to the player.
     * @param playerData the player's data object. Contains information like which video is playing, and is autoplay on
     */
    FbsVideoService.prototype.initPlugins = function (playerData) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            var player;
            return __generator(this, function (_a) {
                player = this.bc(playerData.id);
                if (player && player.overlayAddons) {
                    player.overlayAddons(playerData.showOverlay);
                }
                document.addEventListener('ad-ended', function () { return __awaiter(_this, void 0, void 0, function () {
                    return __generator(this, function (_a) {
                        switch (_a.label) {
                            case 0: return [4 /*yield*/, this.initKerv(playerData.kervContent, playerData.videoElementId)];
                            case 1:
                                _a.sent();
                                return [2 /*return*/];
                        }
                    });
                }); });
                return [2 /*return*/];
            });
        });
    };
    FbsVideoService.prototype.loadIntegral = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, Promise.race([
                        this.loadScript('//static.adsafeprotected.com/vans-adapter-google-ima.js'),
                        new Promise(function (resolve) {
                            setTimeout(resolve, 1000);
                        }).then(function () { return undefined; })
                    ])];
            });
        });
    };
    /**
     * Load Needed Scripts For Playlist
     * @param playerId used to exclude none right-rail plugins from update.
     */
    FbsVideoService.prototype.preparePlaylist = function (playerId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(playerId === rightRailPLayer)) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.loadScript("//players.brightcove.net/videojs-bc-playlist-ui/3.8.0/videojs-bc-playlist-ui.min.js")];
                    case 1:
                        _a.sent();
                        return [4 /*yield*/, this.loadStyle('//players.brightcove.net/videojs-bc-playlist-ui/3.8.0/videojs-bc-playlist-ui.css')];
                    case 2:
                        _a.sent();
                        return [3 /*break*/, 6];
                    case 3: return [4 /*yield*/, this.loadScript("//players.brightcove.net/videojs-bc-playlist-ui/3/videojs-bc-playlist-ui.min.js")];
                    case 4:
                        _a.sent();
                        return [4 /*yield*/, this.loadStyle('//players.brightcove.net/videojs-bc-playlist-ui/3/videojs-bc-playlist-ui.css')];
                    case 5:
                        _a.sent();
                        _a.label = 6;
                    case 6: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Initialize Simple Reach data for a player.
     */
    FbsVideoService.prototype.callSimpleReach = function (playerData, event) {
        if (event === void 0) { event = 'init'; }
        var info = playerData['player']['mediainfo'];
        this.srVideoInit(playerData.id, {
            pid: this.PID,
            video_id: info.id,
            title: info['name'],
            description: info['description'],
            article_id: '',
            length: Math.trunc(info['duration']),
            thumbnail_url: info['thumbnail'],
            tags: info['tags'],
            date: info['createdAt'],
            ignore_errors: false,
            event_name: event,
        });
    };
    /**
     * Fire Simple Reach events.
     *
     * Set up listeners on a player for events from Brightcove, and use them to fire Simple Reach's events.
     */
    FbsVideoService.prototype.setSimpleReachEvents = function (playerData) {
        var player = this.videojs.getPlayer(playerData.id);
        var elapsedThresholdsToTrack = [3, 15, 30, 45];
        var currentTime;
        var quartile = 0;
        var elapsed = 0;
        player.on('firstPlay', function () {
            if (window[playerData.id] && window[playerData.id].start) {
                window[playerData.id].start(playerData.autoplay ? 'auto' : 'click');
            }
        });
        player.on('timeupdate', function (e) {
            if (parseInt(currentTime) !== Math.floor(player.currentTime())) {
                currentTime = Math.floor(player.currentTime());
                var loadPercentage = Math.floor((player.currentTime() / player.duration()) * 100);
                // loadPercentage sometimes skips over a percent or two, so check if we're at least another quarter through the video.
                // Handle 100% quartile with ended event.
                if (loadPercentage >= quartile + 25 && loadPercentage < 100) {
                    quartile += 25;
                    if (window[playerData.id].quartile) {
                        window[playerData.id].quartile(quartile);
                    }
                }
                // Fire elapsed every 15 seconds. Check if at least 15 seconds have passed since the exact amount may be skipped over.
                if (currentTime >= elapsed + 15) {
                    elapsed += 15;
                    if (window[playerData.id].elapsed) {
                        window[playerData.id].elapsed(15);
                    }
                }
                if (currentTime >= elapsedThresholdsToTrack[0]) {
                    if (window[playerData.id].elapsedThreshold) {
                        window[playerData.id].elapsedThreshold(elapsedThresholdsToTrack.shift());
                    }
                }
            }
        });
        player.on('ended', function (e) {
            if (window[playerData.id].quartile) {
                window[playerData.id].quartile(quartile);
            }
            if (window[playerData.id].complete) {
                window[playerData.id].complete(quartile);
            }
        });
    };
    FbsVideoService.prototype.loadScript = function (src) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        loadScript(src, resolve);
                    })];
            });
        });
    };
    FbsVideoService.prototype.loadStyle = function (src) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        loadStyle(src, resolve);
                    })];
            });
        });
    };
    /**
     * Load IMA3 advertising module
     * @param playerId used to exclude none right-rail plugins from update.
     */
    FbsVideoService.prototype.loadIma3 = function (playerId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!(playerId === rightRailPLayer)) return [3 /*break*/, 2];
                        return [4 /*yield*/, Promise.all([
                                this.loadStyle('//players.brightcove.net/videojs-ima3/4/videojs-ima3.css'),
                                this.loadScript('//players.brightcove.net/videojs-ima3/4/videojs-ima3.min.js')
                            ])];
                    case 1:
                        _a.sent();
                        return [3 /*break*/, 4];
                    case 2: return [4 /*yield*/, Promise.all([
                            this.loadStyle('//players.brightcove.net/videojs-ima3/3/videojs.ima3.min.css'),
                            this.loadScript('//players.brightcove.net/videojs-ima3/3/videojs.ima3.min.js')
                        ])];
                    case 3:
                        _a.sent();
                        _a.label = 4;
                    case 4: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Initialize IMA3 advertising module with custom key value pairs
     */
    FbsVideoService.prototype.setAdTargeting = function (playerData) {
        return __awaiter(this, void 0, void 0, function () {
            var serverUrl, requestMode;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!playerData.player.ima3) {
                            return [2 /*return*/];
                        }
                        return [4 /*yield*/, this.getAdServerUrl(playerData)];
                    case 1:
                        serverUrl = _a.sent();
                        requestMode = playerData.autoplay ? 'onload' : 'onplay';
                        // Override in case initIma3 is called on a page that already has preconfigured ads
                        if (playerData.player.ima3 instanceof Function) {
                            this.ima3Config.serverUrl = serverUrl;
                            this.ima3Config.requestMode = requestMode;
                            playerData.player.ima3(this.ima3Config);
                        }
                        else {
                            playerData.player.ima3.settings.requestMode = requestMode;
                            playerData.player.ima3.settings.serverUrl = serverUrl;
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Ad Server URL for ads given a player data
     */
    FbsVideoService.prototype.getAdServerUrl = function (playerData) {
        return __awaiter(this, void 0, void 0, function () {
            var pageTargeting, videoTargeting, keyValuesPairs, keyValues, rect, targeting, qsParams, customParams, key, videoUrl, nonPersonalizedAds, trackingService;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.getPageTargeting()];
                    case 1:
                        pageTargeting = _a.sent();
                        videoTargeting = this.getVideoAdTargeting(playerData);
                        keyValuesPairs = (playerData.keyValueString || '').split('&');
                        keyValues = (keyValuesPairs || []).reduce(function (acc, current) {
                            var _a = current.split('='), key = _a[0], value = _a[1];
                            // values will sometimes contain '&' character, so are encoded since we are splitting on '&'
                            // will throw error for malformed uri sequences
                            try {
                                acc[key] = decodeURIComponent(value || '');
                            }
                            catch (err) {
                                console.error(err);
                                acc[key] = '';
                            }
                            return acc;
                        }, {});
                        rect = playerData.player.el_.getBoundingClientRect();
                        // check if height is 300 and has a 4:3 aspect ratio or higher
                        if (rect.height === 300 && rect.width / rect.height >= 1.33) {
                            keyValues['vh'] = '300plus';
                        }
                        targeting = __assign({}, pageTargeting, videoTargeting, keyValues);
                        qsParams = ((this.amazonBids[playerData.amazonId] || {})['helpers'] || {})['qsParams'] || '';
                        if (typeof qsParams === 'function') {
                            // Amazon's documentation says this should be a string but it's actually a function.
                            qsParams = qsParams();
                        }
                        customParams = '';
                        if (qsParams.length > 1) {
                            customParams += (customParams ? qsParams : qsParams.substring(1));
                            delete this.amazonBids[playerData.amazonId];
                        }
                        for (key in targeting) {
                            if (targeting.hasOwnProperty(key)) {
                                customParams += (customParams ? '&' : '') + key + '=' + encodeURIComponent(targeting[key]);
                            }
                        }
                        if (this.mnetBids) {
                            customParams += (customParams ? '&' : '') + this.mnetBids;
                            this.mnetBids = '';
                        }
                        customParams = encodeURIComponent(customParams);
                        videoUrl = encodeURIComponent("https://www.forbes.com/video/" + playerData.videoId + "/");
                        nonPersonalizedAds = '';
                        trackingService = window['trackingService'] || {};
                        if ((trackingService.isEurope || trackingService.isChina || trackingService.checkJurisdictionCode())) {
                            if (document.cookie.match(/_swb_consent_=/) && !trackingService.getUserConsent('behavioral_advertising')) {
                                nonPersonalizedAds = '&npa=1';
                            }
                        }
                        /* tslint:disable-next-line: max-line-length */
                        return [2 /*return*/, "https://pubads.g.doubleclick.net/gampad/ads?sz=620x350|480x320&ciu_sz=s&impl=s&gdfp_req=1&env=vp&output=xml_vast2&unviewed_position_start=1" + nonPersonalizedAds + "&iu=" + playerData.adUnitPath + "&cust_params=" + customParams + "&url=[referrer_url]&correlator=[timestamp]&description_url=" + videoUrl];
                }
            });
        });
    };
    /**
     * Get Page Level Ad Targeting
     */
    FbsVideoService.prototype.getPageTargeting = function () {
        return __awaiter(this, void 0, void 0, function () {
            var targeting, pageTargeting_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        targeting = {};
                        if (!this.fbsAdsService) return [3 /*break*/, 2];
                        return [4 /*yield*/, this.fbsAdsService.getPageTargeting()];
                    case 1:
                        pageTargeting_1 = _a.sent();
                        Object.keys(pageTargeting_1)
                            .filter(function (key) {
                            // Don't pull in page-level header bidding
                            return !(key.startsWith('mnet') || key.startsWith('fb_') || key.startsWith('amzn'));
                        }).forEach(function (key) {
                            targeting[key] = pageTargeting_1[key].join();
                        });
                        return [2 /*return*/, targeting];
                    case 2: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * Get Ad Targeting Specific to Video Information
     * @param playerData Player data to get targeting for
     * NOTE:
     * 'channelsection' === channel
     * 'channelsection2' === section
     * these values are defined in brightcove and, while confusing, can't be changed
     */
    FbsVideoService.prototype.getVideoAdTargeting = function (playerData) {
        var _a = this.getMediaInformation(playerData), duration = _a.duration, _b = _a.customFields, customFields = _b === void 0 ? {} : _b;
        var videoId = playerData.videoId, secretAutoplay = playerData.secretAutoplay, autoplay = playerData.autoplay;
        return {
            'vid': videoId,
            'vl': duration ? (duration <= 60 ? '1min' : 'not1min') : 'unknown',
            'vss': customFields.videospecialslot || '',
            'autoplay': !secretAutoplay && autoplay ? 'yes' : 'no',
            'vchan': this.parseChannelSection(customFields.channelsection) || '',
            'vsec': this.parseChannelSection(customFields.channelsection2) || ''
        };
    };
    /**
     * Parse Channel/Section strings from Brightcove
     * it comes to us in the format "Leadership :channel_6"
     * @param channelSection Channel/section name
     */
    FbsVideoService.prototype.parseChannelSection = function (channelSection) {
        if (channelSection === void 0) { channelSection = ''; }
        return channelSection.split(':')[0].trim().replace(/\s/g, '');
    };
    /**
     * Initialize player
     * @return Observable that emits when player is ready
     */
    FbsVideoService.prototype.initPlayer = function (playerData) {
        return __awaiter(this, void 0, void 0, function () {
            var player, _a, _b;
            return __generator(this, function (_c) {
                switch (_c.label) {
                    case 0:
                        if (!this.bc) {
                            return [2 /*return*/, playerData];
                        }
                        if (!playerData.adsDisabled) {
                            this.getAmazonHeaderBidding(playerData);
                        }
                        try {
                            player = this.bc(playerData.id);
                            if (!playerData.adsDisabled && typeof player.ima3 === 'function') {
                                player.ima3(this.ima3Config);
                            }
                        }
                        catch (e) {
                            console.error(e);
                        }
                        _a = playerData;
                        return [4 /*yield*/, this.prepareVideo(playerData.id)];
                    case 1:
                        _a.player = _c.sent();
                        if (!!playerData.adsDisabled) return [3 /*break*/, 3];
                        _b = this;
                        return [4 /*yield*/, this.requestMnetBids()];
                    case 2:
                        _b.mnetBids = _c.sent();
                        _c.label = 3;
                    case 3: return [4 /*yield*/, this.handleVideoJsReady(playerData)];
                    case 4:
                        _c.sent();
                        return [4 /*yield*/, this.preparePlaylist(playerData.playerId)];
                    case 5:
                        _c.sent();
                        return [2 /*return*/, playerData];
                }
            });
        });
    };
    FbsVideoService.prototype.getAmazonHeaderBidding = function (playerData) {
        var _this = this;
        // Make the call to Amazon header bidding for the video ad.
        if (this.fbsAdsService) {
            this.fbsAdsService.fetchAmazonBids([{
                    slotID: playerData.amazonId,
                    mediaType: 'video'
                }]).then(function (bids) {
                _this.amazonBids[playerData.amazonId] = (bids || []).find(function (bid) {
                    return bid.slotID === playerData.amazonId;
                });
            });
        }
    };
    FbsVideoService.prototype.getMediaInformation = function (playerData) {
        if (!playerData.player) {
            return null;
        }
        return playerData.player.mediainfo;
    };
    FbsVideoService.prototype.prepareVideo = function (id) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, new Promise(function (resolve) {
                        _this.videojs(id).ready(function () {
                            resolve(this);
                        });
                    })];
            });
        });
    };
    FbsVideoService.prototype.handleVideoJsReady = function (playerData) {
        return __awaiter(this, void 0, void 0, function () {
            var mediaInfo, rect;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, new Promise(function (resolve, reject) {
                            playerData.player.catalog.getVideo(playerData.videoId, function (error, video) {
                                if (error || typeof video === 'string') {
                                    reject(error);
                                }
                                else {
                                    resolve(video);
                                }
                            });
                        })];
                    case 1:
                        mediaInfo = _a.sent();
                        rect = document.getElementById(playerData.videoElementId).getBoundingClientRect();
                        mediaInfo = this.processVideoThumbnail(mediaInfo, rect);
                        this.handleCatalogVideo(playerData, mediaInfo);
                        if (!(!playerData.adsDisabled && mediaInfo.economics === 'AD_SUPPORTED')) return [3 /*break*/, 3];
                        return [4 /*yield*/, this.setAdTargeting(playerData)];
                    case 2:
                        _a.sent();
                        _a.label = 3;
                    case 3: return [2 /*return*/, mediaInfo];
                }
            });
        });
    };
    FbsVideoService.prototype.processVideoThumbnail = function (media, rect) {
        var horizontal = rect.width > rect.height;
        var majorDimension = horizontal ? rect.width : rect.height;
        var dimension = thumbnailDimensions.find(function (dim) { return dim >= majorDimension; }) || thumbnailDimensions[thumbnailDimensions.length - 1];
        var poster = FbsVideoService.prependFastly(media.poster, false);
        var thumbnail = FbsVideoService.prependFastly(media.thumbnail, false);
        if (horizontal) {
            poster += "&width=" + dimension;
            thumbnail += "&width=" + dimension;
        }
        else {
            poster += "&height=" + dimension;
            thumbnail += "&height=" + dimension;
        }
        // Returning new media object instead of modyfying existing
        return __assign({}, media, { poster: poster,
            thumbnail: thumbnail });
    };
    FbsVideoService.prototype.handleCatalogVideo = function (playerData, video) {
        playerData.player.catalog.load(video);
        // select_rendition === 'closest' - use rendition closest to player size
        // select_rendition === 'max' - use rendition closest to screen size
        // select_rendition =~ 'WxH' - use rendition closest to given Width and Height
        // select_rendition is missing - use Brightcove defaults
        if (playerData.renditionSelection) {
            playerData.mediainfo = null;
            switch (playerData.renditionSelection) {
                case 'closest':
                    var playerElement = document.getElementById(playerData.id);
                    playerData.mediainfo = this.selectRendition(playerData, playerElement.offsetWidth, playerElement.offsetHeight);
                    break;
                case 'max':
                    playerData.mediainfo = this.selectRendition(playerData, screen.width, screen.height);
                    break;
                default:
                    var match = playerData.renditionSelection.match(/(\d+)x(\d+)/i);
                    if (match) {
                        playerData.mediainfo = this.selectRendition(playerData, Number(match[1]), Number(match[2]));
                    }
                    break;
            }
        }
        if (playerData.mediainfo) {
            playerData.player.src({
                type: 'video/mp4',
                src: playerData.mediainfo.src
            });
        }
        return playerData;
    };
    /**
     *
     * Rendition selection
     *
     * @method selectRendition
     * @param {string} unique player div id
     * @param {int} target player width
     * @param {int} target player height
     * @return {Object} structure with selected renditions dimensions and source
     *
     */
    FbsVideoService.prototype.selectRendition = function (playerData, width, height) {
        // Pythagorean to turn height and width into a single numeric score
        var diagonal = Math.pow(width, 2) + Math.pow(height, 2);
        var minDistance = Number.MAX_VALUE;
        var candidate;
        this.playerData.get(playerData.id).player.mediainfo.sources.forEach(function (source) {
            if (source.container === 'MP4' && source.width && source.height && source.src) {
                // Pythagorean score difference
                var distance = source.width * source.width + source.height * source.height - diagonal;
                // Downscaling is better than upscaling but we will upscale if we have to
                //  - anything is better than nothing
                //  - positive distance (downscale) is better than any negative distance (upscale)
                //  - do not consider negative distance (upscale) when you've seen positive distance (downscale)
                if (!candidate ||
                    (minDistance < 0 && distance >= 0) ||
                    ((minDistance < 0 || (minDistance >= 0 && distance >= 0)) && (Math.abs(distance) < Math.abs(minDistance)))) {
                    candidate = source;
                    minDistance = distance;
                }
            }
        });
        return candidate;
    };
    /**
     * Dispose of player related data structures
     */
    FbsVideoService.prototype.dispose = function (playerData) {
        if (playerData) {
            this.playerData.delete(playerData.id);
            if (playerData.player && playerData.player.dispose) {
                playerData.player.dispose();
            }
        }
    };
    /**
     * Set the video details in the notification for currently playing video
     */
    FbsVideoService.prototype.setMediaSessionDetails = function (playerData) {
        if ('mediaSession' in navigator) {
            var mediainfo = this.getMediaInformation(playerData);
            navigator.mediaSession.metadata = new MediaMetadata({
                title: mediainfo.name,
                artist: 'Forbes Media',
                album: 'Forbes.com',
                artwork: [
                    { src: mediainfo.thumbnail }
                ]
            });
        }
    };
    /**
     * Set video player breakpoints
     */
    FbsVideoService.prototype.setPlayerBreakpoints = function (playerData) {
        var player = this.videojs(playerData.id);
        player.player_.breakpoints_ = { huge: Infinity, xlarge: 2560, large: 1440, medium: 768, small: 425, xsmall: 0, tiny: 0 };
    };
    FbsVideoService.fastlyVirtualPathMapping = {
        'specials-images.forbes.com': 'specials-images',
        'specials-images-staging.forbes.com': 'specials-images-staging',
        'specials-images.forbesimg.com': 'specials-images',
        'specials-images-staging.forbesimg.com': 'specials-images-staging',
        'damapi-stagevip.forbes.com': 'damapi-stagevip',
        'staging.damapi.forbes.com': 'staging-damapi',
        'blogs-stage.forbes.com': 'blogs-stage',
        'i.forbesimg.com': 'i-forbesimg',
        'images.forbes.com': 'images-forbes',
        'b-i.forbesimg.com': 'b-i-forbesimg',
        'blogs-images.forbes.com': 'blogs-images',
        'www-staging.forbes.com': 'www-staging',
        'forbes.com/dam': 'dam',
        'www.forbes.com/dam': 'dam',
        'cf-images.us-east-1.prod.boltdns.net': 'cf-images'
    };
    return FbsVideoService;
}());
export { FbsVideoService };
//# sourceMappingURL=fbs-video.service.js.map