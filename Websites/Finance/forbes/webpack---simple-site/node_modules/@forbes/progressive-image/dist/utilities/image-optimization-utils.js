/* tslint:disable:radix */
var ImageOptimizationUtils = /** @class */ (function () {
    function ImageOptimizationUtils() {
    }
    /**
     * @param {String} link Original link
     * @returns {Boolean} is image supposed to be cropped or not
     */
    ImageOptimizationUtils.isCroppedImage = function (link) {
        return link.includes('cropX1') && link.includes('cropX2') && link.includes('cropY1') && link.includes('cropY2');
    };
    /**
     * @param {String} link Original link
     * @returns {String} crop parameters for Fastly API
     */
    ImageOptimizationUtils.getFastlyCrop = function (link) {
        var cropTopX = this.getParameterByName('cropX1', link);
        var cropBottomX = this.getParameterByName('cropX2', link);
        var cropTopY = this.getParameterByName('cropY1', link);
        var cropBottomY = this.getParameterByName('cropY2', link);
        var cropSizeX = parseInt(cropBottomX) - parseInt(cropTopX);
        var cropSizeY = parseInt(cropBottomY) - parseInt(cropTopY);
        return "crop=" + cropSizeX + "," + cropSizeY + ",x" + cropTopX + ",y" + cropTopY + ",safe";
    };
    /**
     * @param {String} link Original link
     * @returns {String} image link with 0x0 height/width
     */
    ImageOptimizationUtils.getOriginalImage = function (link) {
        var splitLink = link.split('/');
        splitLink[splitLink.length - 1] = splitLink[splitLink.length - 1].replace(/[0-9]+x[0-9]+/, '0x0');
        return splitLink.join('/');
    };
    /**
     * @param {String} link Original link
     * @returns {Boolean}  link type if png or not
     */
    ImageOptimizationUtils.isImagePNG = function (link) {
        if (link === void 0) { link = ''; }
        return /(\.png)($|\?)/.test(link);
    };
    /**
     * @param {String} link Original link
     * @returns {Boolean}  link type if gif or not
     */
    ImageOptimizationUtils.isImageGIF = function (link) {
        if (link === void 0) { link = ''; }
        return /(\.gif)($|\?)/.test(link);
    };
    /**
     * Make urls https
     * @param url
     *
     * @returns string
    **/
    ImageOptimizationUtils.httpsUrl = function (url) {
        return (url || '').replace(/^http:/, 'https:');
    };
    /**
     * Prepend relative images with blogs-images
     * @param url
     * @param isStaging
     *
     * @returns string
    **/
    ImageOptimizationUtils.normalizeImageDomain = function (url, isStaging) {
        var fullUrl;
        url = url || '';
        if (url.startsWith('//')) {
            fullUrl = "https:" + url;
        }
        else if (url.startsWith('/')) {
            fullUrl = "https://" + (isStaging ? 'damapi-stagevip.forbes.com' : 'blogs-images.forbes.com') + url;
        }
        else {
            fullUrl = ImageOptimizationUtils.httpsUrl(url);
        }
        return fullUrl;
    };
    /**
     * Gets Fastly virtual path based on provided url
     * @param url
     *
     * @returns string[] | undefined
     **/
    ImageOptimizationUtils.getFastlyVirtualPath = function (url) {
        var cleanUrl = url.replace(/^https?:\/\//, '');
        for (var key in this.fastlyVirtualPathMapping) {
            if (cleanUrl.startsWith(key)) {
                return [key, this.fastlyVirtualPathMapping[key]];
            }
        }
        return undefined;
    };
    ImageOptimizationUtils.getParameterByName = function (name, url) {
        if (url === void 0) { url = window.location.href; }
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'), results = regex.exec(url);
        if (!results) {
            return null;
        }
        if (!results[2]) {
            return '';
        }
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    };
    ImageOptimizationUtils.updateQueryStringParameter = function (uri, key, value) {
        var re = new RegExp('([?&])' + key + '=.*?(&|$)', 'i');
        var separator = uri.indexOf('?') !== -1 ? '&' : '?';
        if (uri.match(re)) {
            return uri.replace(re, '$1' + key + '=' + value + '$2');
        }
        else {
            return uri + separator + key + '=' + value;
        }
    };
    ImageOptimizationUtils.adjustExistingFastlyUrl = function (url, factor) {
        var adjustedUrl = url;
        var width = this.getParameterByName('width', url);
        if (width !== null) {
            var newWidth = parseInt(width) * factor;
            adjustedUrl = this.updateQueryStringParameter(adjustedUrl, 'width', newWidth);
        }
        var height = this.getParameterByName('height', url);
        if (height !== null) {
            var newHeight = parseInt(height) * factor;
            adjustedUrl = this.updateQueryStringParameter(adjustedUrl, 'height', newHeight);
        }
        return adjustedUrl;
    };
    /**
     * Prepend image urls with imageio (Fastly) path
     * @param url
     * @param width
     * @param factor
     * @param isStaging
     * @param fastlyOptimize
     *
     * @returns string
     **/
    ImageOptimizationUtils.prependFastly = function (url, width, factor, isStaging, fastlyOptimize) {
        if (url === void 0) { url = ''; }
        if (fastlyOptimize === void 0) { fastlyOptimize = false; }
        if ((url || '').indexOf('imageio') > -1) {
            return this.adjustExistingFastlyUrl(url, factor);
        }
        if ((url || '').indexOf('gravatar') > -1) {
            return url;
        }
        var isCropped = this.isCroppedImage(url);
        var normalizedUrl = this.normalizeImageDomain(url, isStaging);
        if (!this.isOnImageOptimizationWhitelist(normalizedUrl, isStaging)) {
            return normalizedUrl;
        }
        if (!this.getFastlyVirtualPath(normalizedUrl)) {
            return url;
        }
        var _a = this.getFastlyVirtualPath(normalizedUrl), host = _a[0], virtualPath = _a[1];
        var uriPart = normalizedUrl.replace("https://" + host + "/", '');
        if (uriPart.includes('?')) {
            // we need to remove query parameters because fastly receives its own parameters in url
            uriPart = uriPart.split('?')[0];
        }
        var fastlyUrl = isStaging ? 'imageio-staging.forbes.com' : 'imageio.forbes.com';
        var format = this.isImagePNG(normalizedUrl) ? 'png' : this.isImageGIF(normalizedUrl) ? 'gif' : 'jpg';
        var fullUrl = "https://" + fastlyUrl + "/" + virtualPath + "/" + uriPart + "?format=" + format;
        if (isCropped) {
            var fastlyCropParams = this.getFastlyCrop(url);
            fullUrl += "&" + fastlyCropParams;
            fullUrl = this.getOriginalImage(fullUrl);
        }
        if (width) {
            if (factor !== 1 && fastlyOptimize) {
                fullUrl += "&" + this.fastlyLowQualityParams;
                factor = 1;
            }
            fullUrl += "&width=" + width * factor;
        }
        return fullUrl;
    };
    /**
     * isOnImageOptimizationWhitelist
     * checks to see if an image is permitted to pass through our image optimization server
     *
     * @param url
     * @param isStaging
     * @returns boolean
    **/
    ImageOptimizationUtils.isOnImageOptimizationWhitelist = function (url, isStaging) {
        return !!(isStaging ? this.stagingImageOptimizationWhitelist :
            this.imageOptimizationWhitelist).find(function (imageUrl) { return url.indexOf(imageUrl) > -1; });
    };
    ImageOptimizationUtils.fastlyQuality = 5;
    ImageOptimizationUtils.fastlyBlur = 10;
    ImageOptimizationUtils.fastlyLowQualityParams = "quality=" + ImageOptimizationUtils.fastlyQuality + "&blur=" + ImageOptimizationUtils.fastlyBlur + "\n\t&auto=webp&optimize=high";
    ImageOptimizationUtils.imageOptimizationWhitelist = [
        'specials-images.forbes.com',
        'specials-images.forbesimg.com',
        'i.forbesimg.com',
        'b-i.forbesimg.com',
        'images.forbes.com',
        'blogs-images.forbes.com'
    ];
    ImageOptimizationUtils.stagingImageOptimizationWhitelist = [
        'damapi-stagevip.forbes.com',
    ];
    ImageOptimizationUtils.fastlyVirtualPathMapping = {
        'specials-images.forbes.com': 'specials-images',
        'specials-images-staging.forbes.com': 'specials-images-staging',
        'specials-images.forbesimg.com': 'specials-images',
        'specials-images-staging.forbesimg.com': 'specials-images-staging',
        'damapi-stagevip.forbes.com': 'damapi-stagevip',
        'staging.damapi.forbes.com': 'staging-damapi',
        'blogs-stage.forbes.com': 'blogs-stage',
        'i.forbesimg.com': 'i-forbesimg',
        'images.forbes.com': 'images-forbes',
        'b-i.forbesimg.com': 'b-i-forbesimg',
        'blogs-images.forbes.com': 'blogs-images',
        'www-staging.forbes.com': 'www-staging',
        'forbes.com/dam': 'dam',
        'www.forbes.com/dam': 'dam',
        'cf-images.us-east-1.prod.boltdns.net': 'cf-images'
    };
    return ImageOptimizationUtils;
}());
export { ImageOptimizationUtils };
//# sourceMappingURL=image-optimization-utils.js.map