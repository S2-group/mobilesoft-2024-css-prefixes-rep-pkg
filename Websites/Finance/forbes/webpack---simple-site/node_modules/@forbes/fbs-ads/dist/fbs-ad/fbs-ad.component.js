var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { PerformanceUtilities as Performance } from '../utils/performance.utilities';
var FbsAd = /** @class */ (function (_super) {
    __extends(FbsAd, _super);
    function FbsAd() {
        var _this_1 = _super !== null && _super.apply(this, arguments) || this;
        /**
         * This is a reference to the ad service on the page.
         */
        _this_1.adsService = window['fbsads'];
        /**
         * Save reference to event listeners so they can be properly cleaned up later
         */
        _this_1.renderEventListener = _this_1.handleRender.bind(_this_1);
        _this_1.viewableEventListener = _this_1.handleViewable.bind(_this_1);
        return _this_1;
    }
    Object.defineProperty(FbsAd, "observedAttributes", {
        /**
         * Attributes which fire attributeChangedCallback
         */
        get: function () {
            return [
                'batched',
                'position',
                'ad-id',
                'custom-targeting',
                'fire-render-on-refresh'
            ];
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "adId", {
        /**
         * This is the id of the div which contains the ad.
         */
        get: function () {
            return this.getAttribute('ad-id');
        },
        set: function (adId) {
            if (!adId) {
                return;
            }
            this.setAttribute('ad-id', adId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "recalledId", {
        /**
         * This is the id for a recalled ad
         */
        get: function () {
            return this.getAttribute('data-ga-id') || '';
        },
        set: function (recalledId) {
            if (!recalledId) {
                return;
            }
            this.setAttribute('data-ga-id', recalledId);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "position", {
        /**
         * This is the position of the ad.
         */
        get: function () {
            return this.getAttribute('position');
        },
        set: function (position) {
            if (!position) {
                return;
            }
            this.setAttribute('position', position);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "customTargeting", {
        /**
         * Custom targeting parameters. should be a comma separated list of the form:
         * 'key1:value1,key2:value2,key3:value3'
         */
        get: function () {
            return this.getAttribute('custom-targeting');
        },
        set: function (targeting) {
            if (!targeting) {
                return;
            }
            this.setAttribute('custom-targeting', targeting);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "progressive", {
        /**
         * Setting this will not display the ad at first.
         * You must call .display() to show it.
         */
        get: function () {
            return this.hasAttribute('progressive') && this.getAttribute('progressive') !== 'false';
        },
        set: function (progressive) {
            if (progressive) {
                this.setAttribute('progressive', '');
            }
            else {
                this.removeAttribute('progressive');
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "batched", {
        /**
         * Setting this will not display the ad at first.
         * You must call .display() to show it.
         */
        get: function () {
            return this.hasAttribute('batched') && this.getAttribute('batched') !== 'false';
        },
        set: function (batched) {
            if (batched) {
                this.setAttribute('batched', '');
            }
            else {
                this.removeAttribute('batched');
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "hideEmpty", {
        /**
         * This will default the ad to display: none
         * And only display the ad if it doesn't return empty
         */
        get: function () {
            return this.hasAttribute('hide-empty') && this.getAttribute('hide-empty') !== 'false';
        },
        set: function (progressive) {
            if (progressive) {
                this.setAttribute('hide-empty', '');
            }
            else {
                this.removeAttribute('hide-empty');
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "empty", {
        /**
         * Tells if the ad came back empty or not
         */
        get: function () {
            return this.currentSlotInfo && (this.currentSlotInfo.isEmpty || this.currentSlotInfo.size[0] < 10);
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "displayCalled", {
        /**
         * Get the displayCalled property on the ad
         */
        get: function () {
            return this.hasAttribute('display-called');
        },
        /**
         * Manually sets the displayCalled property on the ad.
         */
        set: function (displayCalled) {
            if (displayCalled) {
                this.setAttribute('display-called', '');
            }
            else {
                this.removeAttribute('display-called');
            }
        },
        enumerable: false,
        configurable: true
    });
    Object.defineProperty(FbsAd.prototype, "attrsSnapshot", {
        get: function () {
            return {
                batched: this.batched,
                position: this.position,
                adId: this.adId
            };
        },
        enumerable: false,
        configurable: true
    });
    /**
     * This displays the ad.
     */
    FbsAd.prototype.display = function () {
        if (this.div) {
            this.adsService.display(this.div.id);
            this.displayCalled = true;
        }
    };
    /**
     * This refreshes the ad.
     */
    FbsAd.prototype.refresh = function () {
        this.adsService.refresh(this.div.id);
    };
    /**
     * This recalls previously destroyed ads by reinitializing them
     */
    FbsAd.prototype.recallAd = function () {
        this.connectedCallback();
    };
    /**
     * This creates the ad position
     */
    FbsAd.prototype.create = function () {
        this.adsService.createSlot(this.position, this.adId, this.customTargeting, this.recalledId);
        this.insert();
    };
    /**
     * Gets the current slot level targetted value of the key
     */
    FbsAd.prototype.getTargeting = function (key) {
        return this.currentSlotInfo.slot.getTargeting(key);
    };
    /**
     * Gets all of the current slot level targetting values
     */
    FbsAd.prototype.getSlotTargeting = function () {
        var _this_1 = this;
        return this.currentSlotInfo.slot.getTargetingKeys().reduce(function (targeting, key) {
            targeting[key] = _this_1.getTargeting(key);
            return targeting;
        }, {});
    };
    /**
     * Handle position render event
     * @param renderEvent Custom event with render event data
     */
    FbsAd.prototype.handleRender = function (renderEvent) {
        var event = renderEvent.detail;
        if (!this.div || this.div.id !== event.slot.getSlotElementId()) {
            return;
        }
        // TODO: PROD-2526: Refactor ad labeling styles into the fbs-ads package
        // Add "show-label" class if ad size does not return a 1x1
        if (event.size && event.size[0] !== 1 && event.size[1] !== 1) {
            this.div.classList.add('show-label');
        }
        var customEvent = new CustomEvent('render', {
            detail: event
        });
        this.currentSlotInfo = event;
        Performance.mark("Rendered " + event.slot.getSlotElementId());
        if (this.hideEmpty && !this.empty) {
            this.style.display = ''; // This brings back the original display
        }
        if (!this.getAttribute('fire-render-on-refresh')) {
            document.removeEventListener('fbs-ad-render', this.renderEventListener);
        }
        this.dispatchEvent(customEvent);
    };
    /**
     * This listens to the render of the position.
     */
    FbsAd.prototype.listenToRender = function () {
        document.addEventListener('fbs-ad-render', this.renderEventListener);
    };
    FbsAd.prototype.handleViewable = function (viewableEvent) {
        var event = viewableEvent.detail;
        if (!this.div || (this.div.id || this.getDivId()) !== event.slot.getSlotElementId()) {
            return;
        }
        var customEvent = new CustomEvent('viewable', {
            detail: event
        });
        Performance.mark("Viewable " + event.slot.getSlotElementId());
        this.dispatchEvent(customEvent);
    };
    /**
     * This emits an event when the ad becomes viewable.
     */
    FbsAd.prototype.listenToViewable = function () {
        document.addEventListener('fbs-ad-viewable', this.viewableEventListener);
    };
    /**
     * This inserts the div into the DOM.
     */
    FbsAd.prototype.insert = function () {
        if (!this.position) {
            return;
        }
        var id = this.recalledId ? this.recalledId : this.getDivId();
        var existing = document.getElementById(id);
        if (existing) {
            console.warn(this, 'was removed because an element', existing, "with the id " + id + " already exists");
            return;
        }
        if (this.div) {
            this.div.id = id;
            return;
        }
        this.div = document.createElement('div');
        this.div.id = id;
        if (this.hideEmpty) {
            this.style.display = 'none'; // Hide the ad for now
        }
        this.appendChild(this.div);
        this.addAccessibilityAttributes();
        if (this.position === 'hero') {
            this.hideHero();
        }
    };
    FbsAd.prototype.getDivId = function () {
        return this.adsService.getDivId(this.position, this.adId);
    };
    /**
     * Hide hero ad from screen readers
     */
    FbsAd.prototype.hideHero = function () {
        var _this = this.parentNode;
        var observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                var heroAd = _this.querySelector('.fto');
                if (heroAd) {
                    var activeElements = Array.from(heroAd.querySelectorAll('button ,a'));
                    activeElements.forEach(function (element) {
                        element.setAttribute('tabindex', '-1');
                        element.setAttribute('aria-hidden', 'true');
                    });
                }
            });
        });
        observer.observe(_this, {
            attributes: false,
            childList: true,
            characterData: false
        });
    };
    /**
     * Add Accessibility attributes
     */
    FbsAd.prototype.addAccessibilityAttributes = function () {
        var _this_1 = this;
        var observer = new MutationObserver(function (mutations) {
            mutations.forEach(function (mutation) {
                if (!_this_1.div) {
                    return;
                }
                if (_this_1.div.getAttribute('aria-hidden') !== 'true') {
                    _this_1.div.setAttribute('aria-hidden', 'true');
                }
                var adIframe = _this_1.div.querySelector('iframe');
                if (adIframe && !adIframe.hasAttribute('aria-hidden')) {
                    adIframe.setAttribute('tabindex', '-1');
                    adIframe.setAttribute('aria-hidden', 'true');
                    adIframe.setAttribute('title', 'Ad content');
                }
            });
        });
        observer.observe(this.div, {
            attributes: true,
            characterData: false,
            childList: true
        });
    };
    /**
     * This destroys the ad and div
     */
    FbsAd.prototype.destroyAd = function () {
        document.removeEventListener('fbs-ad-viewable', this.viewableEventListener);
        this.dispatchEvent(new CustomEvent('destroyed'));
        if (this.div) {
            this.adsService.destroySlots(this.div.id);
            this.div.remove();
            delete this.div;
        }
        this.displayCalled = false;
    };
    /**
     * This initializes the ad
     */
    FbsAd.prototype.initializeAd = function () {
        var _this_1 = this;
        this.listenToRender();
        this.listenToViewable();
        var interval = setInterval(function () {
            if (!_this_1.attrsSnapshot.position) {
                return;
            }
            _this_1.create();
            if (!_this_1.batched && !_this_1.progressive && !_this_1.displayCalled) {
                _this_1.display();
            }
            else {
                _this_1.dispatchEvent(new CustomEvent('bootstrapped'));
            }
            clearInterval(interval);
        }, 10);
    };
    /**
     * This is a standard Custom Element Lifecycle hook for when the element is attached to the DOM
     */
    FbsAd.prototype.connectedCallback = function () {
        this.initializeAd();
    };
    /**
     * This is a standard Custom Element lifecycle hook for when the element is removed from the DOM.
     */
    FbsAd.prototype.disconnectedCallback = function () {
        this.destroyAd();
    };
    return FbsAd;
}(HTMLElement));
export { FbsAd };
//# sourceMappingURL=fbs-ad.component.js.map