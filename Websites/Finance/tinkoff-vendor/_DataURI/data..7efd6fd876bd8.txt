(function t(){"undefined"==typeof globalThis&&(window.globalThis=window);const e=globalThis.document,t=e=>globalThis.dispatchEvent(e),n=globalThis.CustomEvent,r=globalThis.FileReader,a=globalThis.Blob,o={family:"font-family",style:"font-style",weight:"font-weight",stretch:"font-stretch",unicodeRange:"unicode-range",variant:"font-variant",featureSettings:"font-feature-settings"};if(globalThis.FontFace){const r=globalThis.FontFace;globalThis.FontFace=function(){return s(...arguments).then((e=>t(new n("single-file-new-font-face",{detail:e})))),new r(...arguments)},globalThis.FontFace.toString=function(){return"function FontFace() { [native code] }"},globalThis.FontFace.prototype=r.prototype;const a=e.fonts.delete;e.fonts.delete=function(r){return s(r.family).then((e=>t(new n("single-file-delete-font",{detail:e})))),a.call(e.fonts,r)},e.fonts.delete.toString=function(){return"function delete() { [native code] }"};const o=e.fonts.clear;e.fonts.clear=function(){return t(new n("single-file-clear-fonts")),o.call(e.fonts)},e.fonts.clear.toString=function(){return"function clear() { [native code] }"}}async function s(e,t,n){const s={};return s["font-family"]=e,s.src=t,n&&Object.keys(n).forEach((e=>{o[e]&&(s[o[e]]=n[e])})),new Promise((e=>{if(s.src instanceof ArrayBuffer){const t=new r;t.readAsDataURL(new a([s.src])),t.addEventListener("load",(()=>{s.src="url("+t.result+")",e(s)}))}else e(s)}))}})()