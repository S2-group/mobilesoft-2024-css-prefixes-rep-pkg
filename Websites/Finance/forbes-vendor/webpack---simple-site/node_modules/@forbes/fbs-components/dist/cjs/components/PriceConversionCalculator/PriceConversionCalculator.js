'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../_virtual/_tslib.js');
var React = require('react');
var index$1 = require('../../node_modules/classnames/index.js');
var index = require('../../shared/components/ShowIf/index.js');
var tracking = require('../../shared/utilities/tracking.js');
var Textfield = require('../FormElements/Textfield/Textfield.js');
var PriceConversionCalculator$1 = require('./PriceConversionCalculator.scss.js');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e : { 'default': e }; }

var React__default = /*#__PURE__*/_interopDefaultLegacy(React);

function PriceConversionCalculator(_a) {
    var className = _a.className, firstField = _a.firstField, title = _a.title, secondField = _a.secondField, trackingProps = _a.trackingProps, _ref = _a._ref, restProps = _tslib.__rest(_a, ["className", "firstField", "title", "secondField", "trackingProps", "_ref"]);
    var coinPrice = firstField.price;
    var _b = React.useState(secondField.formattedPrice), firstFieldValue = _b[0], setFirstFieldValue = _b[1];
    var _c = React.useState(firstField.formattedPrice), secondFieldValue = _c[0], setSecondFieldValue = _c[1];
    var changeFirstFieldValue = function (event) {
        setFirstFieldValue(event.target.value);
        if (firstField.formatter instanceof Function) {
            setSecondFieldValue(+(event.target.value * coinPrice).toFixed(firstField.formatter(event.target.value * coinPrice)));
        }
        else if (!firstField.formatter) {
            setSecondFieldValue(event.target.value * coinPrice);
        }
        else {
            setSecondFieldValue(+(event.target.value * coinPrice).toFixed(firstField.formatter));
        }
    };
    var changeSecondFieldValue = function (event) {
        setSecondFieldValue(event.target.value);
        if (secondField.formatter instanceof Function) {
            setFirstFieldValue(+(event.target.value * coinPrice).toFixed(secondField.formatter(event.target.value / coinPrice)));
        }
        else if (!secondField.formatter) {
            setFirstFieldValue(event.target.value / coinPrice);
        }
        else {
            setFirstFieldValue(+(event.target.value / coinPrice).toFixed(secondField.formatter));
        }
    };
    var firstInputProps = {
        type: 'number',
        maxLength: 20,
        value: firstFieldValue,
        inputMode: 'decimal',
        onChange: changeFirstFieldValue,
        placeholder: "".concat(firstField.title, " price"),
        step: 'any',
        onClick: function (event) {
            event.target.select();
            tracking.trackingHandler(trackingProps, trackingProps === null || trackingProps === void 0 ? void 0 : trackingProps.firstField);
        },
    };
    var firstTextfieldProps = {
        size: Textfield.Sizes.large,
        inputProps: firstInputProps,
        iconTitle: firstField.title,
        className: PriceConversionCalculator$1["default"].priceInput,
        icon: firstField.imgUrl && (React__default["default"].createElement("img", { src: firstField.imgUrl, alt: firstField.altText })),
    };
    var secondInputProps = {
        type: 'number',
        maxLength: 20,
        value: secondFieldValue,
        inputMode: 'decimal',
        onChange: changeSecondFieldValue,
        placeholder: "".concat(secondField.title, " price"),
        step: 'any',
        onClick: function (event) {
            event.target.select();
            tracking.trackingHandler(trackingProps, trackingProps === null || trackingProps === void 0 ? void 0 : trackingProps.secondField);
        },
    };
    var secondTextfieldProps = {
        size: Textfield.Sizes.large,
        inputProps: secondInputProps,
        iconTitle: secondField.title,
        className: PriceConversionCalculator$1["default"].priceInput,
        icon: secondField.imgUrl && (React__default["default"].createElement("img", { src: secondField.imgUrl, alt: secondField.altText })),
    };
    return (React__default["default"].createElement(React__default["default"].Fragment, null,
        React__default["default"].createElement(index["default"], { condition: !!title },
            React__default["default"].createElement("div", { className: PriceConversionCalculator$1["default"].calculatorTitle }, title)),
        React__default["default"].createElement("div", _tslib.__assign({ className: index$1["default"](PriceConversionCalculator$1["default"].calculatorContainer, className), ref: _ref }, restProps),
            React__default["default"].createElement(Textfield["default"], _tslib.__assign({}, firstTextfieldProps)),
            React__default["default"].createElement("div", { role: "presentation", className: PriceConversionCalculator$1["default"].approximatelyEqualWrap, "data-testid": "approximatelyEqual", onClick: function () {
                    var label = "ConversionCalcTransferApproxEqualDeadClick".concat(title === null || title === void 0 ? void 0 : title.substring(0, title.indexOf('(') - 1));
                    tracking.trackingHandler(trackingProps, label);
                } },
                React__default["default"].createElement("span", { className: PriceConversionCalculator$1["default"].approximatelyEqualSign }, "\u2248")),
            React__default["default"].createElement(Textfield["default"], _tslib.__assign({}, secondTextfieldProps)))));
}

exports["default"] = PriceConversionCalculator;
//# sourceMappingURL=PriceConversionCalculator.js.map
