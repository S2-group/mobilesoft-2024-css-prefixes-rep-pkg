'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _tslib = require('../../../_virtual/_tslib.js');
var React = require('react');
var constants = require('./constants.js');
var DimensionsProvider = require('../contexts/DimensionsProvider.js');
var helpers = require('./helpers.js');

var useDimensionsTrackerWithContext = function (elemsToTrack, skip) {
    var _a = React.useState({}), dimensions = _a[0], setDimensions = _a[1];
    React.useEffect(function () {
        if (skip)
            return;
        var handleDimensionsChanged = function (event) {
            if (!helpers.getShouldSetDimensions(elemsToTrack, event)) {
                return;
            }
            setDimensions(function (prevDimensions) {
                return _tslib.__assign(_tslib.__assign({}, prevDimensions), event.detail);
            });
        };
        document.addEventListener(constants.DIMENSIONS_CHANGED_EVENT, handleDimensionsChanged);
        // eslint-disable-next-line consistent-return
        return function () {
            document.removeEventListener(constants.DIMENSIONS_CHANGED_EVENT, handleDimensionsChanged);
        };
    }, [elemsToTrack, setDimensions, skip]);
    return dimensions;
};
function useDimensionsTracker(elemsToTrack) {
    var _a = DimensionsProvider.useDimensionsContext(), dimensions = _a.dimensions, usesContext = _a.usesContext;
    // Hooks are not allowed to be in a if or ternary statement, so we have to call
    // it here, then choose which payload to respond with. If you refactor this
    // keep that in mind so we don't get the linting error
    var results = useDimensionsTrackerWithContext(elemsToTrack, usesContext);
    if (usesContext) {
        return dimensions;
    }
    return results;
}

exports["default"] = useDimensionsTracker;
//# sourceMappingURL=useDimensionsTracker.js.map
