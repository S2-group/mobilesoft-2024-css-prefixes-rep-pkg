import { __rest, __assign } from '../../_virtual/_tslib.js';
import React__default, { useEffect, useState } from 'react';
import classnames from '../../node_modules/classnames/index.js';
import SvgHamburger from '../../node_modules/@forbes/fbs-icons/dist/svg/hamburger.svg.js';
import SvgClose from '../../node_modules/@forbes/fbs-icons/dist/svg/close.svg.js';
import ChannelMenu from './ChannelMenu.js';
import styles from './GlobalHeaderMenu.scss.js';

function GlobalHeaderMenu(_a) {
    var menuConfig = _a.menuConfig, _b = _a.shiftBodyOnMenuClick, shiftBodyOnMenuClick = _b === void 0 ? true : _b, isNavMenuOpen = _a.isNavMenuOpen, setIsNavMenuOpen = _a.setIsNavMenuOpen, className = _a.className, newsLetterSubscribeTrackingProps = _a.newsLetterSubscribeTrackingProps, showNewslettersSubscribeUI = _a.showNewslettersSubscribeUI, restProps = __rest(_a, ["menuConfig", "shiftBodyOnMenuClick", "isNavMenuOpen", "setIsNavMenuOpen", "className", "newsLetterSubscribeTrackingProps", "showNewslettersSubscribeUI"]);
    useEffect(function () {
        // eslint-disable-next-line prefer-destructuring
        var body = document.body;
        var header = document.querySelector('header');
        var scrollbarWidth = window.innerWidth - document.body.clientWidth;
        if (!body)
            return;
        if (isNavMenuOpen) {
            body.classList.add('noScroll');
            if (shiftBodyOnMenuClick) {
                body.style.paddingRight = "".concat(scrollbarWidth, "px");
                if (header) {
                    // header is fixed, so body padding won't affect it
                    header.style.width = "calc(100% - ".concat(scrollbarWidth, "px)");
                }
            }
            return;
        }
        body.classList.remove('noScroll');
        if (shiftBodyOnMenuClick) {
            body.style.removeProperty('padding-right');
            if (header) {
                header.style.removeProperty('width');
            }
        }
    }, [isNavMenuOpen, shiftBodyOnMenuClick]);
    var _c = useState(false), isTransitioning = _c[0], setIsTransitioning = _c[1];
    var shouldRenderMenu = isNavMenuOpen || isTransitioning;
    var handleMenuToggle = function () {
        setIsTransitioning(true);
        setIsNavMenuOpen(function (prevOpen) { return !prevOpen; });
    };
    return (React__default.createElement("div", __assign({ className: classnames(styles.hamburgerMenu, styles.hamburgerMenuMobile, className) }, restProps),
        React__default.createElement("div", { role: "button", tabIndex: 0, onClick: handleMenuToggle, className: styles.hamburgerMenuTrigger, "aria-label": isNavMenuOpen ? 'Close Navigation Menu' : 'Open Navigation Menu' }, !isNavMenuOpen ? React__default.createElement(SvgHamburger, null) : React__default.createElement(SvgClose, null)),
        shouldRenderMenu && (React__default.createElement(ChannelMenu, { onAnimationEnd: function () { return setIsTransitioning(false); }, isOpen: isNavMenuOpen, newsLetterSubscribeTrackingProps: newsLetterSubscribeTrackingProps, showNewslettersSubscribeUI: showNewslettersSubscribeUI }, menuConfig))));
}

export { GlobalHeaderMenu as default };
//# sourceMappingURL=GlobalHeaderMenu.js.map
