'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var React = require('react');
require('react-is');
require('../../RegisterElementDimensions/contexts/DimensionsProvider.js');
var useDimensionsTracker = require('../../RegisterElementDimensions/hooks/useDimensionsTracker.js');

var getViewportWidth = function () {
    if (typeof window === 'undefined')
        return 0; // SSR
    return Math.max(document.documentElement.clientWidth || 0, window.innerWidth || 0);
};
var useSubNavItemReposition = function (_a) {
    var isOpen = _a.isOpen;
    var _b = React.useState('auto'), offsetRight = _b[0], setOffsetRight = _b[1];
    var _c = React.useState(0), offsetTop = _c[0], setOffsetTop = _c[1];
    var subNavMenuRef = React.useRef(null);
    var subnavDimensions = useDimensionsTracker["default"](['subnavDimensions']).subnavDimensions;
    React.useLayoutEffect(function () {
        var _a;
        var right = (((_a = subNavMenuRef === null || subNavMenuRef === void 0 ? void 0 : subNavMenuRef.current) === null || _a === void 0 ? void 0 : _a.getBoundingClientRect()) || {
            right: 10,
        }).right;
        var newOffsetRight = right > getViewportWidth() ? 0 : 'auto';
        setOffsetRight(isOpen ? newOffsetRight : 'auto');
        if (subnavDimensions) {
            setOffsetTop(subnavDimensions.height - 2);
        }
    }, [isOpen, subNavMenuRef, subnavDimensions]);
    return {
        offsetRight: offsetRight,
        offsetTop: offsetTop,
        subNavMenuRef: subNavMenuRef,
    };
};

exports.useSubNavItemReposition = useSubNavItemReposition;
//# sourceMappingURL=useSubNavItemReposition.js.map
