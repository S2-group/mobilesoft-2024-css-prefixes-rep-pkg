var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/* tslint:disable:radix */
import { throttle } from '../utilities/utilities';
import { ImageOptimizationUtils } from '../utilities/image-optimization-utils';
var LOW_RES_PERCENTAGE = 0.1;
var LOW_RES = 'low';
var HIGH_RES = 'high';
var ProgressiveImage = /** @class */ (function (_super) {
    __extends(ProgressiveImage, _super);
    function ProgressiveImage() {
        var _this = _super.call(this) || this;
        _this.removePlaceholderEventListener = _this.removePlaceholder.bind(_this);
        _this.imageEnhancedEventListener = _this.imageEnhanced.bind(_this);
        _this.handleImageErrorEventListener = _this.handleImageError.bind(_this);
        // create the image tag
        _this.imgTag = document.createElement('img');
        _this.imgTag.style.display = 'none';
        return _this;
    }
    Object.defineProperty(ProgressiveImage, "observedAttributes", {
        /**
         * Attributes which fire attributeChangedCallback
         */
        get: function () {
            return [
                'src',
                'background-image',
                'width',
                'enhanced',
                'alt',
                'fastly-optimize'
            ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressiveImage.prototype, "src", {
        /**
         * This is the image src.
         */
        get: function () {
            return this.getAttribute('src');
        },
        set: function (src) {
            this.setAttribute('src', src);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressiveImage.prototype, "backgroundImage", {
        /**
         * Optional background image property will override image source
         * and load image as background image instead of child image element
         */
        get: function () {
            return this.getAttribute('background-image');
        },
        set: function (img) {
            this.setAttribute('background-image', img);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressiveImage.prototype, "fastlyOptimize", {
        /**
         * Optimize low-quality (the one that appears before user scrolls to the image)
         * images using Fastly params (blur, quality, optimize, etc.)
         * instead of using 1/10 of the image width
         */
        get: function () {
            return this.hasAttribute('fastly-optimize') && this.getAttribute('fastly-optimize') !== 'false';
        },
        set: function (enabled) {
            if (enabled) {
                this.setAttribute('fastly-optimize', '');
            }
            else {
                this.removeAttribute('fastly-optimize');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressiveImage.prototype, "width", {
        /**
         * This is the width of the image you want to load.
         */
        get: function () {
            return parseInt(this.getAttribute('width')) || 960;
        },
        set: function (width) {
            this.setAttribute('width', "" + width);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressiveImage.prototype, "alt", {
        /**
         * This is the alt text of the image.
         */
        get: function () {
            return this.getAttribute('alt');
        },
        set: function (alt) {
            this.setAttribute('alt', alt);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(ProgressiveImage.prototype, "enhanced", {
        /**
         * This is a flag to denote that an image has been enhanced.
         */
        get: function () {
            return this.hasAttribute('enhanced') && this.getAttribute('enhanced') !== 'false';
        },
        set: function (enhanced) {
            if (enhanced) {
                this.setAttribute('enhanced', '');
            }
            else {
                this.removeAttribute('enhanced');
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This is a standard Custom Element Lifecycle hook for when the element is attached to the DOM
     */
    ProgressiveImage.prototype.connectedCallback = function () {
        this.init();
    };
    /**
     * This is a standard Custom Element lifecycle hook for when any attrs change on the element.
     */
    ProgressiveImage.prototype.attributeChangedCallback = function (attributeName, oldValue, newValue) {
        if (newValue === oldValue) {
            return;
        }
        switch (attributeName) {
            case 'src':
            case 'background-image':
                // If it's a gif, just load the full res version
                if (newValue.indexOf('.gif') > -1) {
                    this.isGif = true;
                    this.highResSrc = newValue;
                    this.enhanceImage();
                    return;
                }
                // get staging link, default to true if the property does not exist
                // we want isStaging to be false for undefined
                var isProd = ((window.forbes || {})['simple-site'] || {}).isProd;
                var isStaging = isProd === false;
                this.lowResSrc = ImageOptimizationUtils.prependFastly(newValue, this.width, LOW_RES_PERCENTAGE, isStaging, this.fastlyOptimize);
                this.highResSrc = ImageOptimizationUtils.prependFastly(newValue, this.width, 1, isStaging, this.fastlyOptimize);
                if (this.shouldEnhanceImage()) {
                    this.enhanceImage();
                }
                else {
                    this.currentQualityLoaded = LOW_RES;
                    this.imgTag.src = this.lowResSrc;
                }
                break;
            case 'alt':
                this.imgTag.alt = newValue || '';
                break;
        }
    };
    /**
     * registerScrollHandler
     * handles image enhancement checks onScroll
     *
     */
    ProgressiveImage.prototype.registerScrollHandler = function () {
        var _this = this;
        document.addEventListener('scroll', throttle(function () {
            if (_this.shouldEnhanceImage() && !_this.enhanced) {
                _this.enhanceImage();
            }
        }));
    };
    /**
     * shouldEnhanceImage
     * checks if the element has passed the threshold
     * where it should swap the lowResSrc for the highResSrc
     *
     * @returns boolean
     */
    ProgressiveImage.prototype.shouldEnhanceImage = function () {
        return this.getBoundingClientRect().top + window.pageYOffset - document.documentElement.clientTop <=
            (window.innerHeight) + window.pageYOffset;
    };
    /**
     * enhanceImage
     * Sets the image src to a high-res version
     *
     * @memberOf ProgressiveImage
     */
    ProgressiveImage.prototype.enhanceImage = function () {
        this.currentQualityLoaded = HIGH_RES;
        this.imgTag.src = this.highResSrc;
        this.imgTag.addEventListener('load', this.imageEnhancedEventListener);
        if (this.isGif) {
            this.classList.add('initial-width');
        }
    };
    /**
     * Flags image as enhanced and removes load event listener
     */
    ProgressiveImage.prototype.imageEnhanced = function () {
        if (this.backgroundImage) {
            this.style.backgroundImage = "url(" + this.highResSrc + ")";
        }
        this.enhanced = true;
        this.imgTag.removeEventListener('load', this.imageEnhancedEventListener);
    };
    /**
     * removePlaceholder
     * Adds a class to remove the placeholder and show the image
     *
     * @memberOf ProgressiveImage
     */
    ProgressiveImage.prototype.removePlaceholder = function () {
        if (!this.backgroundImage) {
            this.imgTag.style.display = 'block';
        }
        this.classList.add('show-img');
        this.imgTag.removeEventListener('load', this.removePlaceholderEventListener);
        if (this.shouldEnhanceImage()) {
            this.enhanceImage();
        }
    };
    /**
     * Handle the case where image load errors
     */
    ProgressiveImage.prototype.handleImageError = function () {
        // if low res source failed try to load the high res source
        if (this.currentQualityLoaded === LOW_RES && !this.lowResFailed) {
            this.lowResFailed = true;
            this.enhanceImage();
            // if loading the high res source but the low res source didn't fail, fall back
        }
        else if (!this.lowResFailed && this.lowResSrc) {
            this.currentQualityLoaded = LOW_RES;
            this.imgTag.src = this.lowResSrc;
            this.enhanced = true;
        }
        else {
            // stop trying to enhance the image
            this.enhanced = true;
        }
    };
    /**
     * Initialize image and attach listeners
     */
    ProgressiveImage.prototype.init = function () {
        this.imgTag.alt = this.alt || '';
        this.imgTag.addEventListener('load', this.removePlaceholderEventListener);
        this.imgTag.addEventListener('error', this.handleImageErrorEventListener);
        if (!this.backgroundImage) {
            this.appendChild(this.imgTag);
        }
        if (this.enhanced) {
            return;
        }
        this.registerScrollHandler();
    };
    return ProgressiveImage;
}(HTMLElement));
export { ProgressiveImage };
//# sourceMappingURL=progressive-image.component.js.map