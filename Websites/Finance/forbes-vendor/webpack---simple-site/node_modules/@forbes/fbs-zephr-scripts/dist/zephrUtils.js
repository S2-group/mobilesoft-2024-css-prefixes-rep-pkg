"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.createZephrModalContainer = exports.doesUserHaveProduct = exports.shouldShowListProfile = exports.shouldHideForbesServices = exports.getUserData = exports.logout = exports.hideLogin = exports.hideModal = exports.showLogin = exports.showModal = exports.callDataLayerUpdate = exports.updateAccessCookie = exports.cd11IsSponsored = exports.paidContentNameMapping = exports.expandFuseValues = void 0;
var cordialUtils_1 = require("./cordialUtils");
var bundleProductMap_1 = require("./bundleProductMap");
// ignore the single import preference
// eslint-disable-next-line import/prefer-default-export
var expandFuseValues = function (fuseData, customData) {
    var _loop_1 = function (element) {
        // If element is an object (fbs-forbes), iterate over each entry and assign true to element:key:value
        if (typeof fuseData[element] === 'object') {
            var entries = Object.entries(fuseData[element]);
            entries.forEach(function (entry) {
                var key = entry[0];
                var values = entry[1].split(',');
                if (element !== 'fbs-rp') {
                    values.forEach(function (value) {
                        // reassignment on customVars is expected
                        // eslint-disable-next-line no-param-reassign
                        customData["".concat(element, ":").concat(key, ":").concat(value)] = true;
                    });
                }
            });
        }
        else {
            // Values must be string for proper splitting.
            var fuseElements = (String(fuseData[element]) || '').split(',');
            // @todo: may be able to update this with new matching in Zephr
            // Keys that have more than one value seperated with , should be seperated & have it's own object key.
            // This is because Piano text matches values, i.e. "is 2" would match "2", "22", "12"
            if (fuseElements.length > 1 && element !== 'fbs-rp') {
                fuseElements.forEach(function (value) {
                    // eslint-disable-next-line no-param-reassign
                    customData["".concat(element, ":").concat(value)] = true;
                });
            }
            else if (element !== 'fbs-rp') {
                // eslint-disable-next-line no-param-reassign
                customData[element] = fuseData[element];
            }
        }
    };
    // eslint-disable-next-line no-restricted-syntax
    for (var element in fuseData) {
        _loop_1(element);
    }
};
exports.expandFuseValues = expandFuseValues;
exports.paidContentNameMapping = {
    ad: 'brandvoice',
    insights: 'insights',
    author: 'authorvoice',
    connoisseur: 'connoisseur',
    marketplace: 'marketplace',
    comm: 'communityvoice',
};
var cd11IsSponsored = function (swimLane, // swimLane is url param ss,
slot // DataLayer variable slot
) {
    if (slot === void 0) { slot = 'none'; }
    return ((slot && slot !== 'none') || (swimLane && swimLane !== 'none') ? 'true' : 'false');
};
exports.cd11IsSponsored = cd11IsSponsored;
var updateAccessCookie = function (loggedIn, resources) {
    if (loggedIn === void 0) { loggedIn = false; }
    if (resources === void 0) { resources = []; }
    // Either expire if logged out, or set expiration for two years from now
    var expiration = loggedIn ? (new Date(+(new Date()) + 63072000000)).toUTCString() : 'Thu, 01 Jan 1970 00:00:01 GMT';
    var cookieValue = resources.reduce(function (accumulator, currentValue) { return "".concat(accumulator, ",").concat(currentValue); }, loggedIn ? 'logged-in' : '');
    document.cookie = "fbs-zephr-access=".concat(cookieValue, "; path=/; domain=.forbes.com; expires=").concat(expiration);
};
exports.updateAccessCookie = updateAccessCookie;
var callDataLayerUpdate = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (fetch('/blaize/datalayer')
                .then(function (res) { return res.json(); })
                .then(function (res) {
                var _a, _b;
                var loggedIn = ((_a = res.dataLayer) === null || _a === void 0 ? void 0 : _a.loggedin) || false;
                var products = ((_b = res.dataLayer) === null || _b === void 0 ? void 0 : _b['active-products']) || [];
                (0, exports.updateAccessCookie)(loggedIn, products);
            })
                .catch(function (e) { return console.error('Error fetching Zephr dataLayer update!', e); }))];
    });
}); };
exports.callDataLayerUpdate = callDataLayerUpdate;
var showModal = function (modalId) {
    var _a;
    (_a = document.querySelector('body')) === null || _a === void 0 ? void 0 : _a.classList.add('zephr-modal-open', "zephr-".concat(modalId, "-modal-open"));
};
exports.showModal = showModal;
var showLogin = function () { return (0, exports.showModal)('sign-in'); };
exports.showLogin = showLogin;
var hideModal = function (modalId) {
    var body = document.querySelector('body');
    body === null || body === void 0 ? void 0 : body.classList.remove("zephr-".concat(modalId, "-modal-open"));
    var isOnlyModal = true;
    body === null || body === void 0 ? void 0 : body.classList.forEach(function (token) {
        if (token !== 'zephr-modal-open' && token.startsWith('zephr-') && token.endsWith('-modal-open')) {
            isOnlyModal = false;
        }
    });
    if (isOnlyModal) {
        body === null || body === void 0 ? void 0 : body.classList.remove('zephr-modal-open');
    }
};
exports.hideModal = hideModal;
var hideLogin = function () { return (0, exports.hideModal)('sign-in'); };
exports.hideLogin = hideLogin;
var logout = function () {
    // @todo: Add callback function
    fetch('/blaize/logout', {
        method: 'POST',
        headers: {
            'Content-Type': 'application/json',
        },
        body: JSON.stringify({ where: 'JUST_HERE' }),
    })
        .then(function (res) { return res.json(); })
        .then(function () {
        delete window.Zephr.user;
        if (window.fbsCordial) {
            try {
                window.fbsCordial.forget();
            }
            catch (e) {
                console.error('Error forgetting Cordial user', e);
            }
        }
        (0, exports.updateAccessCookie)();
        window.location.reload();
    }).catch(function (err) {
        console.log('Error logging out!', err);
    });
};
exports.logout = logout;
var getUserProfile = function () { return __awaiter(void 0, void 0, void 0, function () {
    var res, profile;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0: return [4 /*yield*/, fetch('/blaize/profile')];
            case 1:
                res = _a.sent();
                return [4 /*yield*/, res.json()];
            case 2:
                profile = _a.sent();
                window.Zephr = window.Zephr || {};
                if (!(profile === null || profile === void 0 ? void 0 : profile.status)) {
                    window.Zephr.user = window.Zephr.user || {};
                    window.Zephr.user = __assign(__assign({}, window.Zephr.user), profile);
                }
                return [2 /*return*/];
        }
    });
}); };
var getUserAccount = function () { return __awaiter(void 0, void 0, void 0, function () {
    var res, profile, email, trackingId;
    var _a;
    return __generator(this, function (_b) {
        switch (_b.label) {
            case 0: return [4 /*yield*/, fetch('/blaize/account')];
            case 1:
                res = _b.sent();
                return [4 /*yield*/, res.json()];
            case 2:
                profile = _b.sent();
                email = (_a = profile === null || profile === void 0 ? void 0 : profile.identifiers) === null || _a === void 0 ? void 0 : _a.email_address;
                trackingId = profile === null || profile === void 0 ? void 0 : profile.tracking_id;
                window.Zephr = window.Zephr || {};
                if (trackingId) {
                    window.Zephr.user = window.Zephr.user || {};
                    window.Zephr.user = __assign(__assign({}, window.Zephr.user), { email: email, 'tracking-id': trackingId });
                    window.dataLayer.push({
                        event: 'analyticsEvent',
                        'event category': 'Zephr trackingID',
                        'event action': 'Page Loaded',
                        'event label': trackingId,
                    });
                }
                return [2 /*return*/];
        }
    });
}); };
var getUserData = function () { return __awaiter(void 0, void 0, void 0, function () {
    return __generator(this, function (_a) {
        return [2 /*return*/, (Promise.all([getUserAccount(), getUserProfile()])
                .then(function () {
                window.Zephr = window.Zephr || {};
                document.dispatchEvent(new CustomEvent('fbs-zephr-init', { detail: window.Zephr }));
            })
                .catch(function () {
                console.log('Error fetching Zephr user information!');
                window.Zephr = window.Zephr || {};
                window.Zephr.error = true;
                document.dispatchEvent(new CustomEvent('fbs-zephr-init', { detail: window.Zephr }));
            }))];
    });
}); };
exports.getUserData = getUserData;
/**
 * Gets the current logged in user's active products
 */
var getActiveProducts = function () { var _a, _b; return ((_b = (_a = window.Zephr) === null || _a === void 0 ? void 0 : _a.accessDetails) === null || _b === void 0 ? void 0 : _b.activeProducts) || []; };
/**
 * Checks whether the current user should show or hide forbes services
 * @returns {bool} True if Forbes services are disallowed by contracts
 */
var shouldHideForbesServices = function () { var _a, _b; return ((_b = (_a = window.Zephr) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b['hide-forbes-services']) === 'yes'; };
exports.shouldHideForbesServices = shouldHideForbesServices;
/**
 * Checks whether the current user should show or hide the Profiles tab
 * @returns {bool} True if Forbes List Profiles are claimed by this account
 */
var shouldShowListProfile = function () { var _a, _b; return ((_b = (_a = window.Zephr) === null || _a === void 0 ? void 0 : _a.user) === null || _b === void 0 ? void 0 : _b['has-list-profile']) === 'yes'; };
exports.shouldShowListProfile = shouldShowListProfile;
/**
 * Checks if the user has access to any of the provided product IDs.
 * @param {string[]} challengeProducts Array of product IDs to challenge against
 * @returns {bool} True if the user has access to any of the provided products, false if no products match
 */
var doesUserHaveProduct = function (challengeProducts) {
    if (challengeProducts === void 0) { challengeProducts = []; }
    var products = getActiveProducts();
    var hasProduct = false;
    challengeProducts.forEach(function (resource) {
        hasProduct = hasProduct || products.includes(resource);
    });
    // check each bundle entry against the list of challengeProducts and the products the user owns
    hasProduct = hasProduct
        || Object.values(bundleProductMap_1.zephrProductBundle).some(function (bundle) {
            return bundle.some((function (bundleEntry) {
                return challengeProducts.includes(bundleEntry) && products.includes(bundleEntry);
            }));
        });
    return hasProduct;
};
exports.doesUserHaveProduct = doesUserHaveProduct;
var createZephrModalContainer = function (modalId, allowClose) {
    var _a, _b, _c;
    if (allowClose === void 0) { allowClose = true; }
    var styles = document.createElement('style');
    styles.innerHTML = "\n    .zephr-modal-open.zephr-".concat(modalId, "-modal-open .zephr-").concat(modalId, "-modal,\n    .zephr-modal-open.zephr-").concat(modalId, "-modal-open .zephr-").concat(modalId, "-backdrop {\n      display: block;\n    }");
    (_a = document.querySelector('head')) === null || _a === void 0 ? void 0 : _a.appendChild(styles);
    var backdrop = document.createElement('div');
    backdrop.classList.add("zephr-".concat(modalId, "-backdrop"), 'zephr-backdrop');
    var wrapper = document.createElement('div');
    wrapper.classList.add("zephr-".concat(modalId, "-modal"), 'zephr-generic-modal');
    var content = document.createElement('div');
    content.classList.add('zephr-modal-content');
    var hook = document.createElement('div');
    hook.classList.add("zephr-".concat(modalId, "-modal-content-hook"));
    if (allowClose) {
        var closeWrapper = document.createElement('div');
        closeWrapper.classList.add('zephr-close-wrapper');
        var closeBtn = document.createElement('button');
        closeBtn.classList.add('zephr-close-btn');
        closeBtn.setAttribute('aria-label', 'Close');
        closeBtn.type = 'button';
        closeBtn.addEventListener('click', function () { return (0, exports.hideModal)(modalId); });
        closeWrapper.appendChild(closeBtn);
        content.appendChild(closeWrapper);
        var clickStarted_1;
        content.addEventListener('pointerdown', function (e) { clickStarted_1 = e.target; });
        content.addEventListener('pointerup', function (e) { return (e.target === clickStarted_1 && e.target === content && (0, exports.hideModal)(modalId)); });
        backdrop.addEventListener('click', function () { return (0, exports.hideModal)(modalId); });
    }
    else {
        wrapper.classList.add('no-close');
    }
    content.appendChild(hook);
    wrapper.appendChild(content);
    (_b = document.querySelector('body')) === null || _b === void 0 ? void 0 : _b.appendChild(backdrop);
    (_c = document.querySelector('body')) === null || _c === void 0 ? void 0 : _c.appendChild(wrapper);
};
exports.createZephrModalContainer = createZephrModalContainer;
// Window assignment for external services (and nextjs hack)
window.Zephr = window.Zephr || {};
window.Zephr.utils = window.Zephr.utils || {};
window.Zephr.utils = __assign(__assign({}, window.Zephr.utils), { callDataLayerUpdate: exports.callDataLayerUpdate, shouldHideForbesServices: exports.shouldHideForbesServices, shouldShowListProfile: exports.shouldShowListProfile, doesUserHaveProduct: exports.doesUserHaveProduct, showLogin: exports.showLogin, hideLogin: exports.hideLogin, logout: exports.logout, showModal: exports.showModal, createZephrModalContainer: exports.createZephrModalContainer, updateCordialListData: cordialUtils_1.updateCordialListData });
