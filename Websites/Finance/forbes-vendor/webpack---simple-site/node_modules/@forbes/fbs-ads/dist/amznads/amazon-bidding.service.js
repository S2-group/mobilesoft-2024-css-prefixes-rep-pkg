import { loadScript } from '@forbes/fbs-assets-loader';
var amazonId = '3038';
/**
 * Handles Amazon Header Bidding
 *
 * https://jira.forbes.com/secure/attachment/27468/apstag_javascript_integration_NEW.pdf
 */
var AmazonBiddingService = /** @class */ (function () {
    function AmazonBiddingService() {
    }
    Object.defineProperty(AmazonBiddingService.prototype, "apstag", {
        get: function () {
            return window['apstag'];
        },
        enumerable: false,
        configurable: true
    });
    /**
     * Initialize Amazon Header Bidding
     */
    AmazonBiddingService.prototype.init = function (configParam, shouldUseSafeFrame) {
        this.initAmazon(configParam, shouldUseSafeFrame);
        this.subscribeToRemoveTargeting();
    };
    /**
     * Fetch bids for the configured slots from Amazon and store them until the slot is created.
     */
    AmazonBiddingService.prototype.fetchBids = function (amazonSlots) {
        var _this = this;
        return new Promise(function (resolve, reject) {
            if ((amazonSlots || []).length && !!_this.apstag) {
                _this.apstag.fetchBids({
                    slots: amazonSlots,
                    timeout: 2000
                }, function (bids) {
                    resolve(bids);
                });
            }
            else {
                resolve([]);
            }
        });
    };
    /**
     * Deprecated
     * Do not use
     */
    AmazonBiddingService.prototype.resetAmazonSlots = function () {
        // TODO: remove this function
    };
    /**
     * Set variables and load and initialize Amazon's js.
     */
    AmazonBiddingService.prototype.initAmazon = function (shoppingInsightsGroup, shouldUseSafeFrame) {
        window['apstagDEBUG'] = { testBidTimeout: 90 }; // Make sure test bids return before our 100ms timeout.
        this.amazonSetup();
        var apstagConfig = {
            pubID: amazonId,
            adServer: 'googletag',
            deals: true
        };
        if (shoppingInsightsGroup) {
            apstagConfig.params = {
                si_pageview: shoppingInsightsGroup
            };
        }
        if (shouldUseSafeFrame) {
            apstagConfig.useSafeFrames = true;
        }
        this.apstag.init(apstagConfig);
    };
    /**
     * Code to setup and load Amazon. Taken from their documentation and partially unminified.
     */
    AmazonBiddingService.prototype.amazonSetup = function () {
        if (window['apstag']) {
            return;
        }
        function q(c, r) {
            window['apstag']._Q.push([c, r]);
        }
        window['apstag'] = {
            init: function () {
                q('i', arguments);
            },
            fetchBids: function () {
                q('f', arguments);
            },
            setDisplayBids: function () { },
            _Q: []
        };
        loadScript('//c.amazon-adsystem.com/aax2/apstag.js', function () {
            console.warn('amazon bidding script already loaded');
        });
    };
    /**
     * Add Amazon's key/value pairs to the slot (if any) and remove the now used bid.
     */
    AmazonBiddingService.prototype.setAmazonTargeting = function (slot, bids) {
        var position = (slot.getTargeting('pos') || [])[0];
        if (!bids) {
            return;
        }
        bids
            .filter(function (bid) { return bid && bid.slotID === position; })
            .forEach(function (bid) {
            ((bid.helpers || {}).targetingKeys || []).forEach(function (key) {
                slot.setTargeting(key, bid.targeting[key]);
            });
            bids.splice(bids.indexOf(bid), 1);
        });
    };
    /**
     * Remove Amazon's key/values from the ad slots.
     *
     * Amazon's bids are only good for one ad call. Remove them once the ad loads so they won't still be there if the ad is refreshed.
     */
    AmazonBiddingService.prototype.subscribeToRemoveTargeting = function () {
        var _this = this;
        document.addEventListener('fbs-ad-render', function (renderEvent) {
            var event = renderEvent.detail;
            if (!!_this.apstag && _this.apstag.targetingKeys && typeof _this.apstag.targetingKeys === 'function') {
                _this.apstag.targetingKeys().forEach(function (key) {
                    event.slot.clearTargeting(key);
                });
            }
        });
    };
    return AmazonBiddingService;
}());
export { AmazonBiddingService };
//# sourceMappingURL=amazon-bidding.service.js.map