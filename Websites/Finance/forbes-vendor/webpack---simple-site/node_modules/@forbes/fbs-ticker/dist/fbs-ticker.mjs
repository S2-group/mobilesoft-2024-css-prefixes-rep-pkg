var h = Object.defineProperty;
var o = (a, t, e) => t in a ? h(a, t, { enumerable: !0, configurable: !0, writable: !0, value: e }) : a[t] = e;
var c = (a, t, e) => (o(a, typeof t != "symbol" ? t + "" : t, e), e);
class p {
  async fetchTickerData(t, e) {
    let r;
    e === "crypto" ? r = `https://fda.forbes.com/fundamentals/24h/${t.toLowerCase()}` : r = `https://www.forbes.com/xignite/?identifier=${t}`;
    try {
      const s = await (await fetch(r)).json();
      return e === "crypto" ? s.percentage24h * 100 : s.PercentChangeFromPreviousClose;
    } catch (n) {
      console.log("Error fetching to XIgnite", n);
    }
    return 0;
  }
}
class g extends HTMLElement {
  constructor() {
    super();
    c(this, "anchorTag");
    c(this, "percentChange");
    c(this, "priceChangeAPI");
    this.percentChange = 0, this.anchorTag = document.createElement("a"), this.priceChangeAPI = new p();
  }
  connectedCallback() {
    this.init();
  }
  disconnectedCallback() {
    this.remove();
  }
  async init() {
    const e = await this.priceChangeAPI.fetchTickerData(
      this.companyName,
      this.type
    );
    this.percentChange = e || 0, this.createStockTicker();
  }
  get companyName() {
    return this.getAttribute("data-name") || "";
  }
  set companyName(e) {
    !e || this.setAttribute("data-name", e);
  }
  get href() {
    return this.getAttribute("data-href") || "";
  }
  set href(e) {
    !e || this.setAttribute("data-href", e);
  }
  get type() {
    return this.getAttribute("data-type") || "";
  }
  createStockTicker() {
    this.anchorTag = document.createElement("a"), this.anchorTag.classList.add("percent-link"), this.anchorTag.setAttribute("href", this.href), this.anchorTag.setAttribute("target", "_self"), this.anchorTag.setAttribute("data-ga-track", `InternalLink:${this.href}`), this.anchorTag.setAttribute("aria-label", this.companyName), this.anchorTag.appendChild(this.buildPercentageSpan()), this.appendChild(this.anchorTag);
  }
  buildPercentageSpan() {
    let e;
    const r = document.createElement("span"), n = parseFloat(this.percentChange.toFixed(1)), s = n > 0;
    if (n === 0)
      e = "0.0%";
    else {
      e = `${s ? "+" : ""}${n}%`;
      const i = `ticker-${s ? "green" : "red"}`;
      r.classList.add(i);
    }
    return r.innerText = e, r;
  }
}
"customElements" in window && customElements.define("fbs-ticker", g);
export {
  g as default
};
