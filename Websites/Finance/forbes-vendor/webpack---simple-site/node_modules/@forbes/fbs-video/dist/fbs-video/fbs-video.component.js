var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { performanceMark } from '../utils/performance';
/**
 * This is a Custom Element for the Forbes Video Player
 * See Implementation Guide:
 *
 * https://github.forbes.com/Templates/fbs-video
 */
var FbsVideo = /** @class */ (function (_super) {
    __extends(FbsVideo, _super);
    function FbsVideo() {
        var _this = _super.call(this) || this;
        _this.init = false;
        _this.attributeHasChanged = false;
        /**
         * This is the Video Service
         */
        _this.videoService = window['fbs-video'];
        _this.videoPlayingEventListener = _this.handleVideoPlaying.bind(_this);
        _this.closeButtonTriggered = false;
        return _this;
    }
    Object.defineProperty(FbsVideo, "observedAttributes", {
        /**
         * List of attributes which trigger attributeChangedCallback
         */
        get: function () {
            return [
                'video-id',
                'player-id',
                'autoplay',
                'report-autoplay',
                'rendition-selection',
                'key-value-string',
                'muted',
                'ad-unit-path',
                'ads-disabled',
                'show-overlay',
                'kerv-content'
            ];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "playing", {
        /**
         * This is the state of whether the video is playing or not
         */
        get: function () {
            return this.adPlaying || this.videoPlaying || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "videoPlaying", {
        get: function () {
            if (!this.videoPlayer) {
                return false;
            }
            var videoPlaying = !this.videoPlayer.paused() && this.videoPlayer.currentTime() !== this.videoPlayer.duration();
            return videoPlaying || false;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "adPlaying", {
        /**
         * This is the state of whether an ad is playing or not
         */
        get: function () {
            if (!this.adPlayer) {
                return false;
            }
            return !this.adPlayer.paused() && this.adPlayer.currentTime() !== this.adPlayer.duration();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "adCompleted", {
        /**
         * This is the state of whether an ad is playing or not
         */
        get: function () {
            if (!this.adPlayer) {
                return true;
            }
            return !this.adPlayer.paused() && this.adPlayer.currentTime() === this.adPlayer.duration();
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "duration", {
        /**
         * This is the state of whether an ad is playing or not
         */
        get: function () {
            return this.videoPlayer && this.videoPlayer.mediainfo && this.videoPlayer.mediainfo.duration;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "pauseAd", {
        /**
         * Whether to pause the ad when scrolled out of view
         */
        get: function () {
            return this.hasAttribute('pause-ad') && this.getAttribute('pause-ad') !== 'false';
        },
        set: function (pauseAd) {
            if (pauseAd) {
                this.setAttribute('pause-ad', '');
            }
            else {
                this.removeAttribute('pause-ad');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "videoId", {
        /**
         * This is the ID of the Video Content
         */
        get: function () {
            return this.getAttribute('video-id');
        },
        set: function (videoId) {
            if (!videoId) {
                return;
            }
            this.setAttribute('video-id', videoId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "showOverlay", {
        /**
         * This is boolean to show or hide the overlay
         */
        get: function () {
            return this.getAttribute('show-overlay') === 'true';
        },
        set: function (showOverlay) {
            if (!showOverlay) {
                return;
            }
            this.setAttribute('show-overlay', "" + showOverlay);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "adsDisabled", {
        /**
         * Disables ads on this video player
         */
        get: function () {
            return this.hasAttribute('ads-disabled') && this.getAttribute('ads-disabled') !== 'false';
        },
        set: function (disabled) {
            if (disabled) {
                this.setAttribute('ads-disabled', '');
            }
            else {
                this.removeAttribute('ads-disabled');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "adUnitPath", {
        /**
         * This is the ad unit path
         */
        get: function () {
            return this.getAttribute('ad-unit-path') || this.getAdUnitPath();
        },
        set: function (adUnitPath) {
            if (!adUnitPath) {
                return;
            }
            this.setAttribute('ad-unit-path', adUnitPath);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "playerId", {
        /**
         * This is the ID of the Video Player
         */
        get: function () {
            return this.getAttribute('player-id');
        },
        set: function (playerId) {
            if (!playerId) {
                return;
            }
            this.setAttribute('player-id', playerId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "playlistId", {
        /**
         * This is the ID of the Video Playlist (if it exists)
         */
        get: function () {
            return this.getAttribute('playlist-id');
        },
        set: function (playlistId) {
            if (!playlistId) {
                return;
            }
            this.setAttribute('playlist-id', playlistId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "playlistVideoId", {
        /**
         * This is the ID of the Video that should play before a playlist
         */
        get: function () {
            return this.getAttribute('playlist-video-id');
        },
        set: function (playlistVideoId) {
            if (!playlistVideoId) {
                return;
            }
            this.setAttribute('playlist-video-id', playlistVideoId);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "autoplay", {
        /**
         * This tells the video to autoplay on instantiation
         */
        get: function () {
            return this.hasAttribute('autoplay') && this.getAttribute('autoplay') !== 'false';
        },
        set: function (autoplay) {
            if (autoplay) {
                this.setAttribute('autoplay', '');
            }
            else {
                this.removeAttribute('autoplay');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "muted", {
        /**
         * This tells the video to muted on instantiation
         */
        get: function () {
            return this.hasAttribute('muted') && this.getAttribute('muted') !== 'false';
        },
        set: function (muted) {
            if (muted) {
                this.setAttribute('muted', '');
            }
            else {
                this.removeAttribute('muted');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "secretAutoplay", {
        /**
         * This hides autoplay from ads params for cases where autoplay videos are click to play
         */
        get: function () {
            return this.hasAttribute('secret-autoplay') && this.getAttribute('secret-autoplay') !== 'false';
        },
        set: function (secretAutoplay) {
            if (secretAutoplay) {
                this.setAttribute('secret-autoplay', '');
            }
            else {
                this.removeAttribute('secret-autoplay');
            }
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "renditionSelection", {
        /**
         * This is the resolution of the video
         */
        get: function () {
            return this.getAttribute('rendition-selection');
        },
        set: function (renditionSelection) {
            if (!renditionSelection) {
                return;
            }
            this.setAttribute('rendition-selection', renditionSelection);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "keyValueString", {
        /**
         * This is the key value string for ads. Key-value string should be in the form
         * "key1=value1&key2=value2&key3=value3"
         */
        get: function () {
            return this.getAttribute('key-value-string');
        },
        set: function (keyValueString) {
            if (!keyValueString) {
                return;
            }
            this.setAttribute('key-value-string', keyValueString);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "kervContent", {
        get: function () {
            return this.getAttribute('kerv-content');
        },
        set: function (kervContent) {
            if (!kervContent) {
                return;
            }
            this.setAttribute('kerv-content', kervContent);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "attrsSnapshot", {
        get: function () {
            return {
                videoId: this.videoId,
                playerId: this.playerId,
                playlistId: this.playlistId,
                autoplay: this.autoplay,
                secretAutoplay: this.secretAutoplay,
                renditionSelection: this.renditionSelection,
                keyValueString: this.keyValueString,
                videoElementId: this.videoElementId,
                adUnitPath: this.adUnitPath,
                adsDisabled: this.adsDisabled,
                showOverlay: this.showOverlay,
                kervContent: this.kervContent,
            };
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsVideo.prototype, "adPlayer", {
        /**
         * Return the underlying ad video player if one exists
         */
        get: function () {
            if (this.videoPlayer && this.videoPlayer.ima3 && !(this.videoPlayer.ima3 instanceof Function) && this.videoPlayer.ima3.adsManager) {
                return this.videoPlayer.ima3.adPlayer;
            }
        },
        enumerable: true,
        configurable: true
    });
    /**
     * This is a standard attribute changed callback
     */
    FbsVideo.prototype.attributeChangedCallback = function (attributeName, oldValue, newValue) {
        this.attributeHasChanged = true;
        if (this.init && attributeName === 'video-id') {
            this.changeVideo(newValue);
        }
    };
    /**
     * This is a standard Custom Element Lifecycle hook for when the element is attached to the DOM
     */
    FbsVideo.prototype.connectedCallback = function () {
        var _this = this;
        // Wait until attribute has not changed during the interval
        var debounceInterval = setInterval(function () { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            var playerData;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!this.attributeHasChanged) return [3 /*break*/, 2];
                        clearInterval(debounceInterval);
                        this.videoElementId = this.attrsSnapshot.videoElementId = this.videoService.generateId();
                        this.insertVideoElement();
                        this.insertCloseButton();
                        return [4 /*yield*/, this.videoService.init(this.attrsSnapshot)];
                    case 1:
                        playerData = _a.sent();
                        this.init = true;
                        this.playerData = playerData;
                        this.videoPlayer = playerData.player;
                        this.videoElement.title = this.videoPlayer.mediainfo.name;
                        this.attachPlayEventListeners();
                        this.attachCustomSocialOptions();
                        this.dispatchEvent(new CustomEvent('init'));
                        this.resetDefaultBreakpointClass();
                        if (this.autoplay) {
                            setTimeout(function () {
                                _this.playPromise = _this.videoPlayer.play();
                            });
                        }
                        if (this.playlistId) {
                            this.playerData.player.bcPlaylistUi({
                                hideOnStart: true,
                            });
                        }
                        return [3 /*break*/, 3];
                    case 2:
                        this.attributeHasChanged = false;
                        _a.label = 3;
                    case 3: return [2 /*return*/];
                }
            });
        }); }, 10);
    };
    /**
     * This is a standard Custom Element lifecycle hook for when the element is removed from the DOM.
     */
    FbsVideo.prototype.disconnectedCallback = function () {
        if (this.videoPlayer) {
            this.videoPlayer.off('play');
            this.videoPlayer.off('pause');
            this.videoPlayer.off('ads-play');
            this.videoPlayer.off('ads-pause');
            this.videoPlayer.off('ended');
        }
        this.videoService.dispose(this.playerData);
    };
    /**
     * Play a different video in this player
     */
    FbsVideo.prototype.changeVideo = function (videoId) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        this.playerData.videoId = videoId;
                        return [4 /*yield*/, this.videoService.handleVideoJsReady(this.playerData)];
                    case 1:
                        _a.sent();
                        this.videoElement.title = this.videoPlayer.mediainfo.name;
                        this.attachCustomSocialOptions();
                        if (this.autoplay) {
                            if (this.muted) {
                                this.mute();
                                this.attachAdLoadedHandler();
                            }
                            this.play();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    FbsVideo.prototype.mute = function () {
        if (this.videoPlayer) {
            this.videoPlayer.muted(true);
        }
        if (this.adPlayer) {
            this.muteAd();
        }
    };
    /**
     * Play the current video
     */
    FbsVideo.prototype.play = function () {
        if (this.videoPlayer && !this.videoPlaying && this.adCompleted) {
            this.playPromise = this.videoPlayer.play();
        }
        if (this.adPlayer && !this.adPlaying) {
            this.adPlayer.play();
        }
    };
    /**
     * Pause the current video
     */
    FbsVideo.prototype.pause = function () {
        var _this = this;
        if (this.videoPlaying && this.playPromise) {
            this.playPromise.then(function () {
                _this.videoPlayer.pause();
            });
        }
        if (this.adPlaying) {
            this.adPlayer.pause();
        }
    };
    /**
     * Play or Pause the current video
     */
    FbsVideo.prototype.togglePlay = function () {
        var _this = this;
        if (this.playing && this.playPromise) {
            this.playPromise.then(function () {
                _this.pause();
            });
        }
        else {
            this.play();
        }
    };
    /**
     * Switch to fullscreen mode
     * Only works in response to user action (not on timer, etc.)
     */
    FbsVideo.prototype.requestFullscreen = function () {
        if (this.videoPlayer) {
            this.videoPlayer.requestFullscreen();
        }
        return new Promise(function () { });
    };
    /**
     * Reset x-small layout to small layout.
     */
    FbsVideo.prototype.resetDefaultBreakpointClass = function () {
        var brightcoveContainer = this.firstElementChild;
        if (brightcoveContainer && brightcoveContainer.classList.contains('vjs-layout-x-small')) {
            brightcoveContainer.classList.remove('vjs-layout-x-small');
            brightcoveContainer.classList.add('vjs-layout-small');
        }
    };
    /**
     * Custom social options allow control of share url
     */
    FbsVideo.prototype.attachCustomSocialOptions = function () {
        if (this.videoPlayer.social) {
            this.videoPlayer.social({
                url: "https://www.forbes.com/video/" + this.videoId + "/",
            });
        }
    };
    FbsVideo.prototype.insertCloseButton = function () {
        this.closeButton = document.createElement('div');
        this.closeButton.innerHTML = '<i class="icon icon-close fs-text-s"></i>';
        this.closeButton.classList.add('video-close');
        this.closeButton.classList.add('hidden');
        this.closeButton.setAttribute('data-ga-track', 'sticky close');
        this.appendChild(this.closeButton);
    };
    /**
     * This displays the video dismiss button if needed
     * Close button should be shown under following scenarios
     * Show video close button if ads ended
     * Show video close button if !hideAdCloseButton
     * Show video close button if ads error out
     * Show video close button if ads disabled
     */
    FbsVideo.prototype.showCloseButton = function () {
        if (!this.useCloseButton || this.closeButtonTriggered) {
            return;
        }
        if (this.closeButton.classList.contains('hidden')) {
            this.closeButton.classList.remove('hidden');
        }
        this.closeButtonTriggered = true;
    };
    FbsVideo.prototype.hideAdCloseButton = function () {
        if (!(this.videoPlayer &&
            this.videoPlayer.ima3 &&
            this.videoPlayer.ima3['adsManager'] &&
            this.videoPlayer.ima3['adsManager'].getCurrentAd)) {
            return false;
        }
        // Hide the close button for ads not served by AdSense, AdX, or by certain provider ids
        // If it's a native video ad, we don't need to show the close button
        var currentAd = this.videoPlayer.ima3['adsManager'].getCurrentAd();
        var allowedIds = ['126949942', '126954142', '939010822', '1286113822', '1286115742', '4430278527', '4430286386', '1362247942'];
        var adProvider = (currentAd && currentAd.getAdSystem().toLowerCase()) || '';
        return currentAd &&
            (adProvider.indexOf('adsense') === -1 ||
                adProvider.indexOf('adx') === -1 ||
                allowedIds.indexOf(currentAd.getAdId()) === -1);
    };
    /**
     * This (re)inserts the video element into this element
     */
    FbsVideo.prototype.insertVideoElement = function () {
        this.videoElement = document.createElement('video');
        if (this.playlistId) {
            this.classList.add('vjs-playlist-player-container');
            this.playlistVideoId = this.videoId;
        }
        Object.assign(this.videoElement.dataset, {
            account: '2097119709001',
            embed: 'default',
            player: this.playerId,
            playlistId: this.playlistId || '',
            playlistVideoId: this.playlistVideoId || '',
        });
        this.videoElement.className = 'video-js brightcove_perform playable-rectangle';
        this.videoElement.setAttribute('controls', 'true');
        this.videoElement.setAttribute('crossorigin', '');
        this.videoElement.setAttribute('playsinline', '');
        if (this.muted) {
            this.videoElement.setAttribute('muted', '');
        }
        this.videoElement.id = this.videoElementId;
        // TODO: set this as actual video name
        this.innerHTML = '';
        this.appendChild(this.videoElement);
    };
    FbsVideo.prototype.getAdUnitPath = function () {
        var adsService = window['fbsads'];
        if (adsService) {
            return adsService.adUnitPath;
        }
        return '/7175/fdcvideo';
    };
    FbsVideo.prototype.attachPlayEventListeners = function () {
        this.attachPlayEventHandler();
        this.attachAdsTiming();
        this.attachPlayEndedEventListener();
        this.attachAdsStartedEventListener();
        this.attachAdsErrorEventHandler();
        this.attachAdsEndedEventListener();
        this.attachPauseEventHandler();
        this.subscribeForPause();
    };
    FbsVideo.prototype.attachAdsTiming = function () {
        var _this = this;
        this.videoPlayer.on('ads-request', function () {
            performanceMark('Ad Requested ' + _this.videoElementId);
            _this.videoPlayer.off('ads-request');
        });
        this.videoPlayer.on('adscanceled', function () {
            _this.showCloseButton();
            _this.videoPlayer.off('adscanceled');
        });
        this.videoPlayer.on('ads-load', function () {
            performanceMark('Ad Loaded ' + _this.videoElementId);
            _this.videoPlayer.off('ads-load');
            _this.muteAd();
        });
        this.videoPlayer.on('ima3-ads-manager-loaded', function () {
            var google = window['google'];
            var config = {
                campId: _this.playerData.sz,
                chanId: _this.playerData.playerId,
                anId: '930392'
            };
            window['googleImaVansAdapter'].init(google, _this.videoPlayer.ima3['adsManager'], _this.videoElement, config);
        });
    };
    FbsVideo.prototype.attachPlayEndedEventListener = function () {
        var _this = this;
        this.videoPlayer.on('ended', function () {
            if (!_this.videoComplete && !_this.playing) {
                _this.videoComplete = true;
                _this.dispatchEvent(new CustomEvent('ended'));
            }
        });
    };
    FbsVideo.prototype.attachAdsStartedEventListener = function () {
        var _this = this;
        this.videoPlayer.on('ads-ad-started', function () {
            // if close button should not be hidden, now is the time to show it
            if (!_this.hideAdCloseButton()) {
                _this.showCloseButton();
            }
            _this.dispatchEvent(new CustomEvent('ad-started'));
        });
    };
    FbsVideo.prototype.attachAdsEndedEventListener = function () {
        var _this = this;
        this.videoPlayer.on('ads-ad-ended', function () {
            // show close button
            _this.showCloseButton();
            _this.dispatchEvent(new CustomEvent('ad-ended'));
            document.dispatchEvent(new Event('ad-ended'));
        });
    };
    /**
     * Attach event handler for playback started or unpaused
     */
    FbsVideo.prototype.attachPlayEventHandler = function () {
        var _this = this;
        this.videoPlayer.on('play', function () {
            _this.setAttribute('playing', '');
            // User initiated play for non-autoplaying player disables hidden pause mechanic for all players
            if (!_this.autoplay || _this.secretAutoplay) {
                _this.videoService.hiddenPauseEnabled = false;
            }
            if (_this.adsDisabled && _this.useCloseButton) {
                // show close button if ads disabled and need to use close button
                _this.showCloseButton();
            }
            _this.videoComplete = false;
            _this.videoService.setMediaSessionDetails(_this.playerData);
            _this.videoService.notifyPlaying(_this.videoElementId);
            // Fallback for video close-button, if close-button has not been triggered
            // Delay 37 seconds
            if (!_this.closeButtonTriggered || !_this.closeButtonTimeout) {
                _this.closeButtonTimeout = setTimeout(function () {
                    _this.showCloseButton();
                }, 37000);
            }
            _this.dispatchEvent(new CustomEvent('play'));
        });
        this.videoPlayer.on('ads-play', function () {
            _this.setAttribute('playing', '');
            _this.videoService.notifyPlaying(_this.videoElementId);
            _this.dispatchEvent(new CustomEvent('play'));
        });
    };
    /**
     * Attach event handler for playback started or unpaused
     */
    FbsVideo.prototype.attachPauseEventHandler = function () {
        var _this = this;
        this.videoPlayer.on('pause', function () {
            _this.removeAttribute('playing');
            _this.dispatchEvent(new CustomEvent('pause'));
        });
        this.videoPlayer.on('ads-pause', function () {
            _this.removeAttribute('playing');
            _this.dispatchEvent(new CustomEvent('pause'));
        });
    };
    /**
     * Attach event for Ad Loaded
     */
    FbsVideo.prototype.attachAdLoadedHandler = function () {
        var _this = this;
        this.videoPlayer.on('ima3-loaded', function () {
            if (_this.adPlayer) {
                _this.muteAd();
            }
        });
    };
    /**
     * Attach event for Ad Error
     */
    FbsVideo.prototype.attachAdsErrorEventHandler = function () {
        var _this = this;
        this.videoPlayer.on('ima3-ad-error', function () {
            _this.showCloseButton();
        });
    };
    /**
     * Subscribe to pause when other videos are playing
     */
    FbsVideo.prototype.subscribeForPause = function () {
        document.addEventListener('fbs-video-playing', this.videoPlayingEventListener);
    };
    /**
     * Handler for custom event dispatched by fbs-video service when video starts playing
     * @param videoPlayingEvent Custom event object with detail = { videoElementId: string }
     */
    FbsVideo.prototype.handleVideoPlaying = function (videoPlayingEvent) {
        if (this.playing && videoPlayingEvent.detail && videoPlayingEvent.detail.videoElementId !== this.videoElementId) {
            this.pause();
        }
    };
    /**
     * Clobber uncooperative ads that don't like to mute
     */
    FbsVideo.prototype.muteAd = function () {
        var _this = this;
        if (this.adPlayer) {
            var count_1 = 0;
            var interval_1 = setInterval(function () {
                count_1++ < 30 && _this.adPlayer ? _this.adPlayer.muted(true) : clearInterval(interval_1);
            }, 20);
        }
    };
    return FbsVideo;
}(HTMLElement));
export { FbsVideo };
//# sourceMappingURL=fbs-video.component.js.map