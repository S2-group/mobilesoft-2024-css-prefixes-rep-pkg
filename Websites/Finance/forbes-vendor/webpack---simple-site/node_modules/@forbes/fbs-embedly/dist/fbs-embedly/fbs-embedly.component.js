var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
/**
 * This is a Custom Element for the Forbes Embedly embeds
 * See Implementation Guide:
 *
 * https://github.forbes.com/Templates/fbs-embedly
 */
var FbsEmbedly = /** @class */ (function (_super) {
    __extends(FbsEmbedly, _super);
    function FbsEmbedly() {
        var _this = _super.call(this) || this;
        _this.iframe = document.createElement('iframe');
        _this.fbsEmbedlyService = window['fbs-embedly'];
        return _this;
    }
    Object.defineProperty(FbsEmbedly, "observedAttributes", {
        /**
         * This is a standard Custom Element method that dictates which properties are observed
         */
        get: function () {
            return ['ratio'];
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsEmbedly.prototype, "iframesrc", {
        /**
         * Getter for the iframesrc
         */
        get: function () {
            return this.getAttribute('iframe-src');
        },
        /**
         * Setter for the iframesrc
         * Sets the `iframe-src` attribute
         * Updates the child-element-iframe's src url
         */
        set: function (src) {
            if (!src) {
                return;
            }
            this.setAttribute('iframe-src', src);
            this.iframe.setAttribute('src', src);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(FbsEmbedly.prototype, "ratio", {
        /**
         * Getter for the ratio
         */
        get: function () {
            return this.getAttribute('ratio');
        },
        /**
         * Setter for the ratio
         * Sets the initial padding-bottom based on the input ratio
         */
        set: function (ratio) {
            if (!ratio) {
                return;
            }
            this.resize(ratio);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Resize the embedly
     * Called by the setter and the service
     * Changes the height of the element to show the entire iframe content using the paddingBottom property.
     * @param size   string containing a float
     */
    FbsEmbedly.prototype.resize = function (ratio) {
        this.style.paddingBottom = 100 * parseFloat(ratio) + '%';
    };
    /**
     * This is a standard Custom Element Lifecycle hook for when the element is attached to the DOM.
     * It registers the element with the service.
     * It creates an iframe, sets its properties, and attaches it as child of this custom element.
     */
    FbsEmbedly.prototype.connectedCallback = function () {
        var url = this.iframesrc;
        this.fbsEmbedlyService.registerEmbed(url, this);
        this.iframe.setAttribute('src', url);
        this.iframe.setAttribute('scrolling', 'no');
        this.appendChild(this.iframe);
    };
    /**
     * This is a standard Custom Element lifecycle hook for when the element is removed from the DOM.
     * It unregisters the element from the service.
     */
    FbsEmbedly.prototype.disconnectedCallback = function () {
        var url = this.iframesrc;
        this.fbsEmbedlyService.unregisterEmbed(url, this);
    };
    /**
     * This is a standard Custom Element lifecycle hook for when any of the element's attributes is changed.
     * @param attributeName   string  `ratio`
     * @param oldValue        string  float converted to string
     * @param newValue        string  float converted to string
     */
    FbsEmbedly.prototype.attributeChangedCallback = function (attributeName, oldValue, newValue) {
        if (oldValue !== newValue) {
            if (attributeName === 'ratio') {
                this.resize(newValue);
            }
        }
    };
    return FbsEmbedly;
}(HTMLElement));
export { FbsEmbedly };
//# sourceMappingURL=fbs-embedly.component.js.map