/**
 * This is a service which handles resizing of fbs-embedly elements on Forbes pages.
 * Handles ratio sizing for responsive Embedly iFrames.
 * Read http://docs.embed.ly/docs/native for context.
 */
var FbsEmbedlyService = /** @class */ (function () {
    function FbsEmbedlyService() {
        var _this = this;
        var consent = this.getConsentState();
        if (consent === 'ready') {
            window.addEventListener('message', function (evt) { return _this.handleEmbedResize(evt); });
            this.embedlyMap = new Map();
        }
    }
    /**
     * Check status of user consent.
     * @returns 'waiting' if we are waiting to get consent, 'disapproved' if refused, 'ready' otherwise
     */
    FbsEmbedlyService.prototype.getConsentState = function () {
        var state = 'ready';
        var _a = window.forbes || { isEurope: false, isChina: false }, isEurope = _a.isEurope, isChina = _a.isChina;
        if (document.cookie.match(/notice_gdpr_prefs=/) && !document.cookie.match(/notice_gdpr_prefs=0,1,2/)) {
            state = 'disapproved';
        }
        if (!isEurope && !isChina) {
            return state;
        }
        if (!document.cookie.match(/notice_gdpr_prefs=/)) { // no consent yet
            state = 'waiting';
        }
        else if (!document.cookie.match(/notice_gdpr_prefs=0,1,2/)) { // no consent
            state = 'disapproved';
        }
        return state;
    };
    /**
     * Register the embedly element with the service
     * @param url       url of the embedly iframe
     * @param element   the actual <fbs-embedly>
     */
    FbsEmbedlyService.prototype.registerEmbed = function (url, embed) {
        var embeds = this.embedlyMap.get(url) || [];
        embeds.push(embed);
        this.embedlyMap.set(url, embeds);
    };
    /**
     * Unregister the embedly element with the service
     * @param url       url of the embedly iframe
     * @param element   the actual <fbs-embedly>
     */
    FbsEmbedlyService.prototype.unregisterEmbed = function (url, embed) {
        var embeds = this.embedlyMap.get(url);
        var index = embeds.indexOf(embed);
        embeds.splice(index, 1);
        this.embedlyMap.set(url, embeds);
    };
    /**
     * Processes a window.postMessage event.
     * If message has resize data, the correct ratio is computed and the component's `resize` method is called.
     * @param   evt   MessageEvent - data dispatched from the embedly service, all others are ignored
     */
    FbsEmbedlyService.prototype.handleEmbedResize = function (evt) {
        if (['https://cdn.embedly.com', 'https://embedly.forbes.com'].indexOf(evt.origin) < 0) {
            return;
        }
        var data;
        try {
            data = JSON.parse(evt.data);
        }
        catch (err) {
            return;
        }
        if (data.context !== 'iframe.resize' || !data.src) {
            return;
        }
        // Resize each element correctly
        (this.embedlyMap.get(data.src) || []).forEach(function (element) {
            var ratio = ((data.height / element.offsetWidth)).toPrecision(4);
            // Creates a custom 'resizeEmbed' event, which is dispatched when an embed finishes loading to resize.
            var resizeEmbed = new CustomEvent('resizeEmbed', {});
            window.dispatchEvent(resizeEmbed);
            element.resize(ratio);
        });
    };
    return FbsEmbedlyService;
}());
export { FbsEmbedlyService };
//# sourceMappingURL=fbs-embedly.service.js.map