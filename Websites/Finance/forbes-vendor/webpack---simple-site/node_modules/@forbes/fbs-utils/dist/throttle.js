"use strict";
// @ts-nocheck
Object.defineProperty(exports, "__esModule", { value: true });
/**
* Prevents functions from firing repeatedly. Will fire each time the threshold is met.
* @param  {Function} fn
* @param  {Number}   threshold
* @param  {Object}   scope
*/
function throttle(fn, threshold, scope) {
    var _this = this;
    var last;
    var deferTimer;
    if (!threshold) {
        threshold = 100;
    }
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var context = scope || _this || {};
        var now = +new Date();
        if (last && (now < last + threshold)) {
            clearTimeout(deferTimer);
            var next = threshold + now + 1;
            deferTimer = setTimeout(
            /* istanbul ignore next */
            function () {
                last = now;
                context.deferred = true;
                fn.apply(context, args);
            }, next - last);
        }
        else {
            last = now;
            fn.apply(context, args);
        }
    };
}
exports.default = throttle;
