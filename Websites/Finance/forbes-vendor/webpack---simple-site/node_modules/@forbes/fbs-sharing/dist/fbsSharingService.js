(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define("fbs-sharing", [], factory);
	else if(typeof exports === 'object')
		exports["fbs-sharing"] = factory();
	else
		root["fbs-sharing"] = factory();
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/Users/iingato/git2/Templates-fbs-sharing";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, exports, __webpack_require__) {

"use strict";


Object.defineProperty(exports, "__esModule", {
  value: true
});

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * A Service to handle all the functionality needed in the Header
 * for the functionality of the share icons
 * @class FbsSharingService
 */
var FbsSharingService = function () {
  /**
   * Creates an instance of FbsSharingService.
   * @param {string} width - width of the window to share on
   * @param {string} height - height of the window to share on
   * @param {boolean} isResizable - if true, window is resizable
   * @param {string} windowName - reference name of the window
   * @param {string} article - article to post in the share window
   * @memberof FbsSharingService
   */
  function FbsSharingService() {
    var configOpts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {
      width: '400',
      height: '500',
      isResizable: false,
      windowName: 'Article Share'
    };

    _classCallCheck(this, FbsSharingService);

    // The different urls used to share articles to different social platforms
    this.sharingMap = {
      facebook: 'https://www.facebook.com/sharer.php?u=',
      twitter: 'https://twitter.com/intent/tweet?url=',
      google: 'https://plus.google.com/share?url=',
      linkedin: 'https://www.linkedin.com/shareArticle?mini=true&url=',
      reddit: 'https://reddit.com/submit?url=',
      email: 'mailto:?',
      sms: 'sms:'
    };

    this.languageDefaults = {
      it: {
        twitterTrail: 'via @forbesitalia',
        emailText: 'Forbes Italia'
      },
      en: {
        twitterTrail: 'via @forbes',
        emailText: 'Forbes'
      }
    };

    // set the default config object for the new share window to open
    this.config = configOpts;
  }

  /**
   * Hides and shows the social icons on smaller viewports
   * @param {String} shareElement - the element used to hide and show the
   *                                  social icons on mobile view
   * @param {String} hiddenClass - the class to add and remove to toggle displaying the share icons
   * @memberof FbsSharingService
   */


  _createClass(FbsSharingService, [{
    key: 'toggleShareIcons',
    value: function toggleShareIcons(shareElement, hiddenClass) {
      shareElement.classList.toggle(hiddenClass);
    }

    /**
     * Attaches a click event listener to the element used to hide and show the share icons
     *
     * @param {any} element - the element to click on to hide and show share icons
     * @param {String} hiddenClass - the class to remove and add to the element
     *                            to hide and show the icons
     * @memberof FbsSharingService
     */

  }, {
    key: 'addToggleShareToElement',
    value: function addToggleShareToElement(element, hiddenClass) {
      var _this = this;

      if (!(element && element.nodeType) || !hiddenClass) {
        return;
      }
      element.addEventListener('click', function () {
        _this.toggleShareIcons(element, hiddenClass);
      });
    }

    /**
     * Opens a window to share a Forbes article on the different social media platforms:
     * Platforms: google, linkedin, facebook, twitter, and email
     *
     * @param {any} e - the event that was is being propogated when firing the function
     * @param {String} platform - the social platform to share the article on e.g 'facebook'
     * @param {Object} article - {
     *  title: 'Something Interesting',
     *  description: 'some random description of this article',
     *  uri: 'https://www.forbes.com/article-uri',
     *  blogType: 'author',
     *  slug: 'Brand',
     * }
     * Note: On some projects the article object has a url property instead of uri
     * @param {Object} - {
     *  width: '400',
     *  height: '500',
     *  isResizable: false,
     *  windowName: 'some window name',
     * }
     * @param {String} [lang='en'] - the lang of the Forbes page to share the link e.g. 'it'
     * @memberof FbsSharingService
     */

  }, {
    key: 'shareArticleOnSocial',
    value: function shareArticleOnSocial(e, platform, article) {
      var _ref = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {},
          _ref$width = _ref.width,
          width = _ref$width === undefined ? this.config.width : _ref$width,
          _ref$height = _ref.height,
          height = _ref$height === undefined ? this.config.height : _ref$height,
          _ref$isResizable = _ref.isResizable,
          isResizable = _ref$isResizable === undefined ? this.config.isResizable : _ref$isResizable,
          _ref$windowName = _ref.windowName,
          windowName = _ref$windowName === undefined ? this.config.windowName : _ref$windowName;

      var lang = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : 'en';

      // prevent the default on the click event and stop the event
      // from bubbling up to the hide/show icons button
      e.preventDefault();
      e.stopPropagation();

      // don't do anything if no platform was specified or an invalid platform was given
      if (!platform || !this.sharingMap[platform] || !article) {
        return;
      }

      var shouldResize = isResizable ? 'yes' : 'no';
      var link = this.configureSocialLink(platform, article, lang);
      if (platform === 'email' || platform === 'sms') {
        this.openMessageClient(link);
      } else {
        var windowConfig = 'width=' + width + ',height=' + height + ',resizable=' + shouldResize;
        window.open(link, windowName, windowConfig).focus();
      }
    }

    /**
     * Configures the link to open the sharing window
     *
     * @param {String} platform - the social platform to share the article on
     * @param {Object} article - {
     *  title: 'Something Interesting',
     *  description: 'some random description of this article',
     *  uri: 'https://www.forbes.com/article-uri',
     *  blogType: 'author',
     *  slug: 'Brand',
     * }
     * @param {String} [lang='en'] - the language of the Forbes page the link is
     * being shared from e.g. it
     * Note: On some projects the article object has a url property instead of uri
     * @returns {String} - the link used when opening the new window
     * @memberof FbsSharingService
     */

  }, {
    key: 'configureSocialLink',
    value: function configureSocialLink(platform, article) {
      var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';

      var articleTitle = article.title || '';
      var articleUri = article.uri || article.url || '';
      var articleDescription = article.description || articleTitle || '';

      switch (platform) {
        case 'twitter':
          return this.formatTwitterLink(articleTitle, articleUri, lang);
        case 'email':
          return this.formatEmailLink(articleTitle, articleUri, lang);
        case 'linkedin':
          return this.formatLinkedinLink(articleTitle, articleUri, articleDescription);
        case 'reddit':
          return this.formatRedditLink(articleTitle, articleUri);
        case 'sms':
          return this.formatSMSLink(articleTitle, articleUri);
        default:
          return '' + this.sharingMap[platform] + encodeURIComponent(articleUri);
      }
    }

    /**
     * Formats the link for sharing an article through Twitter
     *
     * @param {String} articleTitle - the article's title
     * @param {String} articleUri  - the uri of the article the client can share
     * @param {String} [lang='en'] - the language of the Forbes page the link is
     * being shared from e.g. it
     * @returns {String}  - the link used when opening the new window
     * @memberof FbsSharingService
     */

  }, {
    key: 'formatTwitterLink',
    value: function formatTwitterLink(articleTitle, articleUri) {
      var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';

      var titleLength = articleTitle.length;
      var twitterTitle = articleTitle;
      var trail = this.languageDefaults[lang].twitterTrail;
      // Twitter has 140 char limit, the link is 23 + a space, and the via @forbes
      // append is 12 leaving 104 chars for the title
      if (titleLength > 104) {
        twitterTitle = twitterTitle.substring(0, 101);
        twitterTitle += '...';
      }
      var encodedTitle = encodeURIComponent(twitterTitle + ' ' + trail);

      return '' + this.sharingMap.twitter + encodeURIComponent(articleUri) + '&text=' + encodedTitle;
    }

    /**
     * Formats the link for sharing an article through the email client
     *
     * @param {String} articleTitle - the article's title
     * @param {String} articleUri  - the uri of the article the client can share
     * @param {String} [lang='en'] - the language of the Forbes page the
     * link is being shared from e.g. 'it'
     * @returns {String} - the link used when opening the new window
     * @memberof FbsSharingService
     */

  }, {
    key: 'formatEmailLink',
    value: function formatEmailLink(articleTitle, articleUri) {
      var lang = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 'en';

      var forbesBranch = this.languageDefaults[lang].emailText;
      var subject = articleTitle + ' - ' + forbesBranch;
      var emailBody = '\nHi,\n\nI thought you\'d like this:\n' + articleUri + '\n\n' + subject + '\n';

      return this.sharingMap.email + 'subject=' + encodeURIComponent(subject) + '&body=' + encodeURIComponent(emailBody);
    }

    /**
     * Formats the link for sharing an article through linkedin
     * @param {String} articleTitle - the article's title
     * @param {String} articleUri  - the uri of the article the client can share
     * @param {String} articleDescription = short summary of the article content
     * @returns {String} - the link used when opening the new window
     * @memberof FbsSharingService
     */

  }, {
    key: 'formatLinkedinLink',
    value: function formatLinkedinLink(articleTitle, articleUri, articleDescription) {
      return '' + this.sharingMap.linkedin + encodeURIComponent(articleUri) + '&title=' + encodeURIComponent(articleTitle) + '&summary=' + encodeURIComponent(articleDescription || articleTitle);
    }

    /**
     * Formats the link for sharing an article through reddit
     * @param {String} articleTitle - the article's title
     * @param {String} articleUri  - the uri of the article the client can share
     * @returns {String} - the link used when opening the new window
     * @memberof FbsSharingService
     */

  }, {
    key: 'formatRedditLink',
    value: function formatRedditLink(articleTitle, articleUri) {
      return '' + this.sharingMap.reddit + encodeURIComponent(articleUri) + '&title=' + encodeURIComponent(articleTitle);
    }

    /**
     * Formats the link for sharing an article through sms
     *
     * @param {String} articleTitle - the article's title
     * @param {String} articleUri  - the uri of the article the client can share
     * @returns {String}  - the link used when opening the new window
     * @memberof FbsSharingService
     */

  }, {
    key: 'formatSMSLink',
    value: function formatSMSLink(articleTitle, articleUri) {
      var ua = navigator.userAgent.toLowerCase();
      return '' + this.sharingMap.sms + (ua.indexOf('iphone') > -1 || ua.indexOf('ipad') > -1 ? '&' : '?') + 'body=' + encodeURIComponent(articleTitle) + ' ' + encodeURIComponent(articleUri);
    }

    /**
     * Basically a function to open the mail client, only here since karma complains about
     * opening a new window in the unit tests. Specifically using: npm run test:once
     *
     * @param {String} link - the uri to add in the email's body
     * @memberof FbsSharingService
     */

  }, {
    key: 'openMessageClient',
    value: function openMessageClient(link) {
      if (!link) {
        return;
      }
      window.location.href = link;
    }

    /**
     * Maps over an array of the different share icons and adds a click event listener
     * that will fire the shareArticleOnSocial function for each respective platform given in
     * each object inside of the array
     *
     * @param {Array[Object]} shareIcons - takes an array of object whose structure is:
     * { element: <element>, platform: <socialPlatform> } where the element is the icon element to
     * attach the event listener to and the platform is the social platform to share it over
     * @param {Object} - {
     *  platform: 'facebook',
     *  width: '400',
     *  height: '500',
     *  isResizable: false,
     *  windowName: 'some window name',
     * }
     * @memberof FbsSharingService
     */

  }, {
    key: 'mapShareToClick',
    value: function mapShareToClick(shareIcons, article) {
      var _this2 = this;

      var _ref2 = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
          _ref2$width = _ref2.width,
          width = _ref2$width === undefined ? this.config.width : _ref2$width,
          _ref2$height = _ref2.height,
          height = _ref2$height === undefined ? this.config.height : _ref2$height,
          _ref2$isResizable = _ref2.isResizable,
          isResizable = _ref2$isResizable === undefined ? this.config.isResizable : _ref2$isResizable,
          _ref2$windowName = _ref2.windowName,
          windowName = _ref2$windowName === undefined ? this.config.windowName : _ref2$windowName;

      shareIcons.forEach(function (icon) {
        icon.element.addEventListener('click', function (e) {
          _this2.shareArticleOnSocial(e, icon.platform, article, {
            width: width,
            height: height,
            isResizable: isResizable,
            windowName: windowName
          });
        });
      });
    }
  }]);

  return FbsSharingService;
}();

exports.default = FbsSharingService;

/***/ })
/******/ ]);
});
//# sourceMappingURL=fbsSharingService.map