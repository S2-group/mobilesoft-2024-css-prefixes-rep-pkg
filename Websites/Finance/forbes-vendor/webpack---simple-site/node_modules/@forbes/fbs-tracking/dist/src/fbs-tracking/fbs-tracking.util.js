"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.TrackingUtil = void 0;
var TrackingUtil = /** @class */ (function () {
    function TrackingUtil() {
    }
    /**
     * Generates unique client id based on URL, timestamp and random numbers
     *
     * @return {string} client id
     */
    TrackingUtil.generateClientId = function () {
        var _this = this;
        var hash = this.hash31(window.location.pathname + window.location.hash); // 31 bits
        var time = new Date().getTime() & 0x7fffffff; // 31 bits
        var arr = [];
        var clientId = '';
        for (var i = 0; i < 5; i++) {
            arr[i] = (Math.random() * 0x10000000) & 0x7fffffff; // 28 bits
        }
        arr[0] ^= hash & 0xfffffff; // xor 28 bits of hash
        arr[1] ^= time & 0xfffffff; // xor 28 bits of time
        arr[2] ^= ((time >> 28) << 3) | (hash >> 28); // xor remaining 3 bits of time and 3 bits of hash
        arr.forEach(function (value) {
            clientId += _this.pad(value.toString(16), 7, '0', false);
        });
        return clientId;
    };
    /**
     * Generates 31 bit hash from a given string
     * @param {string} input string
     * @return {number} hash
     */
    TrackingUtil.hash31 = function (input) {
        var hash = 2147483647;
        var i = input.length;
        while (i--) {
            hash = ((hash << 5) - hash + input.charCodeAt(i)) & 0x7fffffff;
        }
        return hash;
    };
    /**
     * Pad string to certain length
     * E.G. pad('3', 5, '0') creates '00003'
     *      pad('3', 5, '0', true) creates '30000'
     *      pad('5', 3, '-') creates '--5'
     *      pad('5', 1, '-', true) creates '5'
     *
     * @param input     String to be padded
     * @param limit     Length string should be padded to
     * @param padStr    String to pad with
     * @param padToEnd  Direction to pad on, send false for left, true for right padding
     * @return          Padded string
     */
    TrackingUtil.pad = function (input, limit, padStr, padToEnd) {
        input = "".concat(input);
        while (input.length < limit) {
            input = padToEnd ? input + padStr : padStr + input;
        }
        return input;
    };
    return TrackingUtil;
}());
exports.TrackingUtil = TrackingUtil;
//# sourceMappingURL=fbs-tracking.util.js.map