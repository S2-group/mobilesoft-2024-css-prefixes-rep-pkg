'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var Mailcheck = require('mailcheck');
var Config = require('../global/config');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var Mailcheck__default = /*#__PURE__*/_interopDefaultLegacy(Mailcheck);
var Config__default = /*#__PURE__*/_interopDefaultLegacy(Config);

function API() {
  this.passwordLength = 5;
  this.shopNameMinLength = 4;
  this.shopNameMaxLength = 60;
  this.subdomainMinLength = 4;
}

API.prototype.servicesBaseURI = function () {
  return Config__default.get('ServicesBaseURI', 'https://app.shopify.com');
};

API.prototype.signupBaseURI = function () {
  return Config__default.get('SignupBaseURI', 'https://accounts.shopify.com');
};

API.prototype.validatePresent = function (value) {
  const errors = {};

  if (!value) {
    errors.required = true;
  }

  return errors;
};

API.prototype.validateCheckboxPresent = function (value) {
  return API.prototype.validatePresent(value === '0' ? false : value);
};

API.prototype.validateShopName = function (password, value = '', skipDomainValidation = false) {
  const errors = {};
  const disallowedWords = this.shopNameHasDisallowedWords(value);

  if (value.length < this.shopNameMinLength) {
    errors.minlength = true;
    return Promise.resolve(errors);
  }

  if (value.length > this.shopNameMaxLength) {
    errors.maxlength = true;
    return Promise.resolve(errors);
  }

  if (value === password) {
    errors.matchesPassword = true;
    return Promise.resolve(errors);
  }

  if (disallowedWords) {
    errors.disallowed = disallowedWords;
    return Promise.resolve(errors);
  }

  return skipDomainValidation ? Promise.resolve(errors) : API.prototype.subdomainAvailable(value);
};

API.prototype.subdomainAvailable = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator__default(function* (subdomain) {
    const errors = {};
    const disallowedWords = this.shopNameHasDisallowedWords(subdomain);

    if (disallowedWords) {
      errors.disallowed = disallowedWords;
      return errors;
    }

    if (subdomain.length < this.subdomainMinLength) {
      errors.minlength = true;
      return errors;
    }

    try {
      const data = yield this.checkAvailability(subdomain);

      if (data.status === 'unavailable') {
        errors.existingAdmin = data.host;
      } else if (data.status === 'error') {
        errors.message = data.message;
      }
    } catch (error) {
      return errors;
    }

    return errors;
  });

  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();

API.prototype.promotionalProgramPromoCodeAvailable = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator__default(function* (promotionalProgramCode, promotionalProgramPromoCode) {
    const errors = {};

    try {
      const data = yield this.checkPromoCodeAvailability(promotionalProgramCode, promotionalProgramPromoCode);

      if (data.valid === false) {
        errors.message = data.message;
      }
    } catch (error) {
      return errors;
    }

    return errors;
  });

  return function (_x2, _x3) {
    return _ref2.apply(this, arguments);
  };
}();

API.prototype.validateEmail = function (data) {
  const errors = {};

  if (!/^[a-z0-9_.\-+]+@[a-z0-9-.]+\.[a-z0-9]{2,}$/i.test(data)) {
    errors.invalid = true;
  }

  return errors;
};

API.prototype.validatePassword = function (data = '') {
  const errors = {};

  if (!/^[^\s].*[^\s]$/.test(data)) {
    errors.spaces = true;
    return errors;
  }

  if (data.length < this.passwordLength) {
    errors.minlength = true;
  }

  return errors;
};

API.prototype.checkAvailability = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator__default(function* (shopName) {
    try {
      const url = `${this.servicesBaseURI()}/services/signup/check_availability.json?shop_name=${shopName}`;
      const response = yield fetch(url, {
        credentials: 'include',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json'
        }
      });
      return response.json();
    } catch (error) {
      return {};
    }
  });

  return function (_x4) {
    return _ref3.apply(this, arguments);
  };
}();

API.prototype.checkPromoCodeAvailability = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator__default(function* (promotionalProgramCode, promotionalProgramPromoCode) {
    try {
      const url = `${this.servicesBaseURI()}/services/promotional_programs/check_availability.json?promotional_program_code=${promotionalProgramCode}&promotional_program_promo_code=${promotionalProgramPromoCode}`;
      const response = yield fetch(url, {
        credentials: 'include',
        headers: {
          Accept: 'application/json',
          'Content-Type': 'application/json'
        }
      });
      return response.json();
    } catch (error) {
      return {};
    }
  });

  return function (_x5, _x6) {
    return _ref4.apply(this, arguments);
  };
}();

API.prototype.shopNameHasDisallowedWords = function (shopName) {
  const disallowedRegexp = /(shopify)/gi;
  const result = disallowedRegexp.exec(shopName);

  if (result) {
    return result[1];
  }

  return false;
};

API.prototype.checkEmailTypo = function (email) {
  if (this.validateEmail(email).invalid) {
    return Promise.reject();
  }

  return new Promise((resolve, reject) => {
    Mailcheck__default.run({
      domains: [],
      secondLevelDomains: ['gmail', 'hotmail', 'yahoo'],
      topLevelDomains: ['at', 'be', 'biz', 'ca', 'ch', 'co.id', 'co.il', 'co.jp', 'co.nz', 'co.uk', 'co.za', 'com', 'com.au', 'com.co', 'com.mx', 'com.ng', 'com.ph', 'com.pt', 'com.sg', 'com.tw', 'cz', 'de', 'dk', 'edu', 'es', 'eu', 'fr', 'gov', 'gr', 'hk', 'hu', 'ie', 'in', 'info', 'io', 'it', 'jp', 'kr', 'mil', 'my', 'net', 'net.au', 'nl', 'no', 'org', 'pt', 'ru', 'se', 'sg', 'uk', 'us', 'ws', 'za'],
      email,

      suggested(suggestion) {
        return resolve({
          suggestion
        });
      },

      empty() {
        return reject();
      }

    });
  });
};

var formsApi = new API();

exports.default = formsApi;
