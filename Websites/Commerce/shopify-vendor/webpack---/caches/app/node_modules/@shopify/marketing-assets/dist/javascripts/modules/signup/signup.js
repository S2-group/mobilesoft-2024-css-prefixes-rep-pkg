'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Modal = require('../modal');
var signupFlow = require('./signup-flow');
var signupConstants = require('./signup-constants');
var SignupModal = require('./signup-modal');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var Modal__default = /*#__PURE__*/_interopDefaultLegacy(Modal);
var SignupModal__default = /*#__PURE__*/_interopDefaultLegacy(SignupModal);

function handle1MBBVettingQuestion() {
  const vettingModalTriggers = document.querySelectorAll('[data-modal-trigger="TriggerVettingQuestionModal"]');

  if (vettingModalTriggers.length > 0) {
    const vettingModalContent = document.getElementById('VettingQuestionModal').innerHTML;
    vettingModalTriggers.forEach(triggerElement => {
      // eslint-disable-next-line no-new
      new Modal__default(triggerElement, () => vettingModalContent, {
        afterModalRender: () => {
          const hiddenFieldName = 'promotional_program_code';
          const hiddenFieldSelector = `input[type="hidden"][name="${hiddenFieldName}"]`;
          const vettingResponseSelector = 'race_ethnicity_check[response]';
          const vettingQuestionForm = document.querySelector('.vetting-question-form');
          const submitButton = vettingQuestionForm.querySelector('[type="submit"]');
          vettingQuestionForm[vettingResponseSelector].forEach(vettingResponse => {
            vettingResponse.addEventListener('change', () => {
              if (submitButton.disabled) {
                submitButton.disabled = false;
              }
            }, {
              once: true
            });
          });
          vettingQuestionForm.addEventListener('submit', event => {
            event.preventDefault();
            const vettingQuestionResponse = vettingQuestionForm[vettingResponseSelector].value;
            const promotionalProgramCode = vettingQuestionResponse === 'yes_response' ? '1MBB' : '';
            const $hiddenFieldsForm = document.querySelector(signupConstants.SELECTORS.HIDDEN_FORM_SELECTOR);
            const promotionalProgramCodeField = $hiddenFieldsForm.querySelector(hiddenFieldSelector);

            if (promotionalProgramCodeField) {
              promotionalProgramCodeField.value = promotionalProgramCode;
            } else {
              const hiddenField = document.createElement('input');
              hiddenField.type = 'hidden';
              hiddenField.name = hiddenFieldName;
              hiddenField.value = promotionalProgramCode;
              $hiddenFieldsForm.appendChild(hiddenField);
            }

            signupFlow.initSignupFlow(event.target);
          });
        }
      });
    });
  }
}

function addClickEventListener(classElement) {
  document.querySelectorAll(classElement).forEach(element => {
    element.addEventListener('click', event => {
      event.preventDefault();
      event.stopImmediatePropagation();
      signupFlow.initSignupFlow(event.target);
    });
  });
}
/**
 * Initializes the Signup CTAs to redirect the user to the new signup flow
 * on https://accounts.shopify.com/store-create
 */


function Signup() {
  /**
   * Handles the vetting question for the 1MBB program hosted at https://www.shopify.com/1mbb.
   * When clicking the "Start free trial" button, the user will be presented with a modal asking
   * if they identify as a member of the Black community. If they answer "yes", they will be
   * enrolled in the "1MBB" program via the `promotional_program_code` hidden field, otherwise
   * they will be enrolled in the regular free trial.
   */
  if (window.location.pathname.startsWith('/1mbb')) {
    handle1MBBVettingQuestion();
  } else {
    addClickEventListener(signupConstants.SELECTORS.ZERO_FIELD_SELECTOR);
    addClickEventListener(signupConstants.SELECTORS.ONE_FIELD_SELECTOR);
    addClickEventListener(signupConstants.SELECTORS.THREE_FIELD_SELECTOR);
    const zeroFieldTrigger = document.querySelectorAll(signupConstants.SELECTORS.ZERO_FIELD_SELECTOR);
    const oneFieldTrigger = document.querySelectorAll(signupConstants.SELECTORS.ONE_FIELD_SELECTOR);

    if (zeroFieldTrigger.length > 0 || oneFieldTrigger.length > 0) {
      this.SignupModal = new SignupModal__default(zeroFieldTrigger.length > 0 ? zeroFieldTrigger : oneFieldTrigger);
    }
  }
}

exports.default = Signup;
