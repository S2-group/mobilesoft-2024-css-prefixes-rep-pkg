'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var isMobileUA = require('../helpers/is-mobile');
var utils = require('../helpers/utils');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var isMobileUA__default = /*#__PURE__*/_interopDefaultLegacy(isMobileUA);

const videoClass = 'video__video';
const loadingClass = 'js-video--loading';
const loadedClass = 'js-video--loaded';
const activeClass = 'js-video--active';
const customControlsClass = 'js-video--custom-controls';
const buttonClass = 'video__button';
const playButtonClass = `${buttonClass}--play`;
const pauseButtonClass = `${buttonClass}--pause`;

class Video {
  /**
   * Creates a video component
   * @param {DOMElement} container - The component element that serves
   * as the parent container for the video element, and custom controls.
   * @class Video
   * @namespace ShopifyMarketing
   * @constructor
  */
  constructor(container) {
    this.checkContainerExists(container);
    this.container = container;
    this.video = this.container.querySelector(`.${videoClass}`);
    this.customControls = this.container.classList.contains(customControlsClass);
    this.lazyload = this.video.dataset.lazyload === 'true';

    if (this.customControls) {
      this.playButton = this.container.querySelector(`.${playButtonClass}`);
      this.pauseButton = this.container.querySelector(`.${pauseButtonClass}`);
    }

    this.bindFunctions();

    if (this.lazyload) {
      this.observer = this.observeVisibility(this.container, this.handleVisibilityChange);
    } else {
      this.init();
    }
  }

  checkContainerExists(container) {
    if (container == null) {
      throw new Error('Video component did not load. Check the container element exists.');
    }
  }

  bindFunctions() {
    this.autoplayVideo = this.autoplayVideo.bind(this);
    this.handleVisibilityChange = this.handleVisibilityChange.bind(this);
    this.loadVideo = utils.once(this.loadVideo);
    this.playVideoClicked = this.playVideoClicked.bind(this);
    this.pauseVideoClicked = this.pauseVideoClicked.bind(this);
    this.onVideoCanPlay = this.onVideoCanPlay.bind(this);
    this.onVideoClick = this.onVideoClick.bind(this);
    this.onVideoIsPlaying = this.onVideoIsPlaying.bind(this);
    this.onVideoIsPaused = this.onVideoIsPaused.bind(this);
  }

  init() {
    if (this.video.dataset.autoplay === 'true' && !this.isMobileUA() && !this.isPrefersReducedMotion()) {
      this.autoplayVideo();
    }

    if (this.customControls) {
      this.playButton.addEventListener('click', this.playVideoClicked);
      this.pauseButton.addEventListener('click', this.pauseVideoClicked);
      this.video.addEventListener('click', this.onVideoClick);
      this.video.addEventListener('pause', this.onVideoIsPaused);
    }

    if (this.lazyload) {
      this.lazyloadPosterImage();
    }

    this.loadVideo();
    this.video.addEventListener('play', this.onVideoIsPlaying);
  }

  isMobileUA() {
    return isMobileUA__default;
  }

  isPrefersReducedMotion() {
    return utils.prefersReducedMotion();
  }

  observeVisibility(element, callback) {
    const observer = new IntersectionObserver(entries => {
      entries.forEach(entry => {
        callback(entry.intersectionRatio > 0);
      });
    });
    observer.observe(element);
    return observer;
  }

  handleVisibilityChange(visible) {
    if (!visible) {
      return;
    }

    this.observer.disconnect();
    this.init();
  }

  autoplayVideo() {
    this.video.autoplay = true;
  }

  lazyloadPosterImage() {
    this.video.poster = this.video.dataset.poster;
  }

  loadVideo() {
    this.container.classList.add(loadingClass);
    this.isLoaded = true;
    this.video.querySelectorAll('source').forEach(source => {
      source.src = source.getAttribute('data-src');
    });
    this.video.addEventListener('canplay', () => {
      this.onVideoCanPlay();
    });
    this.video.load();
  }

  onVideoCanPlay() {
    this.container.classList.remove(loadingClass);
    this.container.classList.add(loadedClass);
  }

  onVideoIsPlaying() {
    this.container.classList.add(activeClass);

    if (this.buttonWasClicked) {
      this.buttonWasClicked = false;
      this.pauseButton.focus();
    }
  }

  onVideoIsPaused() {
    this.container.classList.remove(activeClass);

    if (this.buttonWasClicked) {
      this.buttonWasClicked = false;
      this.playButton.focus();
    }
  }

  onVideoClick() {
    if (this.video.paused) {
      this.playVideoClicked();
    } else {
      this.pauseVideoClicked();
    }
  }

  playVideoClicked() {
    this.buttonWasClicked = true;
    this.playVideo();
  }

  pauseVideoClicked() {
    this.buttonWasClicked = true;
    this.pauseVideo();
  }

  playVideo() {
    if (this.isLoaded) {
      this.video.play().then(() => {}) // eslint-disable-line no-empty-function
      .catch(() => {}); // eslint-disable-line no-empty-function
    } else {
      this.loadVideo();
    }
  }

  pauseVideo() {
    this.video.pause();
  }

}

exports.default = Video;
