'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var enquire = require('enquire.js');
var animate = require('../helpers/animate');
var Breakpoints = require('../global/breakpoints');
var Accordion = require('./accordion');
var Drawer = require('./drawer');
var Popover = require('./popover');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var enquire__default = /*#__PURE__*/_interopDefaultLegacy(enquire);
var Breakpoints__default = /*#__PURE__*/_interopDefaultLegacy(Breakpoints);
var Accordion__default = /*#__PURE__*/_interopDefaultLegacy(Accordion);
var Drawer__default = /*#__PURE__*/_interopDefaultLegacy(Drawer);
var Popover__default = /*#__PURE__*/_interopDefaultLegacy(Popover);

/**
 * A Navigation component which knows about dropdowns and drawers.
 *
 * @param {Object} [options] configuration options
 * @param {String} [options.drawerBreakpoint=Breakpoints.prototype.tabletDown] the breakpoint to enable the Drawer
 * @class Nav
 * @constructor
 */

function Nav(options = {}) {
  const selectors = {
    wrapper: '.marketing-nav-wrapper',
    subNavList: '#ShopifySubNavList',
    mobileSelect: '#ShopifyNavMobileSelect',
    drawer: 'NavDrawer',
    dropdown: '.js-popover-dropdown',
    flyout: '.js-popover-flyout',
    primaryAccordion: '#DrawerNavPrimaryAccordion',
    secondaryAccordion: '#DrawerNavSecondaryAccordion'
  };
  this.config = _objectSpread__default({
    drawerBreakpoint: Breakpoints__default.prototype.tabletDown
  }, options);
  this.config.selectors = this.config.selectors ? Object.assign(this.config.selectors, selectors) : selectors;
  this.wrapper = document.querySelector(this.config.selectors.wrapper);

  if (!this.wrapper) {
    return false;
  }

  this.subNavList = document.querySelector(this.config.selectors.subNavList);
  this.mobileSelect = document.querySelector(this.config.selectors.mobileSelect);
  this.initDrawer = this.initDrawer.bind(this);
  this.dropdownEls = document.querySelectorAll(`${this.config.selectors.wrapper} ${this.config.selectors.dropdown}`);
  this.init();
}

Nav.prototype.init = function () {
  this.initDropdowns();
  enquire__default.register(this.config.drawerBreakpoint, this.initDrawer);

  if (this.mobileSelect) {
    this.mobileSelect.addEventListener('click', () => this.toggleSubnav());
  }
};

Nav.prototype.initDropdowns = function () {
  this.dropdowns = [...this.dropdownEls].map(dropdownEl => {
    const flyoutEls = dropdownEl.querySelectorAll(this.config.selectors.flyout);
    const dropdown = new Popover__default(dropdownEl, {
      hasFlyout: flyoutEls.length > 0
    });
    let flyoutTimeout;
    dropdown.flyouts = [...flyoutEls].map(flyoutEl => {
      return new Popover__default(flyoutEl, {
        onShow: () => {
          if (flyoutTimeout) {
            clearTimeout(flyoutTimeout);
          }

          const popoverListMinHeight = flyoutEl.querySelector('.popover__content').offsetHeight;
          dropdown.$popover.classList.add('has-active-flyout');
          dropdown.$popover.querySelector('.popover__list').setAttribute('style', `min-height:${popoverListMinHeight}px`);
        },
        onHide: () => {
          flyoutTimeout = setTimeout(() => {
            dropdown.$popover.classList.remove('has-active-flyout');
            dropdown.$popover.querySelector('.popover__list').removeAttribute('style');
            flyoutTimeout = null;
          }, 250);
        }
      });
    });
    return dropdown;
  });
};

Nav.prototype.initDrawer = function () {
  this.drawer = new Drawer__default(this.config.selectors.drawer, 'right');
  this.accordion = this.initAccordion(this.config.selectors.primaryAccordion, this.drawer);
  this.secondaryAccordion = this.initAccordion(this.config.selectors.secondaryAccordion, this.drawer);
  enquire__default.unregister(this.config.drawerBreakpoint, this.initDrawer);
};

Nav.prototype.initAccordion = function (selector, drawer) {
  const accordionElement = document.querySelector(selector);

  if (!accordionElement) {
    return undefined;
  }

  const accordion = new Accordion__default(accordionElement, {
    mobileOnly: false,
    openFirst: false,
    itemSelector: '.accordion-item'
  });
  drawer.on('before_opened', event => {
    // Only initialise the accordion once, not each time the drawer is opened.
    if (event.drawerHasOpenedOnce) {
      return false;
    } // Open all the active accordions, including nested ones.


    accordion.toggleAll(`${accordion.config.itemLink}.drawer__item--active`);
    return true;
  });
  return accordion;
};

Nav.prototype.toggleSubnav = function () {
  const newState = !this.wrapper.classList.contains('js-is-active');
  this.mobileSelect.setAttribute('aria-expanded', newState);
  this.wrapper.classList.toggle('js-is-active');
  animate.slideToggle(this.subNavList);
};

exports.default = Nav;
