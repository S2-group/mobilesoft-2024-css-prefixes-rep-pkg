'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

/**
 * A set of helpers for common actions utilized to improve site accessibility.
 *
 * By default, it attaches event handlers to all links with a class of .in-page-link to correctly set
 * focus on the target destination. Additional methods described below help with managing focus state.
 *
 * @class A11yHelpers
 * @namespace ShopifyMarketing
 * @constructor
*/
function A11yHelpers() {
  this.init();
  document.querySelectorAll('.in-page-link').forEach(el => {
    el.addEventListener('click', evt => this.pageLinkFocus(evt.currentTarget));
  });
}

A11yHelpers.prototype.focusTraps = new WeakMap();

A11yHelpers.prototype.init = function () {
  if (!window.location.hash) {
    return;
  }

  const elementId = decodeURIComponent(window.location.hash).substr(1); // ignore text fragment hashes from google search result pages
  // https://github.com/WICG/scroll-to-text-fragment/

  if (elementId.startsWith(':~:text=')) {
    return;
  }

  this.pageLinkFocus(document.getElementById(elementId));
};
/**
 * Modifies the `tab` order to prevents focus from exiting a given container,
 * e.g. a modal or a drawer.
 * @method trapFocus
 * @param {DOM element} container Target element in which to trap focus
*/


A11yHelpers.prototype.trapFocus = function (container) {
  const focusTrap = evt => {
    if (container !== evt.target && !container.contains(evt.target)) {
      container.focus();
    }
  };

  container.setAttribute('tabindex', '-1');
  A11yHelpers.prototype.focusTraps.set(container, focusTrap);
  document.addEventListener('focusin', focusTrap);
};
/**
 * Remove focus trap added via `trapFocus()`.
 * @method removeTrapFocus
 * @param {DOM element} container Target element in which focus is trapped
*/


A11yHelpers.prototype.removeTrapFocus = function (container) {
  container.removeAttribute('tabindex');

  if (A11yHelpers.prototype.focusTraps.has(container)) {
    document.removeEventListener('focusin', A11yHelpers.prototype.focusTraps.get(container));
    A11yHelpers.prototype.focusTraps.delete(container);
  }
};
/**
 * For use when focus shifts to a container rather than a link, e.g., for
 * in-page links, after scroll, focus shifts to content area so that the next
 * item in the `tab` order is what the user expects.
 *
 * If focusing a link, just use link.focus();
 * @method pageLinkFocus
 * @param {DOM element} element Target element for focus
*/


A11yHelpers.prototype.pageLinkFocus = function (element) {
  if (!element) {
    return;
  }

  element.tabIndex = -1;
  element.focus();
  element.classList.add('js-focus-hidden');
  element.addEventListener('blur', evt => {
    evt.target.classList.remove('js-focus-hidden');
    evt.target.removeAttribute('tabindex');
  }, {
    once: true
  });
};

exports.default = A11yHelpers;
