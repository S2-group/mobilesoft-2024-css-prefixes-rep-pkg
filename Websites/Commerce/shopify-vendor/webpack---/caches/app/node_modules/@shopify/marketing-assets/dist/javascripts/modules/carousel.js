'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var I18n = require('../global/i18n');
var Analytics = require('../global/analytics');
var utils = require('../helpers/utils');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var I18n__default = /*#__PURE__*/_interopDefaultLegacy(I18n);
var Analytics__default = /*#__PURE__*/_interopDefaultLegacy(Analytics);

class Carousel {
  /**
   * Simple JS carousel. Does not show/hide elements, just adds and removes classes.
   *
   * @param {Element} el Element wrapper
   * @param {Object} [options] configuration options
   * @param {String} [options.duration=5000] length between slides when autoplaying (milliseconds)
   * @param {String} [options.currentIndex=0] starting carousel item
   * @param {String} [options.carouselItems=.carousel-items] CSS selector for carousel items container
   * @param {String} [options.carouselItem=.carousel-item] CSS selector for carousel items
   * @param {String} [options.carouselNav=.carousel-nav] CSS selector for carousel nav
   * @param {String} [options.carouselNavItem=.carousel-nav-item] CSS selector for individual slide nav items
   * @param {String} [options.carouselPrevNavItem=.carousel-arrow-left] CSS selector for previous nav item element
   * @param {String} [options.carouselNextNavItem=.carousel-arrow-right] CSS selector for next nav item element
   * @param {String} [options.carouselPause=.carousel-pause] CSS selector for pause element
   * @class Carousel
   * @namespace ShopifyMarketing
   * @constructor
  */
  constructor(el, options) {
    const defaults = {
      duration: 5000,
      currentIndex: 0,
      carouselItems: '.carousel-items',
      carouselItem: '.carousel-item',
      carouselNav: '.carousel-nav',
      carouselNavItem: '.carousel-nav-item',
      carouselPrevNavItem: '.carousel-arrow-left',
      carouselNextNavItem: '.carousel-arrow-right',
      carouselPause: '.carousel-pause'
    };
    this.config = _objectSpread__default(_objectSpread__default({}, defaults), options);
    this.$el = el;
    this.$itemsContainer = this.$el.querySelector(this.config.carouselItems);
    this.itemsContainerId = utils.uniqueId('carousel-items');
    this.$items = this.$el.querySelectorAll(this.config.carouselItem);
    this.itemsCount = this.$items.length;
    this.currentIndex = this.config.currentIndex;
    this.animationSuspended = false;
    this.mouseAndFocusListenersAdded = false;
    this.$nav = this.$el.querySelector(this.config.carouselNav);
    this.$navItems = this.$el.querySelectorAll(this.config.carouselNavItem);
    this.$prevNavItem = this.$el.querySelector(this.config.carouselPrevNavItem);
    this.$nextNavItem = this.$el.querySelector(this.config.carouselNextNavItem);
    this.$pauseItem = this.$el.querySelector(this.config.carouselPause);
    this.$navItems.forEach(item => item.addEventListener('click', this._onClick.bind(this)));

    if (this.$prevNavItem) {
      this.$prevNavItem.addEventListener('click', this._navPrev.bind(this));
    }

    if (this.$nextNavItem) {
      this.$nextNavItem.addEventListener('click', this._navNext.bind(this));
    }

    if (this.$pauseItem) {
      this.$pauseItem.addEventListener('click', this._navPause.bind(this));
    }

    this._initStates();

    this.goToIndex(this.currentIndex);
  }
  /**
   * Transitions to specific slide, and updates the currentIndex/nextIndex/
   * prevIndex properties to facilitate looping.
   *
   * @method goToIndex
   * @param {Integer} target slide index (0-indexed)
   * @return {Integer} The active slide index.
  */


  goToIndex(index) {
    const lastIndex = this.currentIndex;

    if (index >= this.itemsCount) {
      this.currentIndex = 0;
    } else if (index < 0) {
      this.currentIndex = this.itemsCount - 1;
    } else {
      this.currentIndex = index;
    }

    this.nextIndex = this.currentIndex + 1 < this.itemsCount ? this.currentIndex + 1 : 0;
    this.prevIndex = this.currentIndex > 0 ? this.currentIndex - 1 : this.itemsCount - 1;
    this.$items.forEach(($item, itemIndex) => {
      $item.classList.remove('js-is-active');
      $item.classList.remove('js-was-active');
      $item.setAttribute('aria-hidden', 'true');

      if (lastIndex !== this.currentIndex && itemIndex === lastIndex) {
        $item.classList.add('js-was-active');
      }

      if (itemIndex === this.currentIndex) {
        $item.classList.add('js-is-active');
        $item.setAttribute('aria-hidden', 'false');
      }
    });
    this.$el.setAttribute('data-state', this.currentIndex);
    const changeEvent = new CustomEvent('slide-change', {
      detail: this.currentIndex
    });
    this.$el.dispatchEvent(changeEvent);
    this.$navItems.forEach($item => {
      $item.classList.remove('js-is-active');
      $item.removeAttribute('aria-current');

      if (Number($item.getAttribute('data-state')) === this.currentIndex) {
        $item.setAttribute('aria-current', 'true');
        $item.classList.add('js-is-active');
      }
    });
    return this.currentIndex;
  }
  /**
   * Moves the carousel back to the previous slide. Handles looping back to the last slide if at the start.
   *
   * @method prev
   * @return {Integer} The active slide index.
   */


  prev() {
    return this.goToIndex(this.prevIndex);
  }
  /**
   * Advances the carousel to the next slide. Handles looping back to the first slide if at the end.
   *
   * @method next
   * @return {Integer} The active slide index.
   */


  next() {
    return this.goToIndex(this.nextIndex);
  }
  /**
   * Play the carousel.
   *
   * @method play
   * @return {Integer|undefined} the `intervalID` returned by `setInterval`, or `undefined` if the timer was not started.
   */


  play() {
    this.animationSuspended = false; // Check if user prefers reduced motion, and don't auto-play if true

    if (!utils.prefersReducedMotion()) {
      // If the carousel is set to rotate on page load,
      // ensure rotation is paused on mouse hover or keyboard
      // focus of any element within the Carousel container
      this._stopWhenMouseFocus();

      if (this.$itemsContainer) {
        this.$itemsContainer.setAttribute('aria-live', 'off');
      }

      if (this.itemsCount > 1) {
        this.interval = setInterval(this.next.bind(this), this.config.duration);
      }
    }

    return this.interval;
  }
  /**
   * Stops the carousel from auto advancing.
   *
   * @method stop
   * @return {void}
   */


  stop() {
    this.animationSuspended = true;

    if (this.$itemsContainer) {
      this.$itemsContainer.setAttribute('aria-live', 'polite');
    }

    return clearInterval(this.interval);
  }

  _navPrev(evt) {
    evt.preventDefault();
    this.stop();

    this._track();

    return this.prev();
  }

  _navNext(evt) {
    evt.preventDefault();
    this.stop();

    this._track();

    return this.next();
  }

  _navPause(evt) {
    evt.preventDefault();

    if (evt.currentTarget.classList.contains('js-is-paused')) {
      evt.currentTarget.classList.remove('js-is-paused');
      evt.currentTarget.setAttribute('aria-label', I18n__default.t('carousel.pause'));
      evt.currentTarget.setAttribute('aria-pressed', 'true');
      this.play();
    } else {
      evt.currentTarget.classList.add('js-is-paused');
      evt.currentTarget.setAttribute('aria-label', I18n__default.t('carousel.play'));
      evt.currentTarget.setAttribute('aria-pressed', 'false');
      this.stop();
    }
  }

  _stopWhenMouseFocus() {
    if (this.mouseAndFocusListenersAdded) {
      return;
    }

    const mouseFocusEnter = () => {
      this.stop();
    };

    const mouseFocusLeave = () => {
      let isPaused = false;

      if (this.$pauseItem) {
        isPaused = this.$pauseItem.classList.contains('js-is-paused');
      }

      if (this.animationSuspended && !isPaused) {
        this.play();
      }
    };

    this.$el.addEventListener('mouseenter', mouseFocusEnter);
    this.$el.addEventListener('focusin', mouseFocusEnter);
    this.$el.addEventListener('mouseleave', mouseFocusLeave);
    this.$el.addEventListener('focusout', mouseFocusLeave);
    this.mouseAndFocusListenersAdded = true;
  }

  _initStates() {
    this.$el.setAttribute('role', 'region');
    this.$el.setAttribute('aria-roledescription', I18n__default.t('carousel.carousel_aria_roledescription'));

    if (this.$nav) {
      this.$nav.setAttribute('role', 'group');
      this.$nav.setAttribute('aria-label', I18n__default.t('carousel.slide_nav_aria_label'));
    }

    if (this.$navItems) {
      this.$navItems.forEach(($item, itemIndex) => {
        $item.setAttribute("aria-controls", this.itemsContainerId);
        $item.setAttribute('aria-roledescription', I18n__default.t('carousel.slide_aria_roledescription'));
        $item.setAttribute('aria-label', I18n__default.t('carousel.slide_aria_label', {
          currentSlide: itemIndex + 1,
          totalSlide: this.itemsCount
        }));
        $item.dataset.state = itemIndex;
        $item.setAttribute('role', 'group');
      });
    }

    if (this.$itemsContainer) {
      this.$itemsContainer.setAttribute('id', this.itemsContainerId);
    }

    if (this.$prevNavItem) {
      this.$prevNavItem.setAttribute('aria-controls', this.itemsContainerId);
    }

    if (this.$nextNavItem) {
      this.$nextNavItem.setAttribute('aria-controls', this.itemsContainerId);
    }

    if (this.$pauseItem) {
      this.$pauseItem.setAttribute('aria-label', I18n__default.t('carousel.pause'));
    }
  }

  _onClick(evt) {
    evt.preventDefault();
    const state = evt.currentTarget.getAttribute('data-state');
    this.goToIndex(~~parseInt(state, 10));

    this._track();

    return this.stop();
  }

  _track() {
    const currentItemText = this.$navItems[this.currentIndex] ? this.$navItems[this.currentIndex].textContent : ''; // Send carousel nav item text if present, otherwise send humanized currentIndex

    const label = currentItemText === '' ? this.currentIndex + 1 : currentItemText;
    Analytics__default.track('carousel', this.$el.id, label);
  }

}

exports.default = Carousel;
