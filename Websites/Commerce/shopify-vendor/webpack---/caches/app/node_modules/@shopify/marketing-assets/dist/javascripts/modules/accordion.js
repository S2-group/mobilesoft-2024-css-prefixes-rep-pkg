'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var enquire = require('enquire.js');
var keyCodes = require('../global/keycodes');
var Breakpoints = require('../global/breakpoints');
var AccordionItem = require('./accordion-item');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var enquire__default = /*#__PURE__*/_interopDefaultLegacy(enquire);
var keyCodes__default = /*#__PURE__*/_interopDefaultLegacy(keyCodes);
var Breakpoints__default = /*#__PURE__*/_interopDefaultLegacy(Breakpoints);
var AccordionItem__default = /*#__PURE__*/_interopDefaultLegacy(AccordionItem);

class Accordion {
  /**
  * Barebones JS accordion
  *
  * Defaults to mobile settings for now, since all accordions are currently mobile only
  *
  * @param {DOM element} el Element wrapper
  * @param {Object} [options] configuration options
  * @param {String} [options.itemSelector='.accordion-item--mobile'] The parent element for each accordion item
  * @param {String} [options.itemLink='.accordion-link'] Element to trigger accordion toggle
  * @param {String} [options.itemContent='.accordion-content'] Content to have visibility toggled
  * @param {Boolean} [options.mobileOnly=true] only works on mobile
  * @param {Boolean} [options.openFirst=true] Open first item by default
  * @param {Number} [options.slideSpeed=400] Slide speed duration in milliseconds. Automatically set to 0 if user has 'prefers-reduced-motion' set on their device
  * @class Accordion
  * @namespace ShopifyMarketing
  * @constructor
  */
  constructor(el, options) {
    this.config = _objectSpread__default({
      itemSelector: '.accordion-item--mobile',
      itemLink: '.accordion-link',
      itemContent: '.accordion-content',
      mobileOnly: true,
      openFirst: true,
      slideSpeed: 400
    }, options);
    this.$el = el;

    if (!this.$el) {
      return;
    }

    this.$accordionItems = [...this.$el.querySelectorAll(this.config.itemSelector)].map($item => {
      return new AccordionItem__default($item, this.config);
    });
    this.$accordionTriggers = this.$el.querySelectorAll(this.config.itemLink);
    this.toggle = this.toggle.bind(this);
    this.enable = this.enable.bind(this);
    this.disable = this.disable.bind(this);
    this._onKeyUp = this._onKeyUp.bind(this);
    this.keyboardNavItems = Array.from(this.$accordionTriggers);

    if (this.config.mobileOnly) {
      enquire__default.register(Breakpoints__default.prototype.tablet, this.disable).register(Breakpoints__default.prototype.phone, this.enable);
    } else {
      this.enable();
    }
  }
  /**
   * @method toggle
   * @param {DOM element} currentItem Element to trigger accordion toggle
   * @param {Boolean} [doAnimation=true] Perform the animation, if user doesn't prefer reduced motion
   */


  toggle($currentItem, doAnimation = true) {
    this.$accordionItems.forEach(accordionItem => {
      if (accordionItem.$el !== $currentItem) {
        return;
      }

      const speed = doAnimation ? null : 0;
      accordionItem.toggle(speed);
    });
  }
  /**
   * Recursively toggle all items that match the given `selector` to open or close.
   *
   * @method toggleAll
   * @param {String} [selector=this.config.itemLink] Selector to trigger accordion toggle on.
   */


  toggleAll(selector = this.config.itemLink) {
    let itemTrigger = this.$el.querySelector(selector);

    while (itemTrigger) {
      const accordionItemToOpen = itemTrigger.closest(this.config.itemSelector);
      this.toggle(accordionItemToOpen, false);
      itemTrigger = accordionItemToOpen.querySelector(this.config.itemContent).querySelector(selector);
    }
  }

  enable() {
    this.$accordionItems.forEach(accordionItem => {
      accordionItem.enable();

      if (typeof accordionItem.$el.dataset.openByDefault !== "undefined") {
        accordionItem.open(0);
      }
    });

    if (this.config.openFirst) {
      this.openFirst();
    }

    this.$el.classList.add('js-is-initialized');
    this.enableKeyboardNav();
  }

  disable() {
    this.$accordionItems.forEach(accordionItem => {
      accordionItem.disable();
    });
    this.$el.classList.remove('js-is-initialized');
    this.disableKeyboardNav();
  }

  openFirst() {
    this.$accordionItems[0].open(0);
  }

  enableKeyboardNav() {
    this.keyboardNavItems.forEach(item => {
      item.addEventListener('keyup', this._onKeyUp);
    });
  }

  disableKeyboardNav() {
    this.keyboardNavItems.forEach(item => {
      item.removeEventListener('keyup', this._onKeyUp);
    });
  }

  _onKeyUp(event) {
    const currentIndex = this.keyboardNavItems.indexOf(document.activeElement);

    const nextIndex = this._getNextKeyboardNavFocusIndex(event.keyCode, currentIndex);

    if (nextIndex !== undefined) {
      this.keyboardNavItems[nextIndex].focus();
    }
  }

  _getNextKeyboardNavFocusIndex(keyCode, currentIndex) {
    let nextIndex;

    switch (keyCode) {
      case keyCodes__default.UP:
        nextIndex = currentIndex - 1;
        nextIndex = nextIndex < 0 ? this.keyboardNavItems.length - 1 : nextIndex;
        break;

      case keyCodes__default.DOWN:
        nextIndex = currentIndex + 1;
        nextIndex = nextIndex >= this.keyboardNavItems.length ? 0 : nextIndex;
        break;

      case keyCodes__default.HOME:
        nextIndex = 0;
        break;

      case keyCodes__default.END:
        nextIndex = this.keyboardNavItems.length - 1;
        break;
    }

    return nextIndex;
  }

}

exports.default = Accordion;
