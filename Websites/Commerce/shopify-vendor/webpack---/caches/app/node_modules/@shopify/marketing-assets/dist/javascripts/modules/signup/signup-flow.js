'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var cookieHelper = require('../../helpers/cookie-helper');
var signupConstants = require('./signup-constants');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var cookieHelper__default = /*#__PURE__*/_interopDefaultLegacy(cookieHelper);

/**
 * Updates by reference the `targetUrlParams` by copying the parameters
 * listed in `urlParams` from the `sourceUrlParams` if they exist.
 * @param {string[]} urlParams A list of parameters to extract from the `sourceUrlParams`
 * @param {URLSearchParams} targetUrlParams UrlSearchParams to copy parameters to
 * @param {URLSearchParams} sourceUrlParams URLSearchParams to extract parameters from
 * @returns void
 */

function copyURLParams(urlParams, targetUrlParams, sourceUrlParams) {
  for (const parameterName of urlParams) {
    const parameterValue = sourceUrlParams.get(parameterName);

    if (parameterValue && parameterValue !== "undefined") {
      targetUrlParams.set(parameterName, parameterValue);
    }
  }
}
/**
 * Redirect the user to the new Signup funnel on https://accounts.shopify.com/store-create,
 * passing client-side information and hidden form data provided by consumer apps.
 * @see https://vault.shopify.io/page/Guidelines-for-signup-entry-points-and-calls-to-action~18975.md
 * @param {HTMLElement} domNode The target element that triggered the signup flow
 * @returns void
 */


function initSignupFlow(domNode) {
  var _window, _window$trekkie, _window$trekkie$trekk, _window$trekkie$trekk2;

  const signupFormData = new FormData(domNode.form || undefined);
  const $hiddenFieldsForm = document.querySelector(signupConstants.SELECTORS.HIDDEN_FORM_SELECTOR);
  const hiddenFormData = new FormData($hiddenFieldsForm || undefined); // Append client side information for later processing

  hiddenFormData.append(signupConstants.URL_PARAMS.AFFILIATE, cookieHelper__default.get(signupConstants.COOKIE_NAMES.SOURCE));
  hiddenFormData.append(signupConstants.URL_PARAMS.SESSION_TOKEN, cookieHelper__default.get(signupConstants.COOKIE_NAMES.SESSION_TOKEN));
  hiddenFormData.append(signupConstants.URL_PARAMS.MICRO_SESSION_ID, (_window = window) === null || _window === void 0 ? void 0 : (_window$trekkie = _window.trekkie) === null || _window$trekkie === void 0 ? void 0 : (_window$trekkie$trekk = _window$trekkie.trekkie) === null || _window$trekkie$trekk === void 0 ? void 0 : (_window$trekkie$trekk2 = _window$trekkie$trekk.defaultAttributes) === null || _window$trekkie$trekk2 === void 0 ? void 0 : _window$trekkie$trekk2.microSessionId);
  const signupUrlParams = new URLSearchParams();

  for (const [hiddenFieldName, hiddenFieldValue] of hiddenFormData.entries()) {
    // Excludes empty fields and legacy fields data sich as `signup[domain]`
    if (hiddenFieldName.startsWith("signup[")) {
      continue;
    } // Excludes empty fields and serialized empty values


    if (hiddenFieldValue && hiddenFieldValue !== "undefined") {
      signupUrlParams.append(hiddenFieldName, hiddenFieldValue);
    }
  }

  const email = signupFormData.get(signupConstants.SELECTORS.LOGIN_FORM);

  if (email) {
    // Encodes the `email` from the target `domNode` form for later Shop ID creation
    signupUrlParams.append(signupConstants.URL_PARAMS.LOGIN, window.btoa(email));
  }

  const pageURL = new URL(window.location.href);
  signupUrlParams.set(signupConstants.URL_PARAMS.SIGNUP_PAGE, pageURL.href); // Append affiliate parameters to the URL

  copyURLParams(signupConstants.AFFILIATE_TRACKING_PARAMS, signupUrlParams, pageURL.searchParams);
  copyURLParams(signupConstants.SIGNUP_REF_AND_PROMO_PARAMS, signupUrlParams, pageURL.searchParams);
  window.location.href = `${signupConstants.BASE_URL}?${signupUrlParams.toString()}`;
}

exports.initSignupFlow = initSignupFlow;
