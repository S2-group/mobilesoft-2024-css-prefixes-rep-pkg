'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var A11y = require('../global/a11y-helpers');
var Analytics = require('../global/analytics');
var AjaxEmailForm = require('./ajax-email-form');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var A11y__default = /*#__PURE__*/_interopDefaultLegacy(A11y);
var Analytics__default = /*#__PURE__*/_interopDefaultLegacy(Analytics);
var AjaxEmailForm__default = /*#__PURE__*/_interopDefaultLegacy(AjaxEmailForm);

/* global fbq */

class Subscribe extends AjaxEmailForm__default {
  constructor(block, options) {
    const form = block.querySelector('.subscribe__form');
    super(form, _objectSpread__default({
      json: true
    }, options));
    this.block = block;
    this.input = this.block.querySelector('.subscribe__email');
    this.content = this.block.querySelector('.subscribe__content');
    this.successMessage = this.block.querySelector('.subscribe__success');
    this.errorMessage = this.block.querySelectorAll('.marketing-form__messages');
  }

  displayErrors() {
    super.displayErrors();
    this.input.setAttribute('aria-invalid', 'true');
  }

  displaySuccess() {
    if (!this.successMessage) {
      return;
    }

    this.block.classList.add('js-success');
    this.successMessage.setAttribute('aria-hidden', 'false');
    this.content.setAttribute('aria-hidden', 'true');
    this.input.setAttribute('aria-invalid', 'false');
    A11y__default.prototype.pageLinkFocus(this.successMessage);
  }

  trackSuccess() {
    super.trackSuccess();
    const trackingAttributes = this.resolveSuccessTrackingAttributes();
    const fbqEvent = this.form.dataset.fbqEvent;
    Analytics__default.track(trackingAttributes.category, trackingAttributes.action, trackingAttributes.label);

    if (fbqEvent && typeof window.fbq !== 'undefined') {
      fbq('trackCustom', fbqEvent);
    }

    if (this.block.closest('.modal')) {
      Analytics__default.track(trackingAttributes.category, trackingAttributes.action, 'modalSubmit');
    } // consistent return, signupTracker returns a resolved deferred


    return Promise.resolve();
  }

  resolveSuccessTrackingAttributes() {
    return {
      category: this.form.dataset.eventCategory || this.form.dataset.gaEvent || this.form.dataset.gaCategory || 'blog',
      action: this.form.dataset.eventAction || this.form.dataset.gaAction || 'subscription',
      label: this.form.dataset.eventLabel || this.form.dataset.gaLabel || 'email'
    };
  }

}

exports.default = Subscribe;
