"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.isValidVariation = exports.getExperiment = exports.filterData = exports.createURL = void 0;
var _lodash = require("lodash");
var _types = require("./types");
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var filterData = function filterData(data) {
  return Object.entries(data) // omit all flags that are not experiments
  .filter(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 1),
      key = _ref2[0];
    return key.startsWith('experiment-');
  }) // return a nice and tidy array
  .map(function (_ref3) {
    var _ref4 = _slicedToArray(_ref3, 2),
      key = _ref4[0],
      value = _ref4[1];
    return {
      experimentIdentifier: key,
      group: String(value)
    };
  });
};
exports.filterData = filterData;
var isValidVariation = function isValidVariation(receivedVariations, currentExperimentGroup) {
  return receivedVariations.some(function (variation) {
    return variation.group === currentExperimentGroup;
  }) || currentExperimentGroup === _types.Variations.FLAG_CONTROL;
};
exports.isValidVariation = isValidVariation;
var getExperiment = function getExperiment(id, experiments) {
  return (0, _lodash.find)(experiments, {
    experimentIdentifier: id
  });
};
exports.getExperiment = getExperiment;
var createURL = function createURL(baseUrl, requestParams) {
  var url = new URL(baseUrl);
  for (var _key in requestParams) {
    if (requestParams.hasOwnProperty(_key) && !!requestParams[_key]) {
      url.searchParams.append(_key, String(requestParams[_key]));
    }
  }
  return url.href;
};
exports.createURL = createURL;