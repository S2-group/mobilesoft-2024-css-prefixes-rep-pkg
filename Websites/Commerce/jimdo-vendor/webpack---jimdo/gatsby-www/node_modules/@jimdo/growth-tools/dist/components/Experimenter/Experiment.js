"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Experiment = void 0;
var _react = _interopRequireWildcard(require("react"));
var _logger = require("../../utilities/logger/logger");
var _types = require("./types");
var _useExperiments2 = require("./useExperiments");
var _utilities = require("./utilities");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj["default"] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
var Experiment = function Experiment(props) {
  var children = props.children,
    experimentId = props.id,
    variations = props.variations,
    exclude = props.exclude,
    legacy = props.legacy,
    trackingMigration = props.trackingMigration;
  var _useExperiments = (0, _useExperiments2.useExperiments)(),
    allocations = _useExperiments.allocations,
    track = _useExperiments.track,
    jimdoApp = _useExperiments.jimdoApp,
    debugMode = _useExperiments.debugMode;
  if (!experimentId) {
    (0, _logger.logger)(_logger.LoggerTypes.ERROR, 'An experimentId is required and non was provided', jimdoApp, {
      experimentId: experimentId,
      exclude: exclude
    });
  }
  var currentExperiment = (0, _utilities.getExperiment)(experimentId, allocations);
  var currentExperimentGroup = currentExperiment === null || currentExperiment === void 0 ? void 0 : currentExperiment.group;
  var controlComponent = (variations || []).reduce(function (acc, value) {
    // checking for node because the component will be used in vanilla javascript and we do not type safety
    if (value && value.group === _types.Variations.FLAG_CONTROL && value.hasOwnProperty('node')) {
      return value.node;
    }
    return acc;
  }, children); // Render control group if there is a manual exclusion or if the returned variation equals to "excluded"

  var renderControlOnExclusion = !!exclude || currentExperimentGroup && currentExperimentGroup === _types.Variations.FLAG_EXCLUDED; // If there is no variations, show controlComponent

  var showControlComponent = !!variations && variations.length === 0 || !variations || !experimentId; // if all goes well â€“ show variation

  var showVariation = !!currentExperimentGroup && !!variations && (0, _utilities.isValidVariation)(variations, currentExperimentGroup);
  var experimentFlagNotFound = Boolean(!currentExperimentGroup && allocations.length > 0 && !!experimentId);
  (0, _react.useEffect)(function () {
    if (renderControlOnExclusion) {
      if (debugMode) {
        (0, _logger.logger)(_logger.LoggerTypes.LOG, 'User excluded, showing control', jimdoApp, {
          experimentId: experimentId,
          currentExperimentGroup: currentExperimentGroup,
          exclude: exclude
        });
      }
      track({
        action: legacy ? _types.EventActions.EXCLUDE : _types.EventActions.ALLOCATION,
        label: legacy ? _types.EventLabels.ABTEST : _types.EventLabels.SUCCESS,
        payload: {
          auto: true,
          testId: experimentId,
          experimentId: experimentId,
          testGroup: _types.Variations.FLAG_EXCLUDED,
          experimentGroup: _types.Variations.FLAG_EXCLUDED,
          reason: typeof exclude === 'string' ? exclude : undefined
        }
      });
    } else if (showControlComponent) {
      if (debugMode) {
        (0, _logger.logger)(_logger.LoggerTypes.LOG, 'Showing control', jimdoApp, {
          experimentId: experimentId,
          currentExperimentGroup: currentExperimentGroup,
          exclude: exclude
        });
      }
      track({
        action: legacy ? _types.EventActions.MISSING_VARIATION : _types.EventActions.ERROR,
        label: legacy ? _types.EventLabels.ABTEST : _types.EventLabels.MISSING_VARIATION,
        payload: {
          auto: true,
          testId: experimentId,
          experimentId: experimentId,
          testGroup: currentExperimentGroup,
          experimentGroup: currentExperimentGroup
        }
      });
    } else if (showVariation) {
      /*
      * legacy  | trackingMigration | Result
           x    |       x           | ALLOCATION
           x    |       -           | ALLOCATION
           -    |       x           | SEEN
           -    |       -           | ALLOCATION
      */
      if (debugMode) {
        (0, _logger.logger)(_logger.LoggerTypes.LOG, "Showing variation: ".concat(currentExperimentGroup.toString()), jimdoApp, {
          experimentId: experimentId,
          currentExperimentGroup: currentExperimentGroup,
          exclude: exclude
        });
      }
      var action = _types.EventActions.ALLOCATION;
      if (trackingMigration && !legacy) {
        action = _types.EventActions.SEEN;
      }
      track({
        action: action,
        label: legacy ? _types.EventLabels.ABTEST : _types.EventLabels.SUCCESS,
        payload: {
          auto: true,
          testId: experimentId,
          experimentId: experimentId,
          testGroup: currentExperimentGroup,
          experimentGroup: currentExperimentGroup
        }
      });
    } else if (!currentExperimentGroup) {
      (0, _logger.logger)(_logger.LoggerTypes.INFO, 'Waiting for allocations...', jimdoApp, {
        experimentId: experimentId,
        currentExperimentGroup: currentExperimentGroup,
        exclude: exclude
      });
    }
  }, [currentExperimentGroup]);
  if (experimentFlagNotFound) {
    (0, _logger.logger)(_logger.LoggerTypes.ERROR, "Provided experiment id \"".concat(experimentId, "\" cannot be found in allocations. The experiment flag is either archived or you provided an experiment id which does not exist on launchdarkly."), jimdoApp, {
      experimentId: experimentId
    });
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, controlComponent);
  }
  if (renderControlOnExclusion) {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, controlComponent);
  }
  if (showControlComponent) {
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, controlComponent);
  }
  if (showVariation) {
    var _experimentVariation$;
    var experimentVariation = variations.filter(function (variation) {
      return variation.group === currentExperimentGroup;
    })[0];
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, (_experimentVariation$ = experimentVariation === null || experimentVariation === void 0 ? void 0 : experimentVariation.node) !== null && _experimentVariation$ !== void 0 ? _experimentVariation$ : controlComponent);
  } else if (currentExperimentGroup && !(0, _utilities.isValidVariation)(variations, currentExperimentGroup)) {
    (0, _logger.logger)(_logger.LoggerTypes.ERROR, 'User allocation does not match with (control|target|target-a|target-b|excluded)', jimdoApp, {
      experimentId: experimentId,
      currentExperimentGroup: currentExperimentGroup,
      exclude: exclude
    });
    track({
      action: legacy ? _types.EventActions.INVALID_EXPERIMENT_GROUP : _types.EventActions.ERROR,
      label: legacy ? _types.EventLabels.ABTEST : _types.EventLabels.INVALID_EXPERIMENT_GROUP,
      payload: {
        auto: true,
        testId: experimentId,
        experimentId: experimentId,
        testGroup: currentExperimentGroup,
        experimentGroup: currentExperimentGroup
      }
    });
    return /*#__PURE__*/_react["default"].createElement(_react["default"].Fragment, null, controlComponent);
  } else if (!currentExperimentGroup) {
    return null;
  }
  (0, _logger.logger)(_logger.LoggerTypes.ERROR, 'Unexpected behaviour. Use case not defined', jimdoApp, {
    experimentId: experimentId,
    currentExperimentGroup: currentExperimentGroup,
    exclude: exclude
  });
  return null;
};
exports.Experiment = Experiment;