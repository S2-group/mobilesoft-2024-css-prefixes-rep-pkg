"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.logger = exports.LoggerTypes = void 0;
var _monitoring = require("@jimdo/monitoring");
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
var LoggerTypes;
exports.LoggerTypes = LoggerTypes;
(function (LoggerTypes) {
  LoggerTypes[LoggerTypes["WARN"] = 0] = "WARN";
  LoggerTypes[LoggerTypes["LOG"] = 1] = "LOG";
  LoggerTypes[LoggerTypes["ERROR"] = 2] = "ERROR";
  LoggerTypes[LoggerTypes["INFO"] = 3] = "INFO";
  LoggerTypes[LoggerTypes["DEBUG"] = 4] = "DEBUG";
})(LoggerTypes || (exports.LoggerTypes = LoggerTypes = {}));
var logger = function logger(type, message, jimdoApp) {
  var env = process.env.NODE_ENV || '';
  var prefix = '[Experiment] ';
  if (['development'].includes(env)) {
    switch (type) {
      case LoggerTypes.WARN:
        console.warn(prefix, message);
        return;
      case LoggerTypes.LOG:
        console.log(prefix, message);
        return;
      case LoggerTypes.ERROR:
        console.error(prefix, message);
        return;
      case LoggerTypes.INFO:
        console.info(prefix, message);
        return;
      case LoggerTypes.DEBUG:
        console.debug(prefix, message);
        return;
      default:
        return;
    }
  } // staging or prod

  if (typeof document !== 'undefined') {
    for (var _len = arguments.length, args = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {
      args[_key - 3] = arguments[_key];
    }
    if (type === LoggerTypes.ERROR) {
      (0, _monitoring.reportException)(message, _objectSpread({
        content: 'Logging',
        framework: 'growth-tools',
        jimdoApp: jimdoApp
      }, args));
    } else if (type === LoggerTypes.WARN) {
      (0, _monitoring.reportWarning)(message, _objectSpread({
        content: 'Logging',
        framework: 'growth-tools',
        jimdoApp: jimdoApp
      }, args));
    }
  }
};
exports.logger = logger;