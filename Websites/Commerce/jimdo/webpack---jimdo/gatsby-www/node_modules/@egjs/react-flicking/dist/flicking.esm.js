/*
Copyright (c) 2015-present NAVER Corp.
name: @egjs/react-flicking
license: MIT
author: NAVER Corp.
repository: https://github.com/naver/egjs-flicking/tree/master/packages/react-flicking
version: 3.7.3
*/
import NativeFlicking, { DEFAULT_OPTIONS, withFlickingMethods } from '@egjs/flicking';
import { Component, createElement, version, Children } from 'react';
import ListDiffer from '@egjs/list-differ';
import ChildrenDiffer from '@egjs/children-differ';

/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

/* global Reflect, Promise */
var extendStatics = function (d, b) {
  extendStatics = Object.setPrototypeOf || {
    __proto__: []
  } instanceof Array && function (d, b) {
    d.__proto__ = b;
  } || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
  };
  return extendStatics(d, b);
};
function __extends(d, b) {
  extendStatics(d, b);
  function __() {
    this.constructor = d;
  }
  d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
}
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
function __decorate(decorators, target, key, desc) {
  var c = arguments.length,
    r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,
    d;
  if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
  return c > 3 && r && Object.defineProperty(target, key, r), r;
}
function __spreadArrays() {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) s += arguments[i].length;
  for (var r = Array(s), k = 0, i = 0; i < il; i++) for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) r[k] = a[j];
  return r;
}
var CloneComponent = /*#__PURE__*/
function (_super) {
  __extends(CloneComponent, _super);
  function CloneComponent() {
    return _super !== null && _super.apply(this, arguments) || this;
  }
  var __proto = CloneComponent.prototype;
  __proto.render = function () {
    return this.props.children;
  };
  return CloneComponent;
}(Component);
var FLICKING_PROPS = {
  tag: "div",
  viewportTag: "div",
  cameraTag: "div",
  classPrefix: "eg-flick",
  plugins: [],
  onNeedPanel: function (e) {},
  onMoveStart: function (e) {},
  onMove: function (e) {},
  onMoveEnd: function (e) {},
  onHoldStart: function (e) {},
  onHoldEnd: function (e) {},
  onRestore: function (e) {},
  onSelect: function (e) {},
  onChange: function (e) {},
  onVisibleChange: function (e) {}
};
var Flicking = /*#__PURE__*/
function (_super) {
  __extends(Flicking, _super); // life cycle

  function Flicking(props) {
    var _this = _super.call(this, props) || this;
    _this.state = {
      cloneCount: 0
    };
    _this.options = __assign(__assign({}, DEFAULT_OPTIONS), {
      renderExternal: true
    }); // differ

    _this.pluginsDiffer = new ListDiffer();
    var options = _this.options;
    for (var name in props) {
      if (name in DEFAULT_OPTIONS) {
        options[name] = props[name];
      }
    }
    return _this;
  }
  var __proto = Flicking.prototype;
  __proto.render = function () {
    var _this = this;
    var props = this.props;
    /* tslint:disable:naming-convention */

    var Tag = props.tag;
    var Viewport = props.viewportTag;
    var Camera = props.cameraTag;
    /* tslint:enable:naming-convention */

    var classPrefix = props.classPrefix;
    var attributes = {};
    for (var name in props) {
      if (!(name in FLICKING_PROPS) && !(name in DEFAULT_OPTIONS)) {
        attributes[name] = props[name];
      }
    }
    return createElement(Tag, __assign({}, attributes, {
      ref: function (e) {
        e && (_this.containerElement = e);
      }
    }), createElement(Viewport, {
      className: classPrefix + "-viewport"
    }, createElement(Camera, {
      className: classPrefix + "-camera",
      ref: function (e) {
        e && (_this.cameraElement = e);
      }
    }, this.renderPanels())));
  };
  __proto.componentDidUpdate = function () {
    var result = this.childrenDiffer.update(this.getElements());
    this.flicking.sync(result);
    this.checkPlugins();
    this.checkCloneCount();
  };
  __proto.componentDidMount = function () {
    var _this = this;
    this.childrenDiffer = new ChildrenDiffer(this.getElements());
    this.flicking = new NativeFlicking(this.containerElement, __assign(__assign({}, this.options), {
      framework: "react",
      frameworkVersion: version
    })).on({
      moveStart: function (e) {
        return _this.props.onMoveStart(e);
      },
      move: function (e) {
        return _this.props.onMove(e);
      },
      moveEnd: function (e) {
        return _this.props.onMoveEnd(e);
      },
      holdStart: function (e) {
        return _this.props.onHoldStart(e);
      },
      holdEnd: function (e) {
        return _this.props.onHoldEnd(e);
      },
      select: function (e) {
        return _this.props.onSelect(e);
      },
      needPanel: function (e) {
        return _this.props.onNeedPanel(e);
      },
      change: function (e) {
        return _this.props.onChange(e);
      },
      restore: function (e) {
        return _this.props.onRestore(e);
      },
      visibleChange: function (e) {
        _this.props.onVisibleChange(e);
        _this.forceUpdate();
      }
    });
    var children = this.getChildren();
    this.jsxDiffer = new ListDiffer(children.map(function (child) {
      return "" + child.key;
    }));
    if (this.props.status) {
      this.setStatus(this.props.status);
    }
    this.checkPlugins();
    this.checkCloneCount();
    if (this.props.renderOnlyVisible) {
      this.forceUpdate();
    }
  };
  __proto.componentWillUnmount = function () {
    this.destroy({
      preserveUI: true
    });
  }; // private

  __proto.checkPlugins = function () {
    var _a = this.pluginsDiffer.update(this.props.plugins),
      list = _a.list,
      added = _a.added,
      removed = _a.removed,
      prevList = _a.prevList;
    this.flicking.addPlugins(added.map(function (index) {
      return list[index];
    }));
    this.flicking.removePlugins(removed.map(function (index) {
      return prevList[index];
    }));
  };
  __proto.checkCloneCount = function () {
    var cloneCount = this.flicking.getCloneCount();
    if (this.state.cloneCount !== cloneCount) {
      this.setState({
        cloneCount: cloneCount
      });
    }
  };
  __proto.renderPanels = function () {
    var renderOnlyVisible = this.props.renderOnlyVisible;
    var flicking = this.flicking;
    var reactChildren = this.getChildren();
    var panels;
    if (flicking && renderOnlyVisible) {
      var diffResult = this.jsxDiffer.update(reactChildren.map(function (child) {
        return "" + child.key;
      }));
      var panelCnt_1 = reactChildren.length;
      flicking.beforeSync(diffResult);
      var indexesToRender = flicking.getRenderingIndexes(diffResult);
      panels = indexesToRender.map(function (index) {
        if (index >= panelCnt_1) {
          var relativeIndex = index % panelCnt_1;
          var cloneIndex = Math.floor(index / panelCnt_1) - 1;
          var origEl = reactChildren[relativeIndex];
          return createElement(CloneComponent, {
            key: "clone" + cloneIndex + origEl.key
          }, origEl);
        } else {
          return reactChildren[index];
        }
      });
    } else {
      var cloneCount = this.state.cloneCount;
      panels = __spreadArrays(reactChildren);
      var _loop_1 = function (i) {
        panels = panels.concat(reactChildren.map(function (el) {
          return createElement(CloneComponent, {
            key: "clone" + i + el.key
          }, el);
        }));
      };
      for (var i = 0; i < cloneCount; ++i) {
        _loop_1(i);
      }
    }
    return panels;
  };
  __proto.getChildren = function () {
    var children = Children.toArray(this.props.children).slice();
    return typeof this.props.lastIndex === "number" ? children.slice(0, this.props.lastIndex + 1) : children;
  };
  __proto.getElements = function () {
    return this.cameraElement.children;
  };
  Flicking.defaultProps = FLICKING_PROPS;
  __decorate([withFlickingMethods], Flicking.prototype, "flicking", void 0);
  return Flicking;
}(Component);
export default Flicking;