"use strict";

function _typeof(obj) {
  "@babel/helpers - typeof";

  return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (obj) {
    return typeof obj;
  } : function (obj) {
    return obj && "function" == typeof Symbol && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
  }, _typeof(obj);
}
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ExperimentsProvider = void 0;
var _react = _interopRequireWildcard(require("react"));
var _fetchExperiments = require("./fetchExperiments");
var _Context = require("./Context");
var _utilities = require("./utilities");
var _logger = require("../../utilities/logger/logger");
var _utilities2 = require("../../utilities");
var _isAffiliate = require("../../utilities/isAffiliate/isAffiliate");
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function _getRequireWildcardCache(nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || _typeof(obj) !== "object" && typeof obj !== "function") {
    return {
      "default": obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj["default"] = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var ExperimentsProvider = function ExperimentsProvider(_ref) {
  var children = _ref.children,
    language = _ref.language,
    mobileBreakpoint = _ref.mobileBreakpoint,
    track = _ref.track,
    country = _ref.country,
    jimdoApp = _ref.jimdoApp,
    dateJoined = _ref.dateJoined,
    debugMode = _ref.debugMode,
    prefetchedAllocations = _ref.prefetchedAllocations;
  var _useState = (0, _react.useState)([]),
    _useState2 = _slicedToArray(_useState, 2),
    allocations = _useState2[0],
    setAllocations = _useState2[1];
  var trackWithDefaults = function trackWithDefaults(_ref2) {
    var action = _ref2.action,
      label = _ref2.label,
      payload = _ref2.payload;
    track({
      category: 'experiment',
      // debatable
      action: action,
      label: label,
      payload: _objectSpread({
        isMobileDevice: (0, _utilities2.isMobileDevice)(),
        isMobileLayout: (0, _utilities2.isMobileLayout)(mobileBreakpoint)
      }, payload)
    });
  };
  var setUserAllocations = function setUserAllocations(allocations) {
    setAllocations(allocations);
    if (debugMode) {
      (0, _logger.logger)(_logger.LoggerTypes.INFO, allocations, jimdoApp);
    }
  };
  (0, _react.useEffect)(function () {
    if (prefetchedAllocations === undefined) {
      var isAffiliate = (0, _isAffiliate.isAffiliate)();
      (0, _fetchExperiments.fetchExperiments)({
        country: country,
        language: language,
        isMobileLayout: (0, _utilities2.isMobileLayout)(mobileBreakpoint),
        jimdoApp: jimdoApp,
        isAffiliate: isAffiliate,
        dateJoined: dateJoined
      }).then(function (data) {
        if (!!data) {
          var filteredData = (0, _utilities.filterData)(data) || [];
          setUserAllocations(filteredData);
        }
      })["catch"](function (error) {
        (0, _logger.logger)(_logger.LoggerTypes.ERROR, error, jimdoApp);
      });
    } else {
      setUserAllocations(prefetchedAllocations);
    }
  }, [language, _utilities2.isMobileLayout, country, jimdoApp, prefetchedAllocations]);
  return /*#__PURE__*/_react["default"].createElement(_Context.ExperimentContext.Provider, {
    value: {
      allocations: allocations,
      track: function track(payload) {
        return trackWithDefaults(payload);
      },
      jimdoApp: jimdoApp,
      debugMode: !!debugMode
    }
  }, children);
};
exports.ExperimentsProvider = ExperimentsProvider;