"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.hasCookiePermission = hasCookiePermission;
var _jsCookie = _interopRequireDefault(require("js-cookie"));
var _types = require("./types");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    "default": obj
  };
}
function hasCookiePermission(permissionLevel) {
  try {
    // TODO: For some reason i need to cast the known cookies array. Ask for help on this one.
    // const knownCookies = {
    //   necessary: Object.values(NecessaryCookies),
    //   functional: Object.values(FunctionalCookies),
    //   performance: Object.values(PerformanceCookies),
    //   marketing: Object.values(MarketingCookies),
    // };
    // const permissionLevelCookies =  knownCookies[permissionLevel] as string[]
    // return permissionLevelCookies.map((c) => Cookie.get(c) === 'allow').includes(true);
    switch (permissionLevel) {
      case 'necessary':
        return Object.values(_types.NecessaryCookies).map(function (c) {
          return _jsCookie["default"].get(c) === 'allow';
        }).includes(true);
      case 'functional':
        return Object.values(_types.FunctionalCookies).map(function (c) {
          return _jsCookie["default"].get(c) === 'allow';
        }).includes(true);
      case 'performance':
        return Object.values(_types.PerformanceCookies).map(function (c) {
          return _jsCookie["default"].get(c) === 'allow';
        }).includes(true);
      case 'marketing':
        return Object.values(_types.MarketingCookies).map(function (c) {
          return _jsCookie["default"].get(c) === 'allow';
        }).includes(true);
      default:
        return false;
    }
  } catch (error) {
    // return false on default
    return false;
  }
}