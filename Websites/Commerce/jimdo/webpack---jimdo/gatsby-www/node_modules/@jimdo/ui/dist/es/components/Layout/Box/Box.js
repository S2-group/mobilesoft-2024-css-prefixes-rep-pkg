import { getNonResponsiveClasses } from '../../../utils/getNonResponsiveClasses/getNonResponsiveClasses.js';
import { getResponsiveClasses } from '../../../utils/getResponsiveClasses/getResponsiveClasses.js';
import { useStyles } from '../../../hooks/useStyles/useStyles.js';
import React__default from 'react';
import styles from './Box.module.scss.js';
function BoxBase(props, ref) {
  const {
    component: Component = 'div',
    className,
    boxShadow,
    borderRadius,
    borderBottomLeftRadius,
    borderBottomRightRadius,
    borderTopLeftRadius,
    borderTopRightRadius,
    borderColor,
    hasBorder,
    backgroundColor,
    padding,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight,
    margin,
    marginTop,
    marginBottom,
    marginLeft,
    marginRight,
    color,
    order,
    flex,
    flexFill,
    flexGrow,
    flexShrink,
    alignSelf,
    justifySelf,
    columnStart,
    columnEnd,
    rowStart,
    rowEnd,
    columnSpan,
    rowSpan,
    children,
    ...rest
  } = props;
  const boxStyles = {
    'background-color': backgroundColor,
    'border-color': borderColor
  };
  const responsiveStyles = {
    'border-radius': borderRadius,
    'border-bottom-left-radius': borderBottomLeftRadius,
    'border-bottom-right-radius': borderBottomRightRadius,
    'border-top-left-radius': borderTopLeftRadius,
    'border-top-right-radius': borderTopRightRadius,
    'box-shadow': boxShadow,
    flex,
    flexFill,
    'flex-grow': flexGrow,
    'flex-shrink': flexShrink,
    order,
    'align-self': alignSelf,
    'justify-self': justifySelf,
    'grid-column-start': columnStart,
    'grid-column-end': columnEnd,
    'grid-row-start': rowStart,
    'grid-row-end': rowEnd,
    'grid-column': columnSpan,
    'grid-row': rowSpan
  };
  const classes = useStyles({
    padding,
    paddingTop,
    paddingBottom,
    paddingLeft,
    paddingRight,
    margin,
    marginTop,
    marginBottom,
    marginLeft,
    marginRight,
    color
  }, {
    [styles.hasBorder]: hasBorder
  }, className, ...getNonResponsiveClasses(boxStyles, styles), ...getResponsiveClasses(responsiveStyles, styles));
  // "classes" can be an empty string so we set "className" to "undefined" for that case to prevent rendering an empty class attribute
  return React__default.createElement(Component, {
    ref: ref,
    ...rest,
    className: classes || undefined
  }, props.children);
}
// We use typecasting to force args table to show up in Storybook
const Box = React__default.forwardRef(BoxBase);
export { Box };