import { Box } from '../../Layout/Box/Box.js';
import { Icon } from '../../DataDisplay/Icon/Icon.js';
import { LoadingDots } from '../../Feedback/LoadingDots/LoadingDots.js';
import { OverridableLink } from '../../Utils/OverridableLink/OverridableLink.js';
import { reactNodeToString } from '../../../utils/reactNodeToString/reactNodeToString.js';
import classNames from 'classnames';
import React__default, { forwardRef } from 'react';
import styles from './Button.module.scss.js';

/* eslint-disable prettier/prettier */
function ButtonBase(props, ref) {
  const {
    buttonStyle,
    buttonSize,
    loading,
    inverted,
    disabled,
    className,
    noGutter,
    ...buttonProps
  } = props;
  const buttonLabel = reactNodeToString(props.children);
  const classes = classNames(styles.button, {
    [styles.primaryButton]: buttonStyle === 'primary',
    [styles.secondaryButton]: buttonStyle === 'secondary',
    [styles.negativeButton]: buttonStyle === 'negative',
    [styles.negativeSecondaryButton]: buttonStyle === 'negativeSecondary',
    [styles.upgradeButton]: buttonStyle === 'upgrade',
    [styles.upgradeSecondaryButton]: buttonStyle === 'upgradeSecondary',
    [styles.small]: buttonSize === 'small',
    [styles.loading]: loading,
    [styles.disabled]: disabled,
    [styles.inverted]: inverted,
    [styles.noGutter]: noGutter
  }, className);
  const renderContent = () => React__default.createElement(React__default.Fragment, null, React__default.createElement(Box, {
    component: "span",
    className: styles.children
  }, props.children), props.icon && React__default.createElement(Box, {
    "aria-hidden": true,
    component: Icon,
    icon: props.icon,
    marginLeft: props.iconPosition !== 'left' ? 'xs' : undefined,
    marginRight: props.iconPosition === 'left' ? 'xs' : undefined,
    flexShrink: "0"
  }));
  const {
    children,
    icon,
    iconPosition,
    ...otherProps
  } = buttonProps;
  if (props['component'] || props['href']) {
    const linkClasses = classNames(classes, styles.linkButton, {
      [styles.iconLeft]: props.icon && props.iconPosition === 'left',
      [styles.iconRight]: props.icon && props.iconPosition !== 'left'
    });
    return React__default.createElement(OverridableLink, {
      ref: ref,
      ...otherProps,
      className: linkClasses,
      "aria-disabled": disabled || undefined,
      tabIndex: disabled ? -1 : undefined
    }, renderContent());
  }
  return React__default.createElement("button", {
    ref: ref,
    "aria-label": loading ? buttonLabel : undefined,
    ...otherProps,
    className: classes,
    disabled: disabled || loading
  }, React__default.createElement("span", {
    className: classNames(styles.content, {
      [styles.iconLeft]: props.icon && props.iconPosition === 'left',
      [styles.iconRight]: props.icon && props.iconPosition !== 'left'
    })
  }, renderContent()), loading && React__default.createElement("span", {
    className: styles.loadingIndicatorWrapper
  }, React__default.createElement(LoadingDots, null)));
}
const Button = forwardRef(ButtonBase);
export { Button };