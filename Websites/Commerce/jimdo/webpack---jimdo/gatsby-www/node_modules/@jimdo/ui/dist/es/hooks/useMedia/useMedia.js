import { useState, useEffect } from 'react';
import findLastIndex from 'lodash.findlastindex';

/* Based on the useMedia hook from useHooks website - https://usehooks.com/useMedia/ */
const useMedia = (queries, values, defaultValue) => {
  // Array containing a media query list for each query
  // ensure that length of queries array matches that of values array
  // also ensure that window object is available to make it work with server-side rendering
  const mediaQueryLists = typeof window === 'undefined' ? [] : queries.slice(0, values.length).map(q => window.matchMedia(q));
  // Function that gets value based on matching media query
  const getValue = () => {
    // Get index of first media query that matches
    const index = findLastIndex(mediaQueryLists, mql => mql.matches);
    // Return related value or defaultValue if none
    return (values === null || values === void 0 ? void 0 : values[index]) || defaultValue;
  };
  // State and setter for matched value
  const [value, setValue] = useState(getValue);
  useEffect(() => {
    // Event listener callback
    // Note: By defining getValue outside of useEffect we ensure that it has ...
    // ... current values of hook args (as this hook callback is created once on mount).
    const handler = () => setValue(getValue);
    // Set a listener for each media query with above handler as callback.
    mediaQueryLists.forEach(mql => {
      // "addEventListener" is not supported in Safari 13 and below
      if (mql.addEventListener) {
        mql.addEventListener('change', handler);
      } else {
        mql.addListener(handler);
      }
    });
    // Remove listeners on cleanup
    return () => mediaQueryLists.forEach(mql => {
      // "removeEventListener" is not supported in Safari 13 and below
      if (mql.removeEventListener) {
        mql.removeEventListener('change', handler);
      } else {
        mql.removeListener(handler);
      }
    });
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);
  return value;
};
export { useMedia };