'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _asyncToGenerator = require('@babel/runtime/helpers/asyncToGenerator');
var Twine = require('twine');
var Breakpoints = require('../../global/breakpoints');
var StatefulForm = require('../stateful-form');
require('./signup-hidden-fields');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _asyncToGenerator__default = /*#__PURE__*/_interopDefaultLegacy(_asyncToGenerator);
var Twine__default = /*#__PURE__*/_interopDefaultLegacy(Twine);
var Breakpoints__default = /*#__PURE__*/_interopDefaultLegacy(Breakpoints);
var StatefulForm__default = /*#__PURE__*/_interopDefaultLegacy(StatefulForm);

class SignupForm extends StatefulForm__default {
  constructor(form, i18nNamespace) {
    super(form, i18nNamespace);
    this.breakpoints = new Breakpoints__default();
    this.pending = false;
  }

  getHiddenFields() {
    return ShopifyMarketing.context[this.$form.dataset.hiddenFieldsNamespace];
  }

  handleSubmit(...args) {
    var _superprop_getHandleSubmit = () => super.handleSubmit,
        _this = this;

    return _asyncToGenerator__default(function* () {
      _this.pending = true;
      Twine__default.refresh();

      const hiddenFields = _this.getHiddenFields();

      if (hiddenFields) {
        // This will set hidden input value via Twine refresh that gets triggered
        // on submit.
        hiddenFields.setField('y', hiddenFields.y());
      }

      try {
        yield _superprop_getHandleSubmit().call(_this, args);
      } finally {
        _this.pending = false;
      }
    })();
  }

  populateEmail(value) {
    var _this2 = this;

    return _asyncToGenerator__default(function* () {
      const emailField = _this2.fields.email;
      emailField.setState({
        value
      });
      emailField.handleBlur();

      try {
        yield _this2.validateFieldIfSet(emailField); // eslint-disable-next-line no-empty
      } catch (error) {}

      if (!emailField.state.value || emailField.state.error) {
        _this2.focusOnField('email');
      }
    })();
  }

  handleEmailSuggestionClick() {
    const emailField = this.fields.email;
    emailField.setState({
      value: emailField.state.suggestion.full,
      hint: false
    });
  }

}

Twine__default.register('SignupForm', SignupForm);

exports.default = SignupForm;
