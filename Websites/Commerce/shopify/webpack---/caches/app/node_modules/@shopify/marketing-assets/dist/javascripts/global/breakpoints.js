'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);

const defaultBreakpoints = {
  desktop: 'screen and (min-width: 67.5em)',
  tablet: 'screen and (min-width: 46.875em) and (max-width: 67.4375em)',
  tabletUp: 'screen and (min-width: 46.875em)',
  tabletDown: 'screen and (max-width: 67.4375em)',
  phone: 'screen and (max-width: 46.8125em)'
};
/**
 * A simple JavaScript interface to our CSS-defined breakpoints/media queries.
 * @param {Object} [breakpoints] hash of media queries
 * @class Breakpoints
 * @namespace ShopifyMarketing
 * @constructor
*/

function Breakpoints(breakpoints) {
  this.breakpoints = breakpoints || defaultBreakpoints;
  this.init();
}

Breakpoints.prototype = _objectSpread__default({}, defaultBreakpoints);

Breakpoints.prototype.init = function () {
  Object.keys(this.breakpoints).forEach(key => {
    this[key] = this.breakpoints[key];
  });
};
/**
 * A wrapper for `window.matchMedia.matches`. First checks to see if the
 * argument is a known breakpoint in the breakpoints object, then checks
 * whether the current viewport matches that breakpoint's media query.
 * @method matches
 * @param {String} breakpoint Name of the breakpoint from the hash
 * @return {Boolean} true if current viewport matches media query
*/


Breakpoints.prototype.matches = function (breakpoint) {
  // requires matchMedia to exist or be polyfilled
  if (this.breakpoints[breakpoint]) {
    return window.matchMedia(this.breakpoints[breakpoint]).matches;
  }

  return false;
};
/**
 * Determines whether the current viewport matches the `desktop` media query.
 * @method isDesktop
 * @return {Boolean} true if current viewport matches the desktop media query
*/


Breakpoints.prototype.isDesktop = function () {
  return this.matches('desktop');
};

exports.default = Breakpoints;
