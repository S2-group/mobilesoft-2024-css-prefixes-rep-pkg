'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./utils');

/**
 * @class ShopifyMarketing.Helpers.Animate
 */

/**
* Animates the element to vertically collapse
*
* @method slideUp
* @param {DOM element} $el The element to apply the animation to
* @param {integer} [speed=400] Speed of the animation, in milliseconds
*/

function slideUp($el, speed = 400) {
  const transitionEnd = () => {
    $el.style.cssText = 'display: none;';
  };

  if (utils.prefersReducedMotion() || speed === 0) {
    transitionEnd();
    return;
  }

  $el.style.cssText = `
    display: block;
    height: ${$el.offsetHeight}px;
    overflow: hidden;
    transition: height ${speed}ms, padding ${speed}ms, margin ${speed}ms;
  `;
  $el.addEventListener('transitionend', transitionEnd, {
    once: true
  });
  /* eslint-disable babel/no-unused-expressions */
  // Force a redraw on the element, otherwise the transition doesn't happen

  $el.offsetHeight;
  /* eslint-enable babel/no-unused-expressions */

  $el.style.cssText += `
    height: 0;
    padding-top: 0;
    padding-bottom: 0;
    margin-top: 0;
    margin-bottom: 0;
  `;
}
/**
* Animates the element to vertically expand
*
* @method slideDown
* @param {DOM element} $el The element to apply the animation to
* @param {integer} [speed=400] Speed of the animation, in milliseconds
*/

function slideDown($el, speed = 400) {
  const transitionEnd = () => {
    $el.style.removeProperty('height');
  };

  $el.style.cssText = `
    display: block;
    overflow: auto;
  `;

  if (utils.prefersReducedMotion() || speed === 0) {
    transitionEnd();
    return;
  }

  const finalHeight = $el.offsetHeight;
  $el.style.cssText += `
    height: 0;
    overflow: hidden;
    transition: height ${speed}ms, padding ${speed}ms, margin ${speed}ms;
  `;
  $el.addEventListener('transitionend', transitionEnd, {
    once: true
  });
  /* eslint-disable babel/no-unused-expressions */
  // Force a redraw on the element, otherwise the transition doesn't happen

  $el.offsetHeight;
  /* eslint-enable babel/no-unused-expressions */

  $el.style.height = `${finalHeight}px`;
}
/**
* Animates the element to vertically expand or collapse depending on its current state
*
* @method slideToggle
* @param {DOM element} $el The element to apply the animation to
* @param {integer} [speed=400] Speed of the animation, in milliseconds
*/

function slideToggle($el, speed = 400) {
  if (window.getComputedStyle($el).display === 'none') {
    return slideDown($el, speed);
  } else {
    return slideUp($el, speed);
  }
}
const Fn = {
  slideUp,
  slideDown,
  slideToggle
};

exports.default = Fn;
exports.slideDown = slideDown;
exports.slideToggle = slideToggle;
exports.slideUp = slideUp;
