'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Twine = require('twine');
var QueryString = require('../../helpers/querystring');
var cookieHelper = require('../../helpers/cookie-helper');
var URLHelper = require('../../helpers/url');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var Twine__default = /*#__PURE__*/_interopDefaultLegacy(Twine);
var QueryString__default = /*#__PURE__*/_interopDefaultLegacy(QueryString);
var cookieHelper__default = /*#__PURE__*/_interopDefaultLegacy(cookieHelper);
var URLHelper__default = /*#__PURE__*/_interopDefaultLegacy(URLHelper);

/* eslint-disable babel/camelcase */

function HiddenFields(defaults, node) {
  const qs = this.qs();
  this.fields = {
    ssid: qs.ssid || cookieHelper__default.get('ssid'),
    source: defaults.source || cookieHelper__default.get('source'),
    source_url: defaults.source_url || cookieHelper__default.get('source_url'),
    source_url_referer: defaults.source_url_referer || cookieHelper__default.get('source_url_referer'),
    signup_code: defaults.signup_code || qs.signup_code,
    signup_page: defaults.signup_page || window.location.href,
    signup_currency: defaults.signup_currency || '',
    signup_page_referer: defaults.signup_page_referer || document.referrer,
    signup_types: defaults.signup_types,
    theme: defaults.theme,
    domain_to_connect: defaults.domain_to_connect,
    selected_app: defaults.selected_app,
    selected_plan: defaults.selected_plan,
    y: this.y()
  };
  this.$node = node;
  this.signupTypesFromQS(qs);
}

HiddenFields.prototype.y = function () {
  return cookieHelper__default.get('_y') || cookieHelper__default.get('_shopify_y');
};

HiddenFields.prototype.setField = function (field, value) {
  this.fields[field] = value;
};

HiddenFields.prototype.qs = function () {
  return QueryString__default.parse(URLHelper__default.querystring(window.location.href));
};

HiddenFields.prototype.signupTypesFromQS = function (queryString) {
  if (!queryString.signup_types) {
    return;
  }

  const fragment = document.createDocumentFragment();
  const types = queryString.signup_types.split(',').filter(type => {
    return this.fields.signup_types.indexOf(type) < 0;
  });
  types.forEach(type => {
    const input = document.createElement('input');
    input.name = 'signup_types[]';
    input.type = 'hidden';
    input.value = type;
    fragment.appendChild(input);
  });
  this.fields.signup_types += types;
  this.$node.appendChild(fragment);
};

Twine__default.register('HiddenFields', HiddenFields);
/* eslint-enable babel/camelcase */

exports.default = HiddenFields;
