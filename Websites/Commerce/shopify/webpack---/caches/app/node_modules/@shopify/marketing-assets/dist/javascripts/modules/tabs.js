'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var keyCodes = require('../global/keycodes');
var utils = require('../helpers/utils');
var Carousel = require('./carousel');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var keyCodes__default = /*#__PURE__*/_interopDefaultLegacy(keyCodes);
var Carousel__default = /*#__PURE__*/_interopDefaultLegacy(Carousel);

class Tabs {
  constructor(el, options) {
    this.$el = el;

    if (!this.$el) {
      return;
    }

    this.config = _objectSpread__default({
      tabNav: '.tabs__nav',
      tabNavItems: '.tabs__nav-link',
      tabItems: '.tabs__item',
      setInitialState: true
    }, options);
    this.$tabNav = this.$el.querySelector(this.config.tabNav);
    this.$tabNavItems = this.$el.querySelectorAll(this.config.tabNavItems);
    this.$tabItems = this.$el.querySelectorAll(this.config.tabItems);
    this._onKeydown = this._onKeydown.bind(this);

    if (this.config.setInitialState) {
      this.setInitialState();
    }
  }

  setInitialState() {
    this.carousel = new Carousel__default(this.$el, {
      carouselItem: this.config.tabItems,
      carouselNavItem: this.config.tabNavItems
    });
    this.$tabNav.setAttribute('role', 'tablist');

    for (let index = 0; index < this.carousel.itemsCount; index++) {
      const id = utils.uniqueId('Tabs');
      const tabNavItem = this.$tabNavItems[index];
      tabNavItem.setAttribute('aria-controls', id);
      tabNavItem.setAttribute('role', 'tab');
      tabNavItem.setAttribute('href', `#${id}`);
      const tabItem = this.$tabItems[index];
      tabItem.setAttribute('role', 'tabpanel');
      tabItem.tabindex = 0;
      tabItem.id = id;
    }

    this.$el.addEventListener('slide-change', evt => this.updateState(evt.detail));
    this.$tabNavItems.forEach(navItem => navItem.addEventListener('keydown', this._onKeydown)); // Catch up our state with `this.carousel`

    this.updateState(this.carousel.currentIndex);
  }

  removeState() {
    this.$tabNav.removeAttribute('role');
    this.$tabNavItems.forEach(el => {
      el.removeAttribute('aria-controls');
      el.removeAttribute('aria-selected');
      el.removeAttribute('role');
    });
    this.$tabItems.forEach(el => {
      el.removeAttribute('aria-hidden');
      el.removeAttribute('id');
      el.removeAttribute('role');
    });
  }

  updateState(activeIndex) {
    this.$tabNavItems.forEach(el => {
      el.setAttribute('aria-selected', 'false');
      el.tabindex = -1;
    });
    const currentTabNavItem = this.$tabNavItems[activeIndex];
    currentTabNavItem.setAttribute('aria-selected', 'true');
    currentTabNavItem.tabindex = 0; // Update tabpanels

    this.$tabItems.forEach(el => el.setAttribute('aria-hidden', 'true'));
    this.$tabItems[activeIndex].setAttribute('aria-hidden', 'false');
  }

  _onKeydown(evt) {
    let newIndex;

    switch (evt.keyCode) {
      case keyCodes__default.UP:
      case keyCodes__default.LEFT:
        newIndex = this.carousel.prevIndex;
        break;

      case keyCodes__default.DOWN:
      case keyCodes__default.RIGHT:
        newIndex = this.carousel.nextIndex;
        break;

      case keyCodes__default.HOME:
        newIndex = 0;
        break;

      case keyCodes__default.END:
        newIndex = this.carousel.itemsCount - 1;
        break;
    }

    if (typeof newIndex !== 'undefined') {
      evt.preventDefault();
      this.$tabNavItems[newIndex].click();
      this.$tabNavItems[newIndex].focus();
    }
  }

}

exports.default = Tabs;
