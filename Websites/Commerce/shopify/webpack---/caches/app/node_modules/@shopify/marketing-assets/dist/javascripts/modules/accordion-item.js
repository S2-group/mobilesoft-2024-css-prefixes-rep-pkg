'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _defineProperty = require('@babel/runtime/helpers/defineProperty');
var utils = require('../helpers/utils');
var animate = require('../helpers/animate');
var keyCodes = require('../global/keycodes');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _defineProperty__default = /*#__PURE__*/_interopDefaultLegacy(_defineProperty);
var keyCodes__default = /*#__PURE__*/_interopDefaultLegacy(keyCodes);

class AccordionItem {
  constructor($el, options) {
    _defineProperty__default(this, "ACTIVE_CLASS", 'js-is-active');

    _defineProperty__default(this, "ID_PREFIX", 'AccordionItem');

    this.$el = $el;
    this.$trigger = $el.querySelector(options.itemLink);
    this.$content = $el.querySelector(options.itemContent);
    this.options = options;
    this.triggerIsButton = this.$trigger.tagName.toLowerCase() === 'button';
    this._onClick = this._onClick.bind(this);
    this._onKeyUp = this._onKeyUp.bind(this);

    this._setElementIDs();
  }

  enable() {
    this.$trigger.addEventListener('click', this._onClick);

    if (this.triggerIsButton === false) {
      this.$trigger.addEventListener('keyup', this._onKeyUp);
    }

    this._setA11yAttributes(true);
  }

  disable() {
    this.$trigger.removeEventListener('click', this._onClick);

    if (this.triggerIsButton === false) {
      this.$trigger.removeEventListener('keyup', this._onKeyUp);
    }

    this._unsetA11yAttributes();

    this._removeStyles();

    this.$el.classList.remove(this.ACTIVE_CLASS);
  }

  open(speed = this.options.slideSpeed) {
    this.$el.classList.add(this.ACTIVE_CLASS);
    animate.slideDown(this.$content, speed);

    this._setA11yAttributes();
  }

  close(speed = this.options.slideSpeed) {
    this.$el.classList.remove(this.ACTIVE_CLASS);
    animate.slideUp(this.$content, speed);

    this._setA11yAttributes();
  }

  toggle(speed = this.options.slideSpeed) {
    if (this.$el.classList.contains(this.ACTIVE_CLASS)) {
      this.close(speed);
    } else {
      this.open(speed);
    }
  }

  _setElementIDs() {
    if (this.$trigger.getAttribute('id') === null) {
      this.$trigger.setAttribute('id', utils.uniqueId(this.ID_PREFIX));
    }

    if (this.$content.getAttribute('id') === null) {
      this.$content.setAttribute('id', utils.uniqueId(this.ID_PREFIX));
    }
  }

  _setA11yAttributes(initialize = false) {
    const isActive = this.$el.classList.contains(this.ACTIVE_CLASS);

    if (initialize) {
      this.$trigger.setAttribute('tabindex', 0);
      this.$trigger.setAttribute('aria-controls', this.$content.getAttribute('id'));
      this.$content.setAttribute('role', 'region');
      this.$content.setAttribute('aria-labelledby', this.$trigger.getAttribute('id'));
    }

    this.$trigger.setAttribute('aria-expanded', isActive);
    this.$content.setAttribute('aria-hidden', !isActive);
  }

  _unsetA11yAttributes() {
    this.$trigger.removeAttribute('tabindex');
    this.$trigger.removeAttribute('aria-controls');
    this.$trigger.removeAttribute('aria-expanded');
    this.$content.removeAttribute('role', 'region');
    this.$content.removeAttribute('aria-labelledby');
    this.$content.removeAttribute('aria-hidden');
  }

  _removeStyles() {
    this.$trigger.removeAttribute('style');
    this.$content.removeAttribute('style');
  }

  _onClick(event) {
    event.preventDefault();
    this.toggle();
  }

  _onKeyUp(event) {
    if (event.keyCode !== keyCodes__default.ENTER && event.keyCode !== keyCodes__default.SPACE) {
      return;
    }

    event.preventDefault();
    this.toggle();
  }

}

exports.default = AccordionItem;
