'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var _objectSpread = require('@babel/runtime/helpers/objectSpread2');
var cookieHelper = require('../helpers/cookie-helper');

function _interopDefaultLegacy (e) { return e && typeof e === 'object' && 'default' in e ? e['default'] : e; }

var _objectSpread__default = /*#__PURE__*/_interopDefaultLegacy(_objectSpread);
var cookieHelper__default = /*#__PURE__*/_interopDefaultLegacy(cookieHelper);

/**
 * Javascript component to help you set announcement banners.
 * @param {DOMElement} el Element
 * @param {Object} [options] configuration options
 * @param {String} [options.activeClass='is-active'] the class to toggle the announcement between active and inactive with
 * @param {String} [options.announcementId=el.dataset.announcementId] a unique id to represent the announcement cookie
 * @param {String} [options.closeTarget='.js-announcement__close'] the target class to trigger the announcement to close
 * @param {String} [options.cookieDuration=604800000] duration that cookie will last (in milliseconds)
 * @param {String} [options.cookieName=`announcement_closed_${announcementId}`] the cookie referenced to decide whether to show announcement
 * @class Announcement
 * @constructor
 */

function Announcement(el, options) {
  this.$el = el;
  this.$container = this.$el.parentNode;
  this.settings = _objectSpread__default({
    activeClass: 'is-active',
    announcementId: this.$el.dataset.announcementId,
    closeTarget: '.js-announcement__close',
    // 1 week (milli * sec * min * hour * day)
    cookieDuration: 1000 * 60 * 60 * 24 * 7,
    cookieName: false
  }, options);

  if (this.settings.cookieName) {
    this.cookieName = this.settings.cookieName;
  } else {
    this.cookieName = `announcement_closed_${this.settings.announcementId}`;
  }

  if (!cookieHelper__default.get(this.cookieName)) {
    this.open();
  }

  const closeAction = this.close.bind(this);
  this.$el.querySelectorAll(this.settings.closeTarget).forEach(closeTarget => {
    closeTarget.addEventListener('click', closeAction);
  });
}
/**
 * Opens the announcement banner
 * @method open
 */


Announcement.prototype.open = function () {
  this.$el.classList.add(this.settings.activeClass);
};
/**
 * Closes the announcement banner
 * @method close
 */


Announcement.prototype.close = function () {
  this._setCookie();

  this.$el.classList.remove(this.settings.activeClass);
  this.$container.focus();
};

Announcement.prototype._setCookie = function () {
  const date = new Date();
  const expTime = date.getTime() + this.settings.cookieDuration;
  date.setTime(expTime);
  cookieHelper__default.set(this.cookieName, true, {
    expires: date.toGMTString()
  });
};

exports.default = Announcement;
